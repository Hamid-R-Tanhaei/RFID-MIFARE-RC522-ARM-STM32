
Stm32f103zct6_RFID_Mifare_RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005850  08005850  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005850  08005850  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080058c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080058c8  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015740  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000211f  00000000  00000000  000357d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000755d  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000650  00000000  00000000  0003ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002280  00000000  00000000  0003f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017dba  00000000  00000000  00041728  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008cac  00000000  00000000  000594e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000813bc  00000000  00000000  0006218e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000e354a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016f0  00000000  00000000  000e35c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08005744 	.word	0x08005744

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08005744 	.word	0x08005744

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <HAL_InitTick+0x3c>)
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <HAL_InitTick+0x40>)
 800022e:	7809      	ldrb	r1, [r1, #0]
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000236:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000238:	fbb2 f0f3 	udiv	r0, r2, r3
 800023c:	f000 f894 	bl	8000368 <HAL_SYSTICK_Config>
 8000240:	b908      	cbnz	r0, 8000246 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	2d0f      	cmp	r5, #15
 8000244:	d901      	bls.n	800024a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000246:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000248:	bd38      	pop	{r3, r4, r5, pc}
 800024a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800024c:	4602      	mov	r2, r0
 800024e:	4629      	mov	r1, r5
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	f000 f852 	bl	80002fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <HAL_InitTick+0x44>)
 800025a:	4620      	mov	r0, r4
 800025c:	601d      	str	r5, [r3, #0]
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f82d 	bl	80002d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f004 fd46 	bl	8004d14 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	2000012c 	.word	0x2000012c
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	2000012c 	.word	0x2000012c

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002bc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80002be:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80002c0:	d002      	beq.n	80002c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	42a0      	cmp	r0, r4
 80002d0:	d3fa      	bcc.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002d8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e6:	400b      	ands	r3, r1
 80002e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002f0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002f2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002fe:	b430      	push	{r4, r5}
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000306:	f1c3 0507 	rsb	r5, r3, #7
 800030a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000310:	bf28      	it	cs
 8000312:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000314:	2c06      	cmp	r4, #6
 8000316:	d919      	bls.n	800034c <HAL_NVIC_SetPriority+0x50>
 8000318:	f04f 34ff 	mov.w	r4, #4294967295
 800031c:	3b03      	subs	r3, #3
 800031e:	409c      	lsls	r4, r3
 8000320:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000324:	f04f 32ff 	mov.w	r2, #4294967295
 8000328:	40aa      	lsls	r2, r5
 800032a:	ea21 0102 	bic.w	r1, r1, r2
 800032e:	fa01 f203 	lsl.w	r2, r1, r3
 8000332:	4322      	orrs	r2, r4
 8000334:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000336:	2800      	cmp	r0, #0
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	db0a      	blt.n	8000352 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000340:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000344:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000348:	bc30      	pop	{r4, r5}
 800034a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800034c:	2400      	movs	r4, #0
 800034e:	4623      	mov	r3, r4
 8000350:	e7e8      	b.n	8000324 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <HAL_NVIC_SetPriority+0x68>)
 8000354:	f000 000f 	and.w	r0, r0, #15
 8000358:	4403      	add	r3, r0
 800035a:	761a      	strb	r2, [r3, #24]
 800035c:	bc30      	pop	{r4, r5}
 800035e:	4770      	bx	lr
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	e000ecfc 	.word	0xe000ecfc

08000368 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000368:	3801      	subs	r0, #1
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036e:	d20d      	bcs.n	800038c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000370:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000372:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000376:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	4c06      	ldr	r4, [pc, #24]	; (8000394 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000382:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000384:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000386:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000388:	6019      	str	r1, [r3, #0]
 800038a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800038c:	2001      	movs	r0, #1
 800038e:	4770      	bx	lr
 8000390:	e000e010 	.word	0xe000e010
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000398:	680a      	ldr	r2, [r1, #0]
 800039a:	2a00      	cmp	r2, #0
 800039c:	f000 80f0 	beq.w	8000580 <HAL_GPIO_Init+0x1e8>
{
 80003a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 80003a4:	f04f 0a00 	mov.w	sl, #0
{
 80003a8:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 80003aa:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003ac:	f8df c214 	ldr.w	ip, [pc, #532]	; 80005c4 <HAL_GPIO_Init+0x22c>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003b0:	f8df e214 	ldr.w	lr, [pc, #532]	; 80005c8 <HAL_GPIO_Init+0x230>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003b4:	4f7c      	ldr	r7, [pc, #496]	; (80005a8 <HAL_GPIO_Init+0x210>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003b6:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80005cc <HAL_GPIO_Init+0x234>
 80003ba:	e004      	b.n	80003c6 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 80003bc:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003be:	fa32 f305 	lsrs.w	r3, r2, r5
 80003c2:	f000 8083 	beq.w	80004cc <HAL_GPIO_Init+0x134>
    ioposition = (0x01uL << position);
 80003c6:	2301      	movs	r3, #1
 80003c8:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ca:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 80003ce:	42a3      	cmp	r3, r4
 80003d0:	d1f4      	bne.n	80003bc <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80003d2:	684a      	ldr	r2, [r1, #4]
 80003d4:	2a12      	cmp	r2, #18
 80003d6:	f000 80a9 	beq.w	800052c <HAL_GPIO_Init+0x194>
 80003da:	f200 8092 	bhi.w	8000502 <HAL_GPIO_Init+0x16a>
 80003de:	2a02      	cmp	r2, #2
 80003e0:	f000 80a8 	beq.w	8000534 <HAL_GPIO_Init+0x19c>
 80003e4:	f240 8086 	bls.w	80004f4 <HAL_GPIO_Init+0x15c>
 80003e8:	2a03      	cmp	r2, #3
 80003ea:	d072      	beq.n	80004d2 <HAL_GPIO_Init+0x13a>
 80003ec:	2a11      	cmp	r2, #17
 80003ee:	d102      	bne.n	80003f6 <HAL_GPIO_Init+0x5e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f0:	68cb      	ldr	r3, [r1, #12]
 80003f2:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f6:	2cff      	cmp	r4, #255	; 0xff
 80003f8:	d86f      	bhi.n	80004da <HAL_GPIO_Init+0x142>
 80003fa:	4681      	mov	r9, r0
 80003fc:	6803      	ldr	r3, [r0, #0]
 80003fe:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000400:	260f      	movs	r6, #15
 8000402:	fa06 fb02 	lsl.w	fp, r6, r2
 8000406:	ea23 030b 	bic.w	r3, r3, fp
 800040a:	fa0a f202 	lsl.w	r2, sl, r2
 800040e:	4313      	orrs	r3, r2
 8000410:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000414:	684a      	ldr	r2, [r1, #4]
 8000416:	00d3      	lsls	r3, r2, #3
 8000418:	d56a      	bpl.n	80004f0 <HAL_GPIO_Init+0x158>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800041e:	f025 0303 	bic.w	r3, r5, #3
 8000422:	f049 0901 	orr.w	r9, r9, #1
 8000426:	f8cc 9018 	str.w	r9, [ip, #24]
 800042a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800042e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000432:	f009 0901 	and.w	r9, r9, #1
 8000436:	f8cd 900c 	str.w	r9, [sp, #12]
 800043a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800043e:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000442:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000446:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800044a:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800044e:	fa06 f609 	lsl.w	r6, r6, r9
 8000452:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000456:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000458:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800045a:	d019      	beq.n	8000490 <HAL_GPIO_Init+0xf8>
 800045c:	4540      	cmp	r0, r8
 800045e:	d06d      	beq.n	800053c <HAL_GPIO_Init+0x1a4>
 8000460:	4e52      	ldr	r6, [pc, #328]	; (80005ac <HAL_GPIO_Init+0x214>)
 8000462:	42b0      	cmp	r0, r6
 8000464:	f000 808d 	beq.w	8000582 <HAL_GPIO_Init+0x1ea>
 8000468:	4e51      	ldr	r6, [pc, #324]	; (80005b0 <HAL_GPIO_Init+0x218>)
 800046a:	42b0      	cmp	r0, r6
 800046c:	f000 8092 	beq.w	8000594 <HAL_GPIO_Init+0x1fc>
 8000470:	4e50      	ldr	r6, [pc, #320]	; (80005b4 <HAL_GPIO_Init+0x21c>)
 8000472:	42b0      	cmp	r0, r6
 8000474:	d07b      	beq.n	800056e <HAL_GPIO_Init+0x1d6>
 8000476:	4e50      	ldr	r6, [pc, #320]	; (80005b8 <HAL_GPIO_Init+0x220>)
 8000478:	42b0      	cmp	r0, r6
 800047a:	bf0c      	ite	eq
 800047c:	f04f 0b05 	moveq.w	fp, #5
 8000480:	f04f 0b06 	movne.w	fp, #6
 8000484:	9e01      	ldr	r6, [sp, #4]
 8000486:	fa0b f909 	lsl.w	r9, fp, r9
 800048a:	ea46 0609 	orr.w	r6, r6, r9
 800048e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000490:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000492:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000494:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000496:	bf4c      	ite	mi
 8000498:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800049a:	43a3      	bicpl	r3, r4
 800049c:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800049e:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004a0:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80004a2:	bf4c      	ite	mi
 80004a4:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004a6:	43a3      	bicpl	r3, r4
 80004a8:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80004aa:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ac:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80004ae:	bf4c      	ite	mi
 80004b0:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004b2:	43a3      	bicpl	r3, r4
 80004b4:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b6:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b8:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ba:	d516      	bpl.n	80004ea <HAL_GPIO_Init+0x152>
          SET_BIT(EXTI->FTSR, iocurrent);
 80004bc:	431c      	orrs	r4, r3
 80004be:	60fc      	str	r4, [r7, #12]
 80004c0:	680a      	ldr	r2, [r1, #0]
	position++;
 80004c2:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c4:	fa32 f305 	lsrs.w	r3, r2, r5
 80004c8:	f47f af7d 	bne.w	80003c6 <HAL_GPIO_Init+0x2e>
  }
}
 80004cc:	b005      	add	sp, #20
 80004ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004d2:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004d4:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004d8:	d98f      	bls.n	80003fa <HAL_GPIO_Init+0x62>
 80004da:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 80004de:	3a08      	subs	r2, #8
 80004e0:	6843      	ldr	r3, [r0, #4]
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	f100 0904 	add.w	r9, r0, #4
 80004e8:	e78a      	b.n	8000400 <HAL_GPIO_Init+0x68>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004ea:	ea23 0404 	bic.w	r4, r3, r4
 80004ee:	60fc      	str	r4, [r7, #12]
 80004f0:	680a      	ldr	r2, [r1, #0]
 80004f2:	e763      	b.n	80003bc <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80004f4:	b1aa      	cbz	r2, 8000522 <HAL_GPIO_Init+0x18a>
 80004f6:	2a01      	cmp	r2, #1
 80004f8:	f47f af7d 	bne.w	80003f6 <HAL_GPIO_Init+0x5e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004fc:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000500:	e779      	b.n	80003f6 <HAL_GPIO_Init+0x5e>
      switch (GPIO_Init->Mode)
 8000502:	4e2e      	ldr	r6, [pc, #184]	; (80005bc <HAL_GPIO_Init+0x224>)
 8000504:	42b2      	cmp	r2, r6
 8000506:	d00c      	beq.n	8000522 <HAL_GPIO_Init+0x18a>
 8000508:	d920      	bls.n	800054c <HAL_GPIO_Init+0x1b4>
 800050a:	4e2d      	ldr	r6, [pc, #180]	; (80005c0 <HAL_GPIO_Init+0x228>)
 800050c:	42b2      	cmp	r2, r6
 800050e:	d008      	beq.n	8000522 <HAL_GPIO_Init+0x18a>
 8000510:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000514:	42b2      	cmp	r2, r6
 8000516:	d004      	beq.n	8000522 <HAL_GPIO_Init+0x18a>
 8000518:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800051c:	42b2      	cmp	r2, r6
 800051e:	f47f af6a 	bne.w	80003f6 <HAL_GPIO_Init+0x5e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000522:	688a      	ldr	r2, [r1, #8]
 8000524:	b9e2      	cbnz	r2, 8000560 <HAL_GPIO_Init+0x1c8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	f04f 0a04 	mov.w	sl, #4
 800052a:	e764      	b.n	80003f6 <HAL_GPIO_Init+0x5e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800052c:	68cb      	ldr	r3, [r1, #12]
 800052e:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8000532:	e760      	b.n	80003f6 <HAL_GPIO_Init+0x5e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000534:	68cb      	ldr	r3, [r1, #12]
 8000536:	f103 0a08 	add.w	sl, r3, #8
          break;
 800053a:	e75c      	b.n	80003f6 <HAL_GPIO_Init+0x5e>
 800053c:	f04f 0b01 	mov.w	fp, #1
 8000540:	fa0b f909 	lsl.w	r9, fp, r9
 8000544:	ea46 0609 	orr.w	r6, r6, r9
 8000548:	9601      	str	r6, [sp, #4]
 800054a:	e7a1      	b.n	8000490 <HAL_GPIO_Init+0xf8>
      switch (GPIO_Init->Mode)
 800054c:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000550:	42b2      	cmp	r2, r6
 8000552:	d0e6      	beq.n	8000522 <HAL_GPIO_Init+0x18a>
 8000554:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000558:	42b2      	cmp	r2, r6
 800055a:	f47f af4c 	bne.w	80003f6 <HAL_GPIO_Init+0x5e>
 800055e:	e7e0      	b.n	8000522 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000560:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000562:	bf0c      	ite	eq
 8000564:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8000566:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000568:	f04f 0a08 	mov.w	sl, #8
 800056c:	e743      	b.n	80003f6 <HAL_GPIO_Init+0x5e>
 800056e:	f04f 0b04 	mov.w	fp, #4
 8000572:	9e01      	ldr	r6, [sp, #4]
 8000574:	fa0b f909 	lsl.w	r9, fp, r9
 8000578:	ea46 0609 	orr.w	r6, r6, r9
 800057c:	9601      	str	r6, [sp, #4]
 800057e:	e787      	b.n	8000490 <HAL_GPIO_Init+0xf8>
 8000580:	4770      	bx	lr
 8000582:	f04f 0b02 	mov.w	fp, #2
 8000586:	9e01      	ldr	r6, [sp, #4]
 8000588:	fa0b f909 	lsl.w	r9, fp, r9
 800058c:	ea46 0609 	orr.w	r6, r6, r9
 8000590:	9601      	str	r6, [sp, #4]
 8000592:	e77d      	b.n	8000490 <HAL_GPIO_Init+0xf8>
 8000594:	f04f 0b03 	mov.w	fp, #3
 8000598:	9e01      	ldr	r6, [sp, #4]
 800059a:	fa0b f909 	lsl.w	r9, fp, r9
 800059e:	ea46 0609 	orr.w	r6, r6, r9
 80005a2:	9601      	str	r6, [sp, #4]
 80005a4:	e774      	b.n	8000490 <HAL_GPIO_Init+0xf8>
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	40011000 	.word	0x40011000
 80005b0:	40011400 	.word	0x40011400
 80005b4:	40011800 	.word	0x40011800
 80005b8:	40011c00 	.word	0x40011c00
 80005bc:	10210000 	.word	0x10210000
 80005c0:	10310000 	.word	0x10310000
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80005d0:	6883      	ldr	r3, [r0, #8]
 80005d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80005d4:	bf14      	ite	ne
 80005d6:	2001      	movne	r0, #1
 80005d8:	2000      	moveq	r0, #0
 80005da:	4770      	bx	lr

080005dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80005dc:	b902      	cbnz	r2, 80005e0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005de:	0409      	lsls	r1, r1, #16
 80005e0:	6101      	str	r1, [r0, #16]
  }
}
 80005e2:	4770      	bx	lr

080005e4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80005e4:	2800      	cmp	r0, #0
 80005e6:	f000 8155 	beq.w	8000894 <HAL_RCC_OscConfig+0x2b0>
{
 80005ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005ee:	6803      	ldr	r3, [r0, #0]
{
 80005f0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005f2:	07dd      	lsls	r5, r3, #31
 80005f4:	4604      	mov	r4, r0
 80005f6:	d535      	bpl.n	8000664 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005f8:	49a8      	ldr	r1, [pc, #672]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 80005fa:	684a      	ldr	r2, [r1, #4]
 80005fc:	f002 020c 	and.w	r2, r2, #12
 8000600:	2a04      	cmp	r2, #4
 8000602:	f000 8105 	beq.w	8000810 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000606:	684a      	ldr	r2, [r1, #4]
 8000608:	f002 020c 	and.w	r2, r2, #12
 800060c:	2a08      	cmp	r2, #8
 800060e:	f000 80fb 	beq.w	8000808 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	6863      	ldr	r3, [r4, #4]
 8000614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000618:	d010      	beq.n	800063c <HAL_RCC_OscConfig+0x58>
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 8120 	beq.w	8000860 <HAL_RCC_OscConfig+0x27c>
 8000620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000624:	f000 8178 	beq.w	8000918 <HAL_RCC_OscConfig+0x334>
 8000628:	4b9c      	ldr	r3, [pc, #624]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e004      	b.n	8000646 <HAL_RCC_OscConfig+0x62>
 800063c:	4a97      	ldr	r2, [pc, #604]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 800063e:	6813      	ldr	r3, [r2, #0]
 8000640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000644:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000646:	f7ff fe2f 	bl	80002a8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800064a:	4d94      	ldr	r5, [pc, #592]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 800064c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800064e:	e005      	b.n	800065c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000650:	f7ff fe2a 	bl	80002a8 <HAL_GetTick>
 8000654:	1b80      	subs	r0, r0, r6
 8000656:	2864      	cmp	r0, #100	; 0x64
 8000658:	f200 80f5 	bhi.w	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800065c:	682b      	ldr	r3, [r5, #0]
 800065e:	039a      	lsls	r2, r3, #14
 8000660:	d5f6      	bpl.n	8000650 <HAL_RCC_OscConfig+0x6c>
 8000662:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000664:	079f      	lsls	r7, r3, #30
 8000666:	d44d      	bmi.n	8000704 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000668:	071a      	lsls	r2, r3, #28
 800066a:	d522      	bpl.n	80006b2 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800066c:	69a3      	ldr	r3, [r4, #24]
 800066e:	2b00      	cmp	r3, #0
 8000670:	f000 80ba 	beq.w	80007e8 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000674:	2201      	movs	r2, #1
 8000676:	4b8a      	ldr	r3, [pc, #552]	; (80008a0 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000678:	4d88      	ldr	r5, [pc, #544]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 800067a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800067c:	f7ff fe14 	bl	80002a8 <HAL_GetTick>
 8000680:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000682:	e005      	b.n	8000690 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000684:	f7ff fe10 	bl	80002a8 <HAL_GetTick>
 8000688:	1b80      	subs	r0, r0, r6
 800068a:	2802      	cmp	r0, #2
 800068c:	f200 80db 	bhi.w	8000846 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000690:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000692:	079b      	lsls	r3, r3, #30
 8000694:	d5f6      	bpl.n	8000684 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000696:	4b83      	ldr	r3, [pc, #524]	; (80008a4 <HAL_RCC_OscConfig+0x2c0>)
 8000698:	4a83      	ldr	r2, [pc, #524]	; (80008a8 <HAL_RCC_OscConfig+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	fba2 2303 	umull	r2, r3, r2, r3
 80006a0:	0a5b      	lsrs	r3, r3, #9
 80006a2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80006a4:	bf00      	nop
  }
  while (Delay --);
 80006a6:	9b01      	ldr	r3, [sp, #4]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	9201      	str	r2, [sp, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f9      	bne.n	80006a4 <HAL_RCC_OscConfig+0xc0>
 80006b0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006b2:	075d      	lsls	r5, r3, #29
 80006b4:	d569      	bpl.n	800078a <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006b6:	4b79      	ldr	r3, [pc, #484]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 80006b8:	69da      	ldr	r2, [r3, #28]
 80006ba:	00d0      	lsls	r0, r2, #3
 80006bc:	f100 80ec 	bmi.w	8000898 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80006c0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006c8:	61da      	str	r2, [r3, #28]
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d4:	4b75      	ldr	r3, [pc, #468]	; (80008ac <HAL_RCC_OscConfig+0x2c8>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	05d1      	lsls	r1, r2, #23
 80006da:	f140 80a3 	bpl.w	8000824 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006de:	68e3      	ldr	r3, [r4, #12]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d037      	beq.n	8000754 <HAL_RCC_OscConfig+0x170>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	f000 80e7 	beq.w	80008b8 <HAL_RCC_OscConfig+0x2d4>
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	4b6b      	ldr	r3, [pc, #428]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	f000 811f 	beq.w	8000932 <HAL_RCC_OscConfig+0x34e>
 80006f4:	f022 0201 	bic.w	r2, r2, #1
 80006f8:	621a      	str	r2, [r3, #32]
 80006fa:	6a1a      	ldr	r2, [r3, #32]
 80006fc:	f022 0204 	bic.w	r2, r2, #4
 8000700:	621a      	str	r2, [r3, #32]
 8000702:	e02c      	b.n	800075e <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000704:	4a65      	ldr	r2, [pc, #404]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 8000706:	6851      	ldr	r1, [r2, #4]
 8000708:	f011 0f0c 	tst.w	r1, #12
 800070c:	d061      	beq.n	80007d2 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800070e:	6851      	ldr	r1, [r2, #4]
 8000710:	f001 010c 	and.w	r1, r1, #12
 8000714:	2908      	cmp	r1, #8
 8000716:	d059      	beq.n	80007cc <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000718:	6923      	ldr	r3, [r4, #16]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 80eb 	beq.w	80008f6 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8000720:	2201      	movs	r2, #1
 8000722:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000724:	4d5d      	ldr	r5, [pc, #372]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8000726:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000728:	f7ff fdbe 	bl	80002a8 <HAL_GetTick>
 800072c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800072e:	e005      	b.n	800073c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000730:	f7ff fdba 	bl	80002a8 <HAL_GetTick>
 8000734:	1b80      	subs	r0, r0, r6
 8000736:	2802      	cmp	r0, #2
 8000738:	f200 8085 	bhi.w	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800073c:	682b      	ldr	r3, [r5, #0]
 800073e:	0798      	lsls	r0, r3, #30
 8000740:	d5f6      	bpl.n	8000730 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000742:	682b      	ldr	r3, [r5, #0]
 8000744:	6962      	ldr	r2, [r4, #20]
 8000746:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800074a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800074e:	602b      	str	r3, [r5, #0]
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	e789      	b.n	8000668 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000754:	4a51      	ldr	r2, [pc, #324]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 8000756:	6a13      	ldr	r3, [r2, #32]
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800075e:	f7ff fda3 	bl	80002a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000762:	4e4e      	ldr	r6, [pc, #312]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8000764:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000766:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800076a:	e005      	b.n	8000778 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800076c:	f7ff fd9c 	bl	80002a8 <HAL_GetTick>
 8000770:	eba0 0008 	sub.w	r0, r0, r8
 8000774:	42b8      	cmp	r0, r7
 8000776:	d866      	bhi.n	8000846 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000778:	6a33      	ldr	r3, [r6, #32]
 800077a:	079b      	lsls	r3, r3, #30
 800077c:	d5f6      	bpl.n	800076c <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 800077e:	b125      	cbz	r5, 800078a <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000780:	4a46      	ldr	r2, [pc, #280]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 8000782:	69d3      	ldr	r3, [r2, #28]
 8000784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800078a:	69e0      	ldr	r0, [r4, #28]
 800078c:	b1d0      	cbz	r0, 80007c4 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800078e:	4d43      	ldr	r5, [pc, #268]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 8000790:	686a      	ldr	r2, [r5, #4]
 8000792:	f002 020c 	and.w	r2, r2, #12
 8000796:	2a08      	cmp	r2, #8
 8000798:	f000 80d3 	beq.w	8000942 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800079c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800079e:	f04f 0100 	mov.w	r1, #0
 80007a2:	4a44      	ldr	r2, [pc, #272]	; (80008b4 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007a4:	f000 80de 	beq.w	8000964 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80007a8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80007aa:	f7ff fd7d 	bl	80002a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ae:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80007b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007b2:	e004      	b.n	80007be <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007b4:	f7ff fd78 	bl	80002a8 <HAL_GetTick>
 80007b8:	1b40      	subs	r0, r0, r5
 80007ba:	2802      	cmp	r0, #2
 80007bc:	d843      	bhi.n	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	d4f7      	bmi.n	80007b4 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80007c4:	2000      	movs	r0, #0
}
 80007c6:	b002      	add	sp, #8
 80007c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007cc:	6852      	ldr	r2, [r2, #4]
 80007ce:	03d6      	lsls	r6, r2, #15
 80007d0:	d4a2      	bmi.n	8000718 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007d2:	4a32      	ldr	r2, [pc, #200]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	0795      	lsls	r5, r2, #30
 80007d8:	d539      	bpl.n	800084e <HAL_RCC_OscConfig+0x26a>
 80007da:	6922      	ldr	r2, [r4, #16]
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d036      	beq.n	800084e <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
}
 80007e2:	b002      	add	sp, #8
 80007e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80007e8:	4a2d      	ldr	r2, [pc, #180]	; (80008a0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ea:	4d2c      	ldr	r5, [pc, #176]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 80007ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007ee:	f7ff fd5b 	bl	80002a8 <HAL_GetTick>
 80007f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007f4:	e004      	b.n	8000800 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007f6:	f7ff fd57 	bl	80002a8 <HAL_GetTick>
 80007fa:	1b80      	subs	r0, r0, r6
 80007fc:	2802      	cmp	r0, #2
 80007fe:	d822      	bhi.n	8000846 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000800:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000802:	079f      	lsls	r7, r3, #30
 8000804:	d4f7      	bmi.n	80007f6 <HAL_RCC_OscConfig+0x212>
 8000806:	e753      	b.n	80006b0 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000808:	684a      	ldr	r2, [r1, #4]
 800080a:	03d0      	lsls	r0, r2, #15
 800080c:	f57f af01 	bpl.w	8000612 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000810:	4a22      	ldr	r2, [pc, #136]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	0391      	lsls	r1, r2, #14
 8000816:	f57f af25 	bpl.w	8000664 <HAL_RCC_OscConfig+0x80>
 800081a:	6862      	ldr	r2, [r4, #4]
 800081c:	2a00      	cmp	r2, #0
 800081e:	f47f af21 	bne.w	8000664 <HAL_RCC_OscConfig+0x80>
 8000822:	e7dd      	b.n	80007e0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000824:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000826:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800082c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800082e:	f7ff fd3b 	bl	80002a8 <HAL_GetTick>
 8000832:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000834:	6833      	ldr	r3, [r6, #0]
 8000836:	05da      	lsls	r2, r3, #23
 8000838:	f53f af51 	bmi.w	80006de <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800083c:	f7ff fd34 	bl	80002a8 <HAL_GetTick>
 8000840:	1bc0      	subs	r0, r0, r7
 8000842:	2864      	cmp	r0, #100	; 0x64
 8000844:	d9f6      	bls.n	8000834 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8000846:	2003      	movs	r0, #3
}
 8000848:	b002      	add	sp, #8
 800084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800084e:	4913      	ldr	r1, [pc, #76]	; (800089c <HAL_RCC_OscConfig+0x2b8>)
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	680a      	ldr	r2, [r1, #0]
 8000854:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000858:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800085c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800085e:	e703      	b.n	8000668 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000864:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000868:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000878:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800087a:	f7ff fd15 	bl	80002a8 <HAL_GetTick>
 800087e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000880:	e004      	b.n	800088c <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000882:	f7ff fd11 	bl	80002a8 <HAL_GetTick>
 8000886:	1b80      	subs	r0, r0, r6
 8000888:	2864      	cmp	r0, #100	; 0x64
 800088a:	d8dc      	bhi.n	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	039b      	lsls	r3, r3, #14
 8000890:	d4f7      	bmi.n	8000882 <HAL_RCC_OscConfig+0x29e>
 8000892:	e6e6      	b.n	8000662 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8000894:	2001      	movs	r0, #1
}
 8000896:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8000898:	2500      	movs	r5, #0
 800089a:	e71b      	b.n	80006d4 <HAL_RCC_OscConfig+0xf0>
 800089c:	40021000 	.word	0x40021000
 80008a0:	42420480 	.word	0x42420480
 80008a4:	20000008 	.word	0x20000008
 80008a8:	10624dd3 	.word	0x10624dd3
 80008ac:	40007000 	.word	0x40007000
 80008b0:	42420000 	.word	0x42420000
 80008b4:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008c0:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c2:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c4:	f022 0201 	bic.w	r2, r2, #1
 80008c8:	621a      	str	r2, [r3, #32]
 80008ca:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d0:	f022 0204 	bic.w	r2, r2, #4
 80008d4:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80008d6:	f7ff fce7 	bl	80002a8 <HAL_GetTick>
 80008da:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008dc:	e004      	b.n	80008e8 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008de:	f7ff fce3 	bl	80002a8 <HAL_GetTick>
 80008e2:	1bc0      	subs	r0, r0, r7
 80008e4:	4540      	cmp	r0, r8
 80008e6:	d8ae      	bhi.n	8000846 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008e8:	6a33      	ldr	r3, [r6, #32]
 80008ea:	0798      	lsls	r0, r3, #30
 80008ec:	d4f7      	bmi.n	80008de <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	f43f af4b 	beq.w	800078a <HAL_RCC_OscConfig+0x1a6>
 80008f4:	e744      	b.n	8000780 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 80008f6:	4a34      	ldr	r2, [pc, #208]	; (80009c8 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f8:	4d34      	ldr	r5, [pc, #208]	; (80009cc <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 80008fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008fc:	f7ff fcd4 	bl	80002a8 <HAL_GetTick>
 8000900:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000902:	e004      	b.n	800090e <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000904:	f7ff fcd0 	bl	80002a8 <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d89b      	bhi.n	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800090e:	682b      	ldr	r3, [r5, #0]
 8000910:	0799      	lsls	r1, r3, #30
 8000912:	d4f7      	bmi.n	8000904 <HAL_RCC_OscConfig+0x320>
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	e6a7      	b.n	8000668 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800091c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	e689      	b.n	8000646 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000932:	f042 0204 	orr.w	r2, r2, #4
 8000936:	621a      	str	r2, [r3, #32]
 8000938:	6a1a      	ldr	r2, [r3, #32]
 800093a:	f042 0201 	orr.w	r2, r2, #1
 800093e:	621a      	str	r2, [r3, #32]
 8000940:	e70d      	b.n	800075e <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000942:	2801      	cmp	r0, #1
 8000944:	f43f af4d 	beq.w	80007e2 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8000948:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800094a:	6a22      	ldr	r2, [r4, #32]
 800094c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000950:	4291      	cmp	r1, r2
 8000952:	f47f af45 	bne.w	80007e0 <HAL_RCC_OscConfig+0x1fc>
 8000956:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000958:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	bf18      	it	ne
 8000960:	2001      	movne	r0, #1
 8000962:	e73e      	b.n	80007e2 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8000964:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000966:	f7ff fc9f 	bl	80002a8 <HAL_GetTick>
 800096a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800096c:	e005      	b.n	800097a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800096e:	f7ff fc9b 	bl	80002a8 <HAL_GetTick>
 8000972:	1b80      	subs	r0, r0, r6
 8000974:	2802      	cmp	r0, #2
 8000976:	f63f af66 	bhi.w	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	0199      	lsls	r1, r3, #6
 800097e:	d4f6      	bmi.n	800096e <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000980:	6a22      	ldr	r2, [r4, #32]
 8000982:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000986:	d105      	bne.n	8000994 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000988:	686b      	ldr	r3, [r5, #4]
 800098a:	68a1      	ldr	r1, [r4, #8]
 800098c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000990:	430b      	orrs	r3, r1
 8000992:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000994:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_RCC_OscConfig+0x3e8>)
 8000998:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800099a:	6859      	ldr	r1, [r3, #4]
 800099c:	4302      	orrs	r2, r0
 800099e:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009a4:	430a      	orrs	r2, r1
 80009a6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80009a8:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009aa:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80009ac:	f7ff fc7c 	bl	80002a8 <HAL_GetTick>
 80009b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009b2:	e005      	b.n	80009c0 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009b4:	f7ff fc78 	bl	80002a8 <HAL_GetTick>
 80009b8:	1b40      	subs	r0, r0, r5
 80009ba:	2802      	cmp	r0, #2
 80009bc:	f63f af43 	bhi.w	8000846 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	019a      	lsls	r2, r3, #6
 80009c4:	d5f6      	bpl.n	80009b4 <HAL_RCC_OscConfig+0x3d0>
 80009c6:	e6fd      	b.n	80007c4 <HAL_RCC_OscConfig+0x1e0>
 80009c8:	42420000 	.word	0x42420000
 80009cc:	40021000 	.word	0x40021000
 80009d0:	42420060 	.word	0x42420060

080009d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80009d4:	b178      	cbz	r0, 80009f6 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80009d6:	4a5d      	ldr	r2, [pc, #372]	; (8000b4c <HAL_RCC_ClockConfig+0x178>)
 80009d8:	6813      	ldr	r3, [r2, #0]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	428b      	cmp	r3, r1
 80009e0:	d20b      	bcs.n	80009fa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e2:	6813      	ldr	r3, [r2, #0]
 80009e4:	f023 0307 	bic.w	r3, r3, #7
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80009ec:	6813      	ldr	r3, [r2, #0]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d001      	beq.n	80009fa <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80009f6:	2001      	movs	r0, #1
}
 80009f8:	4770      	bx	lr
{
 80009fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009fe:	6803      	ldr	r3, [r0, #0]
{
 8000a00:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a02:	079d      	lsls	r5, r3, #30
 8000a04:	d514      	bpl.n	8000a30 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a06:	075c      	lsls	r4, r3, #29
 8000a08:	d504      	bpl.n	8000a14 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a0a:	4c51      	ldr	r4, [pc, #324]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000a0c:	6862      	ldr	r2, [r4, #4]
 8000a0e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000a12:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a14:	071a      	lsls	r2, r3, #28
 8000a16:	d504      	bpl.n	8000a22 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a18:	4c4d      	ldr	r4, [pc, #308]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000a1a:	6862      	ldr	r2, [r4, #4]
 8000a1c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000a20:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a22:	4c4b      	ldr	r4, [pc, #300]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000a24:	6885      	ldr	r5, [r0, #8]
 8000a26:	6862      	ldr	r2, [r4, #4]
 8000a28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a2c:	432a      	orrs	r2, r5
 8000a2e:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a30:	07db      	lsls	r3, r3, #31
 8000a32:	4604      	mov	r4, r0
 8000a34:	460d      	mov	r5, r1
 8000a36:	d520      	bpl.n	8000a7a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a38:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a3a:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a3e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a40:	d06f      	beq.n	8000b22 <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a42:	2a02      	cmp	r2, #2
 8000a44:	d07e      	beq.n	8000b44 <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a46:	0798      	lsls	r0, r3, #30
 8000a48:	d527      	bpl.n	8000a9a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a4a:	4e41      	ldr	r6, [pc, #260]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a4c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a50:	6873      	ldr	r3, [r6, #4]
 8000a52:	f023 0303 	bic.w	r3, r3, #3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a5a:	f7ff fc25 	bl	80002a8 <HAL_GetTick>
 8000a5e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a60:	e004      	b.n	8000a6c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a62:	f7ff fc21 	bl	80002a8 <HAL_GetTick>
 8000a66:	1bc0      	subs	r0, r0, r7
 8000a68:	4540      	cmp	r0, r8
 8000a6a:	d869      	bhi.n	8000b40 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a6c:	6873      	ldr	r3, [r6, #4]
 8000a6e:	6862      	ldr	r2, [r4, #4]
 8000a70:	f003 030c 	and.w	r3, r3, #12
 8000a74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a78:	d1f3      	bne.n	8000a62 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000a7a:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <HAL_RCC_ClockConfig+0x178>)
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	42ab      	cmp	r3, r5
 8000a84:	d90d      	bls.n	8000aa2 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	432b      	orrs	r3, r5
 8000a8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	d003      	beq.n	8000aa2 <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
}
 8000a9c:	b006      	add	sp, #24
 8000a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	0759      	lsls	r1, r3, #29
 8000aa6:	d506      	bpl.n	8000ab6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000aa8:	4929      	ldr	r1, [pc, #164]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000aaa:	68e0      	ldr	r0, [r4, #12]
 8000aac:	684a      	ldr	r2, [r1, #4]
 8000aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ab6:	071a      	lsls	r2, r3, #28
 8000ab8:	d507      	bpl.n	8000aca <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000aba:	4a25      	ldr	r2, [pc, #148]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000abc:	6921      	ldr	r1, [r4, #16]
 8000abe:	6853      	ldr	r3, [r2, #4]
 8000ac0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ac4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ac8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aca:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_RCC_ClockConfig+0x180>)
 8000ad0:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ad2:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000adc:	491c      	ldr	r1, [pc, #112]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000ade:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ae0:	f002 030c 	and.w	r3, r2, #12
 8000ae4:	2b08      	cmp	r3, #8
 8000ae6:	d11a      	bne.n	8000b1e <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ae8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8000aec:	4423      	add	r3, r4
 8000aee:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000af2:	03d3      	lsls	r3, r2, #15
 8000af4:	d418      	bmi.n	8000b28 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_RCC_ClockConfig+0x184>)
 8000af8:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_RCC_ClockConfig+0x17c>)
 8000afe:	4817      	ldr	r0, [pc, #92]	; (8000b5c <HAL_RCC_ClockConfig+0x188>)
 8000b00:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8000b02:	4917      	ldr	r1, [pc, #92]	; (8000b60 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b04:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000b08:	5c80      	ldrb	r0, [r0, r2]
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <HAL_RCC_ClockConfig+0x190>)
 8000b0c:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8000b0e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b10:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8000b12:	f7ff fb87 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000b16:	2000      	movs	r0, #0
}
 8000b18:	b006      	add	sp, #24
 8000b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_RCC_ClockConfig+0x194>)
 8000b20:	e7ec      	b.n	8000afc <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b22:	039f      	lsls	r7, r3, #14
 8000b24:	d491      	bmi.n	8000a4a <HAL_RCC_ClockConfig+0x76>
 8000b26:	e7b8      	b.n	8000a9a <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b28:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b2c:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b30:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b34:	4422      	add	r2, r4
 8000b36:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b3e:	e7dd      	b.n	8000afc <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8000b40:	2003      	movs	r0, #3
 8000b42:	e7ab      	b.n	8000a9c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b44:	019e      	lsls	r6, r3, #6
 8000b46:	d480      	bmi.n	8000a4a <HAL_RCC_ClockConfig+0x76>
 8000b48:	e7a7      	b.n	8000a9a <HAL_RCC_ClockConfig+0xc6>
 8000b4a:	bf00      	nop
 8000b4c:	40022000 	.word	0x40022000
 8000b50:	40021000 	.word	0x40021000
 8000b54:	0800575c 	.word	0x0800575c
 8000b58:	003d0900 	.word	0x003d0900
 8000b5c:	0800580c 	.word	0x0800580c
 8000b60:	20000004 	.word	0x20000004
 8000b64:	20000008 	.word	0x20000008
 8000b68:	007a1200 	.word	0x007a1200

08000b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b70:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000b72:	6800      	ldr	r0, [r0, #0]
{
 8000b74:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000b76:	07c5      	lsls	r5, r0, #31
 8000b78:	d52a      	bpl.n	8000bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000b7c:	69da      	ldr	r2, [r3, #28]
 8000b7e:	00d1      	lsls	r1, r2, #3
 8000b80:	d53d      	bpl.n	8000bfe <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b82:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8000b84:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	05d2      	lsls	r2, r2, #23
 8000b8a:	d546      	bpl.n	8000c1a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000b8c:	4935      	ldr	r1, [pc, #212]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000b8e:	6860      	ldr	r0, [r4, #4]
 8000b90:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b92:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8000b96:	d00f      	beq.n	8000bb8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8000b98:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00b      	beq.n	8000bb8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ba0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ba2:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ba4:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ba6:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ba8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8000bac:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000bae:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000bb0:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000bb2:	07d8      	lsls	r0, r3, #31
 8000bb4:	d445      	bmi.n	8000c42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8000bb6:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bb8:	4a2a      	ldr	r2, [pc, #168]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000bba:	6a13      	ldr	r3, [r2, #32]
 8000bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bc0:	4303      	orrs	r3, r0
 8000bc2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bc4:	b11d      	cbz	r5, 8000bce <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bc6:	69d3      	ldr	r3, [r2, #28]
 8000bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000bd0:	0783      	lsls	r3, r0, #30
 8000bd2:	d506      	bpl.n	8000be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000bd4:	4a23      	ldr	r2, [pc, #140]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000bd6:	68a1      	ldr	r1, [r4, #8]
 8000bd8:	6853      	ldr	r3, [r2, #4]
 8000bda:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bde:	430b      	orrs	r3, r1
 8000be0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000be2:	f010 0010 	ands.w	r0, r0, #16
 8000be6:	d007      	beq.n	8000bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000be8:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8000bec:	6961      	ldr	r1, [r4, #20]
 8000bee:	6853      	ldr	r3, [r2, #4]
 8000bf0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6053      	str	r3, [r2, #4]
}
 8000bf8:	b002      	add	sp, #8
 8000bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000c00:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	05d2      	lsls	r2, r2, #23
 8000c18:	d4b8      	bmi.n	8000b8c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c1a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1c:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c22:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c24:	f7ff fb40 	bl	80002a8 <HAL_GetTick>
 8000c28:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c2a:	6833      	ldr	r3, [r6, #0]
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	d4ad      	bmi.n	8000b8c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c30:	f7ff fb3a 	bl	80002a8 <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	2864      	cmp	r0, #100	; 0x64
 8000c38:	d9f7      	bls.n	8000c2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8000c3a:	2003      	movs	r0, #3
}
 8000c3c:	b002      	add	sp, #8
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c42:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8000c44:	f7ff fb30 	bl	80002a8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c48:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c4c:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4e:	6a33      	ldr	r3, [r6, #32]
 8000c50:	079a      	lsls	r2, r3, #30
 8000c52:	d4b0      	bmi.n	8000bb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c54:	f7ff fb28 	bl	80002a8 <HAL_GetTick>
 8000c58:	eba0 0008 	sub.w	r0, r0, r8
 8000c5c:	42b8      	cmp	r0, r7
 8000c5e:	d9f6      	bls.n	8000c4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8000c60:	e7eb      	b.n	8000c3a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40007000 	.word	0x40007000
 8000c6c:	42420440 	.word	0x42420440

08000c70 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d03b      	beq.n	8000cec <HAL_SPI_Init+0x7c>
{
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c76:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c78:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8000c7c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c7e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c80:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8000c84:	b361      	cbz	r1, 8000ce0 <HAL_SPI_Init+0x70>
 8000c86:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c88:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c8c:	2702      	movs	r7, #2
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000c8e:	2100      	movs	r1, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000c90:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c92:	68e0      	ldr	r0, [r4, #12]
 8000c94:	4333      	orrs	r3, r6
 8000c96:	6926      	ldr	r6, [r4, #16]
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	6960      	ldr	r0, [r4, #20]
 8000c9c:	4333      	orrs	r3, r6
 8000c9e:	69e6      	ldr	r6, [r4, #28]
 8000ca0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8000ca4:	4303      	orrs	r3, r0
 8000ca6:	6a20      	ldr	r0, [r4, #32]
 8000ca8:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 8000caa:	6826      	ldr	r6, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cac:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000cb0:	4303      	orrs	r3, r0
 8000cb2:	f40c 7000 	and.w	r0, ip, #512	; 0x200
 8000cb6:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8000cb8:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000cba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000cbe:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8000cc0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000cc4:	f00c 0204 	and.w	r2, ip, #4
  __HAL_SPI_DISABLE(hspi);
 8000cc8:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000cca:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000ccc:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cce:	69f3      	ldr	r3, [r6, #28]

  return HAL_OK;
 8000cd0:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cd6:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cd8:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000cda:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8000ce0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000ce4:	f004 f836 	bl	8004d54 <HAL_SPI_MspInit>
 8000ce8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cea:	e7cd      	b.n	8000c88 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8000cec:	2001      	movs	r0, #1
}
 8000cee:	4770      	bx	lr

08000cf0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000cf4:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8000cf8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8000cfa:	2c01      	cmp	r4, #1
 8000cfc:	d05e      	beq.n	8000dbc <HAL_SPI_Transmit+0xcc>
 8000cfe:	461f      	mov	r7, r3
 8000d00:	2301      	movs	r3, #1
 8000d02:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8000d06:	4604      	mov	r4, r0
 8000d08:	4616      	mov	r6, r2
 8000d0a:	460d      	mov	r5, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000d0c:	f7ff facc 	bl	80002a8 <HAL_GetTick>
 8000d10:	4680      	mov	r8, r0
  initial_TxXferCount = Size;

  if (hspi->State != HAL_SPI_STATE_READY)
 8000d12:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000d16:	b2c0      	uxtb	r0, r0
 8000d18:	2801      	cmp	r0, #1
 8000d1a:	d009      	beq.n	8000d30 <HAL_SPI_Transmit+0x40>
  {
    errorcode = HAL_BUSY;
 8000d1c:	2002      	movs	r0, #2
  {
    errorcode = HAL_ERROR;
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8000d1e:	2201      	movs	r2, #1
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000d20:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8000d22:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000d26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 8000d2a:	b002      	add	sp, #8
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d0f4      	beq.n	8000d1e <HAL_SPI_Transmit+0x2e>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d0f2      	beq.n	8000d1e <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d38:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d3a:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d3c:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d3e:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d42:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d46:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000d48:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000d4a:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000d4c:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d4e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000d50:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8000d52:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 8000d56:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000d58:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d5a:	d103      	bne.n	8000d64 <HAL_SPI_Transmit+0x74>
    SPI_1LINE_TX(hspi);
 8000d5c:	6803      	ldr	r3, [r0, #0]
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d64:	6803      	ldr	r3, [r0, #0]
 8000d66:	065b      	lsls	r3, r3, #25
 8000d68:	d52c      	bpl.n	8000dc4 <HAL_SPI_Transmit+0xd4>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000d6a:	68e3      	ldr	r3, [r4, #12]
 8000d6c:	6862      	ldr	r2, [r4, #4]
 8000d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d72:	d045      	beq.n	8000e00 <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d16e      	bne.n	8000e56 <HAL_SPI_Transmit+0x166>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d78:	782b      	ldrb	r3, [r5, #0]
 8000d7a:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8000d7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d80:	3b01      	subs	r3, #1
 8000d82:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d84:	3201      	adds	r2, #1
 8000d86:	6820      	ldr	r0, [r4, #0]
      hspi->TxXferCount--;
 8000d88:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d8a:	6322      	str	r2, [r4, #48]	; 0x30
 8000d8c:	1c7e      	adds	r6, r7, #1
 8000d8e:	d00b      	beq.n	8000da8 <HAL_SPI_Transmit+0xb8>
 8000d90:	e028      	b.n	8000de4 <HAL_SPI_Transmit+0xf4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	7303      	strb	r3, [r0, #12]
        hspi->TxXferCount--;
 8000d98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000da0:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8000da2:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000da4:	6322      	str	r2, [r4, #48]	; 0x30
 8000da6:	6820      	ldr	r0, [r4, #0]
    while (hspi->TxXferCount > 0U)
 8000da8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d040      	beq.n	8000e32 <HAL_SPI_Transmit+0x142>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000db0:	6883      	ldr	r3, [r0, #8]
 8000db2:	079d      	lsls	r5, r3, #30
 8000db4:	d4ed      	bmi.n	8000d92 <HAL_SPI_Transmit+0xa2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000db6:	f7ff fa77 	bl	80002a8 <HAL_GetTick>
 8000dba:	e7f4      	b.n	8000da6 <HAL_SPI_Transmit+0xb6>
  __HAL_LOCK(hspi);
 8000dbc:	2002      	movs	r0, #2
}
 8000dbe:	b002      	add	sp, #8
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8000dc4:	6803      	ldr	r3, [r0, #0]
 8000dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dca:	6003      	str	r3, [r0, #0]
 8000dcc:	e7cd      	b.n	8000d6a <HAL_SPI_Transmit+0x7a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000dce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	7303      	strb	r3, [r0, #12]
        hspi->TxXferCount--;
 8000dd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000dd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000ddc:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8000dde:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000de0:	6322      	str	r2, [r4, #48]	; 0x30
 8000de2:	6820      	ldr	r0, [r4, #0]
    while (hspi->TxXferCount > 0U)
 8000de4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	b31b      	cbz	r3, 8000e32 <HAL_SPI_Transmit+0x142>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000dea:	6883      	ldr	r3, [r0, #8]
 8000dec:	079b      	lsls	r3, r3, #30
 8000dee:	d4ee      	bmi.n	8000dce <HAL_SPI_Transmit+0xde>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000df0:	f7ff fa5a 	bl	80002a8 <HAL_GetTick>
 8000df4:	eba0 0008 	sub.w	r0, r0, r8
 8000df8:	42b8      	cmp	r0, r7
 8000dfa:	d3f2      	bcc.n	8000de2 <HAL_SPI_Transmit+0xf2>
          errorcode = HAL_TIMEOUT;
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	e78e      	b.n	8000d1e <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d076      	beq.n	8000ef2 <HAL_SPI_Transmit+0x202>
 8000e04:	2e01      	cmp	r6, #1
 8000e06:	d074      	beq.n	8000ef2 <HAL_SPI_Transmit+0x202>
 8000e08:	1c79      	adds	r1, r7, #1
 8000e0a:	d159      	bne.n	8000ec0 <HAL_SPI_Transmit+0x1d0>
    while (hspi->TxXferCount > 0U)
 8000e0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b17b      	cbz	r3, 8000e32 <HAL_SPI_Transmit+0x142>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e12:	6883      	ldr	r3, [r0, #8]
 8000e14:	079a      	lsls	r2, r3, #30
 8000e16:	d568      	bpl.n	8000eea <HAL_SPI_Transmit+0x1fa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e1a:	f832 3b02 	ldrh.w	r3, [r2], #2
 8000e1e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8000e20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e22:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000e2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1ef      	bne.n	8000e12 <HAL_SPI_Transmit+0x122>
 8000e32:	1c79      	adds	r1, r7, #1
 8000e34:	d112      	bne.n	8000e5c <HAL_SPI_Transmit+0x16c>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e36:	6883      	ldr	r3, [r0, #8]
 8000e38:	061a      	lsls	r2, r3, #24
 8000e3a:	d4fc      	bmi.n	8000e36 <HAL_SPI_Transmit+0x146>
 8000e3c:	68a3      	ldr	r3, [r4, #8]
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e3e:	b92b      	cbnz	r3, 8000e4c <HAL_SPI_Transmit+0x15c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	68c3      	ldr	r3, [r0, #12]
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	6883      	ldr	r3, [r0, #8]
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000e4e:	3000      	adds	r0, #0
 8000e50:	bf18      	it	ne
 8000e52:	2001      	movne	r0, #1
error:
 8000e54:	e763      	b.n	8000d1e <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e56:	2e01      	cmp	r6, #1
 8000e58:	d198      	bne.n	8000d8c <HAL_SPI_Transmit+0x9c>
 8000e5a:	e78d      	b.n	8000d78 <HAL_SPI_Transmit+0x88>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e5c:	6883      	ldr	r3, [r0, #8]
 8000e5e:	061b      	lsls	r3, r3, #24
 8000e60:	d5ec      	bpl.n	8000e3c <HAL_SPI_Transmit+0x14c>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e62:	f7ff fa21 	bl	80002a8 <HAL_GetTick>
 8000e66:	eba0 0008 	sub.w	r0, r0, r8
 8000e6a:	4287      	cmp	r7, r0
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e6c:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e6e:	d8e0      	bhi.n	8000e32 <HAL_SPI_Transmit+0x142>

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e70:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e72:	6842      	ldr	r2, [r0, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e74:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e7c:	68a3      	ldr	r3, [r4, #8]
 8000e7e:	6042      	str	r2, [r0, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e80:	d040      	beq.n	8000f04 <HAL_SPI_Transmit+0x214>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e88:	d107      	bne.n	8000e9a <HAL_SPI_Transmit+0x1aa>
        {
          SPI_RESET_CRC(hspi);
 8000e8a:	6802      	ldr	r2, [r0, #0]
 8000e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e90:	6002      	str	r2, [r0, #0]
 8000e92:	6802      	ldr	r2, [r0, #0]
 8000e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e98:	6002      	str	r2, [r0, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000e9a:	2201      	movs	r2, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e9c:	2120      	movs	r1, #32

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000e9e:	2500      	movs	r5, #0
        hspi->State = HAL_SPI_STATE_READY;
 8000ea0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ea4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hspi);
 8000ea6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	6562      	str	r2, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000eae:	6561      	str	r1, [r4, #84]	; 0x54
 8000eb0:	e7c5      	b.n	8000e3e <HAL_SPI_Transmit+0x14e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000eb2:	f7ff f9f9 	bl	80002a8 <HAL_GetTick>
 8000eb6:	eba0 0008 	sub.w	r0, r0, r8
 8000eba:	42b8      	cmp	r0, r7
 8000ebc:	d29e      	bcs.n	8000dfc <HAL_SPI_Transmit+0x10c>
 8000ebe:	6820      	ldr	r0, [r4, #0]
    while (hspi->TxXferCount > 0U)
 8000ec0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0b4      	beq.n	8000e32 <HAL_SPI_Transmit+0x142>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ec8:	6883      	ldr	r3, [r0, #8]
 8000eca:	079d      	lsls	r5, r3, #30
 8000ecc:	d5f1      	bpl.n	8000eb2 <HAL_SPI_Transmit+0x1c2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ece:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ed0:	f832 3b02 	ldrh.w	r3, [r2], #2
 8000ed4:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8000ed6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000ed8:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000ee0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1ef      	bne.n	8000ec8 <HAL_SPI_Transmit+0x1d8>
 8000ee8:	e7a3      	b.n	8000e32 <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000eea:	f7ff f9dd 	bl	80002a8 <HAL_GetTick>
 8000eee:	6820      	ldr	r0, [r4, #0]
 8000ef0:	e78c      	b.n	8000e0c <HAL_SPI_Transmit+0x11c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ef2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000ef6:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8000ef8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000efa:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000f02:	e781      	b.n	8000e08 <HAL_SPI_Transmit+0x118>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f08:	d002      	beq.n	8000f10 <HAL_SPI_Transmit+0x220>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0e:	d1b8      	bne.n	8000e82 <HAL_SPI_Transmit+0x192>
          __HAL_SPI_DISABLE(hspi);
 8000f10:	6802      	ldr	r2, [r0, #0]
 8000f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f16:	6002      	str	r2, [r0, #0]
 8000f18:	e7b3      	b.n	8000e82 <HAL_SPI_Transmit+0x192>
 8000f1a:	bf00      	nop

08000f1c <HAL_SPI_Receive>:
{
 8000f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f20:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f22:	6840      	ldr	r0, [r0, #4]
{
 8000f24:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f26:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
{
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	460f      	mov	r7, r1
 8000f2e:	4690      	mov	r8, r2
 8000f30:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f34:	d018      	beq.n	8000f68 <HAL_SPI_Receive+0x4c>
  __HAL_LOCK(hspi);
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	f000 80a5 	beq.w	8001086 <HAL_SPI_Receive+0x16a>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f42:	f7ff f9b1 	bl	80002a8 <HAL_GetTick>
 8000f46:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000f48:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000f4c:	b2c0      	uxtb	r0, r0
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	f000 809d 	beq.w	800108e <HAL_SPI_Receive+0x172>
    errorcode = HAL_BUSY;
 8000f54:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000f56:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8000f58:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8000f5a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f5e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000f62:	b002      	add	sp, #8
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000f68:	68a2      	ldr	r2, [r4, #8]
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d1e3      	bne.n	8000f36 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000f6e:	2204      	movs	r2, #4
  __HAL_LOCK(hspi);
 8000f70:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000f72:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 8000f76:	f000 8086 	beq.w	8001086 <HAL_SPI_Receive+0x16a>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f80:	f7ff f992 	bl	80002a8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000f88:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8000f8a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f8c:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8000f8e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f90:	d007      	beq.n	8000fa2 <HAL_SPI_Receive+0x86>
 8000f92:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000f96:	d1dd      	bne.n	8000f54 <HAL_SPI_Receive+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f98:	68a1      	ldr	r1, [r4, #8]
 8000f9a:	2900      	cmp	r1, #0
 8000f9c:	d1da      	bne.n	8000f54 <HAL_SPI_Receive+0x38>
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d1d8      	bne.n	8000f54 <HAL_SPI_Receive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	f000 8136 	beq.w	8001214 <HAL_SPI_Receive+0x2f8>
 8000fa8:	f1b8 0f00 	cmp.w	r8, #0
 8000fac:	f000 8132 	beq.w	8001214 <HAL_SPI_Receive+0x2f8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fb0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fb4:	2100      	movs	r1, #0
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fb6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fb8:	bf1c      	itt	ne
 8000fba:	2305      	movne	r3, #5
 8000fbc:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fc0:	6823      	ldr	r3, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fc2:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8000fc4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000fc8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fcc:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000fce:	63a7      	str	r7, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fd0:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 8000fd2:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fd6:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000fd8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8000fdc:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fe0:	d403      	bmi.n	8000fea <HAL_SPI_Receive+0xce>
    __HAL_SPI_ENABLE(hspi);
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000fe8:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fea:	68e1      	ldr	r1, [r4, #12]
 8000fec:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000ff0:	f000 813e 	beq.w	8001270 <HAL_SPI_Receive+0x354>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000ff4:	2a00      	cmp	r2, #0
 8000ff6:	f000 8125 	beq.w	8001244 <HAL_SPI_Receive+0x328>
 8000ffa:	f1b8 0f01 	cmp.w	r8, #1
 8000ffe:	f000 8121 	beq.w	8001244 <HAL_SPI_Receive+0x328>
 8001002:	1c6f      	adds	r7, r5, #1
 8001004:	f040 8176 	bne.w	80012f4 <HAL_SPI_Receive+0x3d8>
        txallowed = 1U;
 8001008:	2501      	movs	r5, #1
 800100a:	e026      	b.n	800105a <HAL_SPI_Receive+0x13e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	0796      	lsls	r6, r2, #30
 8001010:	d50f      	bpl.n	8001032 <HAL_SPI_Receive+0x116>
 8001012:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001014:	b292      	uxth	r2, r2
 8001016:	b162      	cbz	r2, 8001032 <HAL_SPI_Receive+0x116>
 8001018:	b15d      	cbz	r5, 8001032 <HAL_SPI_Receive+0x116>
        txallowed = 0U;
 800101a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800101c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001022:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001024:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001026:	3a01      	subs	r2, #1
        hspi->pTxBuffPtr++;
 8001028:	1c59      	adds	r1, r3, #1
        hspi->TxXferCount--;
 800102a:	b292      	uxth	r2, r2
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001030:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	07d0      	lsls	r0, r2, #31
 8001036:	d50d      	bpl.n	8001054 <HAL_SPI_Receive+0x138>
 8001038:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800103a:	b292      	uxth	r2, r2
 800103c:	b152      	cbz	r2, 8001054 <HAL_SPI_Receive+0x138>
        txallowed = 1U;
 800103e:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001044:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001046:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001048:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800104a:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr++;
 800104c:	442a      	add	r2, r5
        hspi->RxXferCount--;
 800104e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8001050:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001052:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001054:	f7ff f928 	bl	80002a8 <HAL_GetTick>
 8001058:	6823      	ldr	r3, [r4, #0]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800105a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800105c:	b292      	uxth	r2, r2
 800105e:	2a00      	cmp	r2, #0
 8001060:	d1d4      	bne.n	800100c <HAL_SPI_Receive+0xf0>
 8001062:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001064:	b292      	uxth	r2, r2
 8001066:	2a00      	cmp	r2, #0
 8001068:	d1d0      	bne.n	800100c <HAL_SPI_Receive+0xf0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	0612      	lsls	r2, r2, #24
 800106e:	d4fc      	bmi.n	800106a <HAL_SPI_Receive+0x14e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001070:	68a0      	ldr	r0, [r4, #8]
 8001072:	2800      	cmp	r0, #0
 8001074:	f040 813c 	bne.w	80012f0 <HAL_SPI_Receive+0x3d4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001078:	9001      	str	r0, [sp, #4]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	9201      	str	r2, [sp, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	9b01      	ldr	r3, [sp, #4]
 8001084:	e767      	b.n	8000f56 <HAL_SPI_Receive+0x3a>
  __HAL_LOCK(hspi);
 8001086:	2002      	movs	r0, #2
}
 8001088:	b002      	add	sp, #8
 800108a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800108e:	2f00      	cmp	r7, #0
 8001090:	f43f af61 	beq.w	8000f56 <HAL_SPI_Receive+0x3a>
 8001094:	f1b8 0f00 	cmp.w	r8, #0
 8001098:	f43f af5d 	beq.w	8000f56 <HAL_SPI_Receive+0x3a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800109c:	2204      	movs	r2, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800109e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80010a0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010a4:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80010a6:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010a8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80010ac:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80010ae:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 80010b0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80010b4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80010b8:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = 0U;
 80010ba:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferSize  = Size;
 80010bc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
 80010c0:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010c2:	d076      	beq.n	80011b2 <HAL_SPI_Receive+0x296>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	0650      	lsls	r0, r2, #25
 80010c8:	d403      	bmi.n	80010d2 <HAL_SPI_Receive+0x1b6>
    __HAL_SPI_ENABLE(hspi);
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80010d2:	68e2      	ldr	r2, [r4, #12]
 80010d4:	b9b2      	cbnz	r2, 8001104 <HAL_SPI_Receive+0x1e8>
 80010d6:	1c6f      	adds	r7, r5, #1
 80010d8:	d00b      	beq.n	80010f2 <HAL_SPI_Receive+0x1d6>
 80010da:	e05c      	b.n	8001196 <HAL_SPI_Receive+0x27a>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80010dc:	7b1a      	ldrb	r2, [r3, #12]
 80010de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010e0:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80010e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80010e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80010ea:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80010ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80010ee:	63a2      	str	r2, [r4, #56]	; 0x38
 80010f0:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 80010f2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010f4:	b292      	uxth	r2, r2
 80010f6:	b1d2      	cbz	r2, 800112e <HAL_SPI_Receive+0x212>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	07d0      	lsls	r0, r2, #31
 80010fc:	d4ee      	bmi.n	80010dc <HAL_SPI_Receive+0x1c0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80010fe:	f7ff f8d3 	bl	80002a8 <HAL_GetTick>
 8001102:	e7f5      	b.n	80010f0 <HAL_SPI_Receive+0x1d4>
 8001104:	1c69      	adds	r1, r5, #1
 8001106:	d126      	bne.n	8001156 <HAL_SPI_Receive+0x23a>
    while (hspi->RxXferCount > 0U)
 8001108:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800110a:	b292      	uxth	r2, r2
 800110c:	b17a      	cbz	r2, 800112e <HAL_SPI_Receive+0x212>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	07d2      	lsls	r2, r2, #31
 8001112:	d553      	bpl.n	80011bc <HAL_SPI_Receive+0x2a0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001118:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800111c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800111e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001120:	3a01      	subs	r2, #1
 8001122:	b292      	uxth	r2, r2
 8001124:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001126:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001128:	b292      	uxth	r2, r2
 800112a:	2a00      	cmp	r2, #0
 800112c:	d1ef      	bne.n	800110e <HAL_SPI_Receive+0x1f2>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800112e:	6862      	ldr	r2, [r4, #4]
 8001130:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001134:	d070      	beq.n	8001218 <HAL_SPI_Receive+0x2fc>
 8001136:	1c69      	adds	r1, r5, #1
 8001138:	d144      	bne.n	80011c4 <HAL_SPI_Receive+0x2a8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	0612      	lsls	r2, r2, #24
 800113e:	d4fc      	bmi.n	800113a <HAL_SPI_Receive+0x21e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001140:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001142:	3000      	adds	r0, #0
 8001144:	bf18      	it	ne
 8001146:	2001      	movne	r0, #1
error :
 8001148:	e705      	b.n	8000f56 <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800114a:	f7ff f8ad 	bl	80002a8 <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	42a8      	cmp	r0, r5
 8001152:	d22c      	bcs.n	80011ae <HAL_SPI_Receive+0x292>
 8001154:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8001156:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001158:	b292      	uxth	r2, r2
 800115a:	2a00      	cmp	r2, #0
 800115c:	d0e7      	beq.n	800112e <HAL_SPI_Receive+0x212>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	07d2      	lsls	r2, r2, #31
 8001162:	d5f2      	bpl.n	800114a <HAL_SPI_Receive+0x22e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001168:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800116c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800116e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001170:	3a01      	subs	r2, #1
 8001172:	b292      	uxth	r2, r2
 8001174:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001176:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001178:	b292      	uxth	r2, r2
 800117a:	2a00      	cmp	r2, #0
 800117c:	d1ef      	bne.n	800115e <HAL_SPI_Receive+0x242>
 800117e:	e7d6      	b.n	800112e <HAL_SPI_Receive+0x212>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001180:	7b1a      	ldrb	r2, [r3, #12]
 8001182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001184:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001186:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001188:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800118a:	3b01      	subs	r3, #1
 800118c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800118e:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8001190:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001192:	63a2      	str	r2, [r4, #56]	; 0x38
 8001194:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8001196:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001198:	b292      	uxth	r2, r2
 800119a:	2a00      	cmp	r2, #0
 800119c:	d0c7      	beq.n	800112e <HAL_SPI_Receive+0x212>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	07d1      	lsls	r1, r2, #31
 80011a2:	d4ed      	bmi.n	8001180 <HAL_SPI_Receive+0x264>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80011a4:	f7ff f880 	bl	80002a8 <HAL_GetTick>
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	42a8      	cmp	r0, r5
 80011ac:	d3f2      	bcc.n	8001194 <HAL_SPI_Receive+0x278>
          errorcode = HAL_TIMEOUT;
 80011ae:	2003      	movs	r0, #3
 80011b0:	e6d1      	b.n	8000f56 <HAL_SPI_Receive+0x3a>
    SPI_1LINE_RX(hspi);
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e783      	b.n	80010c4 <HAL_SPI_Receive+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80011bc:	f7ff f874 	bl	80002a8 <HAL_GetTick>
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	e7a1      	b.n	8001108 <HAL_SPI_Receive+0x1ec>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	061b      	lsls	r3, r3, #24
 80011c8:	d5ba      	bpl.n	8001140 <HAL_SPI_Receive+0x224>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80011ca:	f7ff f86d 	bl	80002a8 <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	4285      	cmp	r5, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011d2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80011d4:	d8af      	bhi.n	8001136 <HAL_SPI_Receive+0x21a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011d6:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011d8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011da:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80011e2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011e4:	f000 80ca 	beq.w	800137c <HAL_SPI_Receive+0x460>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80011ee:	d107      	bne.n	8001200 <HAL_SPI_Receive+0x2e4>
          SPI_RESET_CRC(hspi);
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011fe:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001200:	2301      	movs	r3, #1
 8001202:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001206:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800120e:	2320      	movs	r3, #32
 8001210:	6563      	str	r3, [r4, #84]	; 0x54
 8001212:	e795      	b.n	8001140 <HAL_SPI_Receive+0x224>
    errorcode = HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	e69e      	b.n	8000f56 <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001218:	68a2      	ldr	r2, [r4, #8]
 800121a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800121e:	d00c      	beq.n	800123a <HAL_SPI_Receive+0x31e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001220:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001224:	d187      	bne.n	8001136 <HAL_SPI_Receive+0x21a>
    __HAL_SPI_DISABLE(hspi);
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	1c6f      	adds	r7, r5, #1
 8001230:	d113      	bne.n	800125a <HAL_SPI_Receive+0x33e>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	07d5      	lsls	r5, r2, #31
 8001236:	d4fc      	bmi.n	8001232 <HAL_SPI_Receive+0x316>
 8001238:	e782      	b.n	8001140 <HAL_SPI_Receive+0x224>
    __HAL_SPI_DISABLE(hspi);
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e778      	b.n	8001136 <HAL_SPI_Receive+0x21a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001244:	783a      	ldrb	r2, [r7, #0]
 8001246:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001248:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800124a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800124c:	3b01      	subs	r3, #1
 800124e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001250:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001252:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001254:	6322      	str	r2, [r4, #48]	; 0x30
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	e6d3      	b.n	8001002 <HAL_SPI_Receive+0xe6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	07d8      	lsls	r0, r3, #31
 800125e:	f57f af6f 	bpl.w	8001140 <HAL_SPI_Receive+0x224>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001262:	f7ff f821 	bl	80002a8 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	4285      	cmp	r5, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800126a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800126c:	d8df      	bhi.n	800122e <HAL_SPI_Receive+0x312>
 800126e:	e7b2      	b.n	80011d6 <HAL_SPI_Receive+0x2ba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001270:	2a00      	cmp	r2, #0
 8001272:	d034      	beq.n	80012de <HAL_SPI_Receive+0x3c2>
 8001274:	f1b8 0f01 	cmp.w	r8, #1
 8001278:	d031      	beq.n	80012de <HAL_SPI_Receive+0x3c2>
 800127a:	1c6f      	adds	r7, r5, #1
 800127c:	f040 808b 	bne.w	8001396 <HAL_SPI_Receive+0x47a>
        txallowed = 1U;
 8001280:	2501      	movs	r5, #1
 8001282:	e023      	b.n	80012cc <HAL_SPI_Receive+0x3b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	0796      	lsls	r6, r2, #30
 8001288:	d50d      	bpl.n	80012a6 <HAL_SPI_Receive+0x38a>
 800128a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800128c:	b292      	uxth	r2, r2
 800128e:	b152      	cbz	r2, 80012a6 <HAL_SPI_Receive+0x38a>
 8001290:	b14d      	cbz	r5, 80012a6 <HAL_SPI_Receive+0x38a>
        txallowed = 0U;
 8001292:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001294:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001296:	f831 2b02 	ldrh.w	r2, [r1], #2
 800129a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800129c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800129e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80012a0:	3a01      	subs	r2, #1
 80012a2:	b292      	uxth	r2, r2
 80012a4:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	07d0      	lsls	r0, r2, #31
 80012aa:	d50c      	bpl.n	80012c6 <HAL_SPI_Receive+0x3aa>
 80012ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80012ae:	b292      	uxth	r2, r2
 80012b0:	b14a      	cbz	r2, 80012c6 <HAL_SPI_Receive+0x3aa>
        txallowed = 1U;
 80012b2:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012b8:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80012bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80012be:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80012c6:	f7fe ffef 	bl	80002a8 <HAL_GetTick>
 80012ca:	6823      	ldr	r3, [r4, #0]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80012cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80012ce:	b292      	uxth	r2, r2
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d1d7      	bne.n	8001284 <HAL_SPI_Receive+0x368>
 80012d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80012d6:	b292      	uxth	r2, r2
 80012d8:	2a00      	cmp	r2, #0
 80012da:	d1d3      	bne.n	8001284 <HAL_SPI_Receive+0x368>
 80012dc:	e6c5      	b.n	800106a <HAL_SPI_Receive+0x14e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80012de:	f837 2b02 	ldrh.w	r2, [r7], #2
 80012e2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80012e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80012e6:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80012e8:	3a01      	subs	r2, #1
 80012ea:	b292      	uxth	r2, r2
 80012ec:	86e2      	strh	r2, [r4, #54]	; 0x36
 80012ee:	e7c4      	b.n	800127a <HAL_SPI_Receive+0x35e>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80012f0:	2000      	movs	r0, #0
 80012f2:	e630      	b.n	8000f56 <HAL_SPI_Receive+0x3a>
        txallowed = 1U;
 80012f4:	2701      	movs	r7, #1
 80012f6:	e02a      	b.n	800134e <HAL_SPI_Receive+0x432>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	0791      	lsls	r1, r2, #30
 80012fc:	d50f      	bpl.n	800131e <HAL_SPI_Receive+0x402>
 80012fe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001300:	b292      	uxth	r2, r2
 8001302:	b162      	cbz	r2, 800131e <HAL_SPI_Receive+0x402>
 8001304:	b15f      	cbz	r7, 800131e <HAL_SPI_Receive+0x402>
        txallowed = 0U;
 8001306:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001308:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800130e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001310:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001312:	3b01      	subs	r3, #1
 8001314:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8001316:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8001318:	86e3      	strh	r3, [r4, #54]	; 0x36
 800131a:	6823      	ldr	r3, [r4, #0]
        hspi->pTxBuffPtr++;
 800131c:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	07d2      	lsls	r2, r2, #31
 8001322:	d50d      	bpl.n	8001340 <HAL_SPI_Receive+0x424>
 8001324:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001326:	b292      	uxth	r2, r2
 8001328:	b152      	cbz	r2, 8001340 <HAL_SPI_Receive+0x424>
        txallowed = 1U;
 800132a:	2701      	movs	r7, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001330:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001332:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001334:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001336:	3b01      	subs	r3, #1
 8001338:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800133a:	443a      	add	r2, r7
        hspi->RxXferCount--;
 800133c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800133e:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001340:	f7fe ffb2 	bl	80002a8 <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	4285      	cmp	r5, r0
 8001348:	f67f af31 	bls.w	80011ae <HAL_SPI_Receive+0x292>
 800134c:	6823      	ldr	r3, [r4, #0]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800134e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001350:	b292      	uxth	r2, r2
 8001352:	2a00      	cmp	r2, #0
 8001354:	d1d0      	bne.n	80012f8 <HAL_SPI_Receive+0x3dc>
 8001356:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001358:	b292      	uxth	r2, r2
 800135a:	2a00      	cmp	r2, #0
 800135c:	d1cc      	bne.n	80012f8 <HAL_SPI_Receive+0x3dc>
 800135e:	e009      	b.n	8001374 <HAL_SPI_Receive+0x458>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	0617      	lsls	r7, r2, #24
 8001364:	f57f ae84 	bpl.w	8001070 <HAL_SPI_Receive+0x154>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001368:	f7fe ff9e 	bl	80002a8 <HAL_GetTick>
 800136c:	1b80      	subs	r0, r0, r6
 800136e:	4285      	cmp	r5, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001370:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001372:	d941      	bls.n	80013f8 <HAL_SPI_Receive+0x4dc>
 8001374:	1c69      	adds	r1, r5, #1
 8001376:	f43f ae78 	beq.w	800106a <HAL_SPI_Receive+0x14e>
 800137a:	e7f1      	b.n	8001360 <HAL_SPI_Receive+0x444>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800137c:	68a2      	ldr	r2, [r4, #8]
 800137e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001382:	d003      	beq.n	800138c <HAL_SPI_Receive+0x470>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001384:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001388:	f47f af2e 	bne.w	80011e8 <HAL_SPI_Receive+0x2cc>
          __HAL_SPI_DISABLE(hspi);
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e728      	b.n	80011e8 <HAL_SPI_Receive+0x2cc>
        txallowed = 1U;
 8001396:	2701      	movs	r7, #1
 8001398:	e000      	b.n	800139c <HAL_SPI_Receive+0x480>
 800139a:	6823      	ldr	r3, [r4, #0]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800139c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800139e:	b292      	uxth	r2, r2
 80013a0:	b91a      	cbnz	r2, 80013aa <HAL_SPI_Receive+0x48e>
 80013a2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80013a4:	b292      	uxth	r2, r2
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d0e4      	beq.n	8001374 <HAL_SPI_Receive+0x458>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	0791      	lsls	r1, r2, #30
 80013ae:	d50d      	bpl.n	80013cc <HAL_SPI_Receive+0x4b0>
 80013b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013b2:	b292      	uxth	r2, r2
 80013b4:	b152      	cbz	r2, 80013cc <HAL_SPI_Receive+0x4b0>
 80013b6:	b14f      	cbz	r7, 80013cc <HAL_SPI_Receive+0x4b0>
        txallowed = 0U;
 80013b8:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013bc:	f831 2b02 	ldrh.w	r2, [r1], #2
 80013c0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80013c2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013c4:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80013c6:	3a01      	subs	r2, #1
 80013c8:	b292      	uxth	r2, r2
 80013ca:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	07d2      	lsls	r2, r2, #31
 80013d0:	d50c      	bpl.n	80013ec <HAL_SPI_Receive+0x4d0>
 80013d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80013d4:	b292      	uxth	r2, r2
 80013d6:	b14a      	cbz	r2, 80013ec <HAL_SPI_Receive+0x4d0>
        txallowed = 1U;
 80013d8:	2701      	movs	r7, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013de:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80013e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80013e4:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80013ec:	f7fe ff5c 	bl	80002a8 <HAL_GetTick>
 80013f0:	1b80      	subs	r0, r0, r6
 80013f2:	4285      	cmp	r5, r0
 80013f4:	d8d1      	bhi.n	800139a <HAL_SPI_Receive+0x47e>
 80013f6:	e6da      	b.n	80011ae <HAL_SPI_Receive+0x292>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013f8:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013fa:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001404:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001406:	d014      	beq.n	8001432 <HAL_SPI_Receive+0x516>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001408:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800140a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800140e:	d107      	bne.n	8001420 <HAL_SPI_Receive+0x504>
          SPI_RESET_CRC(hspi);
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800141e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001420:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001422:	2220      	movs	r2, #32
        hspi->State = HAL_SPI_STATE_READY;
 8001424:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001428:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800142a:	4313      	orrs	r3, r2
 800142c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800142e:	6562      	str	r2, [r4, #84]	; 0x54
 8001430:	e591      	b.n	8000f56 <HAL_SPI_Receive+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001432:	68a2      	ldr	r2, [r4, #8]
 8001434:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001438:	d002      	beq.n	8001440 <HAL_SPI_Receive+0x524>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800143a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800143e:	d1e3      	bne.n	8001408 <HAL_SPI_Receive+0x4ec>
          __HAL_SPI_DISABLE(hspi);
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e7de      	b.n	8001408 <HAL_SPI_Receive+0x4ec>
 800144a:	bf00      	nop

0800144c <CalulateCRC.constprop.2>:
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800144c:	238a      	movs	r3, #138	; 0x8a
 * Function Name: CalulateCRC
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
 800144e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001452:	250a      	movs	r5, #10
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
 8001454:	b083      	sub	sp, #12
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001456:	ac02      	add	r4, sp, #8
 8001458:	f804 3d01 	strb.w	r3, [r4, #-1]!
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
 800145c:	4681      	mov	r9, r0
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	48ae      	ldr	r0, [pc, #696]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
 8001462:	4688      	mov	r8, r1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001468:	f7ff f8b8 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800146c:	4621      	mov	r1, r4
 800146e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001472:	2201      	movs	r2, #1
 8001474:	48aa      	ldr	r0, [pc, #680]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001476:	f7ff fc3b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800147a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800147e:	f10d 0106 	add.w	r1, sp, #6
 8001482:	2201      	movs	r2, #1
 8001484:	48a6      	ldr	r0, [pc, #664]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001486:	f7ff fd49 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	48a2      	ldr	r0, [pc, #648]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 8001492:	f7ff f8a3 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001496:	f89d 3006 	ldrb.w	r3, [sp, #6]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800149c:	f023 0304 	bic.w	r3, r3, #4
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80014a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a4:	489d      	ldr	r0, [pc, #628]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 80014a6:	f88d 3003 	strb.w	r3, [sp, #3]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80014aa:	f88d 5007 	strb.w	r5, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80014ae:	f7ff f895 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80014b2:	4621      	mov	r1, r4
 80014b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b8:	2201      	movs	r2, #1
 80014ba:	4899      	ldr	r0, [pc, #612]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80014bc:	f7ff fc18 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80014c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014c4:	2201      	movs	r2, #1
 80014c6:	f10d 0103 	add.w	r1, sp, #3
 80014ca:	4895      	ldr	r0, [pc, #596]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80014cc:	f7ff fc10 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d6:	4891      	ldr	r0, [pc, #580]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 80014d8:	f7ff f880 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80014dc:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80014de:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e6:	488d      	ldr	r0, [pc, #564]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80014e8:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80014ec:	f7ff f876 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80014f0:	4621      	mov	r1, r4
 80014f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014f6:	2201      	movs	r2, #1
 80014f8:	4889      	ldr	r0, [pc, #548]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80014fa:	f7ff fbf9 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80014fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001502:	f10d 0106 	add.w	r1, sp, #6
 8001506:	2201      	movs	r2, #1
 8001508:	4885      	ldr	r0, [pc, #532]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 800150a:	f7ff fd07 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001514:	4881      	ldr	r0, [pc, #516]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 8001516:	f7ff f861 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800151a:	f89d 3006 	ldrb.w	r3, [sp, #6]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001520:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001528:	487c      	ldr	r0, [pc, #496]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 800152a:	f88d 3002 	strb.w	r3, [sp, #2]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800152e:	f88d 5007 	strb.w	r5, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001532:	f7ff f853 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001536:	4621      	mov	r1, r4
 8001538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800153c:	2201      	movs	r2, #1
 800153e:	4878      	ldr	r0, [pc, #480]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001540:	f7ff fbd6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001544:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001548:	2201      	movs	r2, #1
 800154a:	f10d 0102 	add.w	r1, sp, #2
 800154e:	4874      	ldr	r0, [pc, #464]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001550:	f7ff fbce 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155a:	4870      	ldr	r0, [pc, #448]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 800155c:	f7ff f83e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001560:	4f6e      	ldr	r7, [pc, #440]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001562:	4e6f      	ldr	r6, [pc, #444]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001564:	f109 35ff 	add.w	r5, r9, #4294967295
 8001568:	f109 0901 	add.w	r9, r9, #1
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800156c:	f04f 0c12 	mov.w	ip, #18
 8001570:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800157a:	4638      	mov	r0, r7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800157c:	f88d c007 	strb.w	ip, [sp, #7]
 8001580:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001584:	f7ff f82a 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001588:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800158c:	2201      	movs	r2, #1
 800158e:	4621      	mov	r1, r4
 8001590:	4630      	mov	r0, r6
 8001592:	f7ff fbad 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001596:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159a:	2201      	movs	r2, #1
 800159c:	a901      	add	r1, sp, #4
 800159e:	4630      	mov	r0, r6
 80015a0:	f7ff fba6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015aa:	4638      	mov	r0, r7
 80015ac:	f7ff f816 	bl	80005dc <HAL_GPIO_WritePin>
  ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
  SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i=0; i<len; i++)
 80015b0:	454d      	cmp	r5, r9
 80015b2:	d1db      	bne.n	800156c <CalulateCRC.constprop.2+0x120>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80015b4:	2302      	movs	r3, #2
 80015b6:	2503      	movs	r5, #3
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80015b8:	278a      	movs	r7, #138	; 0x8a
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c0:	4856      	ldr	r0, [pc, #344]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 80015c2:	f88d 5005 	strb.w	r5, [sp, #5]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80015c6:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80015ca:	f7ff f807 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80015ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d2:	2201      	movs	r2, #1
 80015d4:	4621      	mov	r1, r4
 80015d6:	4852      	ldr	r0, [pc, #328]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80015d8:	f7ff fb8a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80015dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015e0:	2201      	movs	r2, #1
 80015e2:	f10d 0105 	add.w	r1, sp, #5
 80015e6:	484e      	ldr	r0, [pc, #312]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80015e8:	f7ff fb82 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f2:	484a      	ldr	r0, [pc, #296]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 80015f4:	f7fe fff2 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015fe:	4847      	ldr	r0, [pc, #284]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001600:	f88d 7007 	strb.w	r7, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001604:	f7fe ffea 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001608:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800160c:	2201      	movs	r2, #1
 800160e:	4621      	mov	r1, r4
 8001610:	4843      	ldr	r0, [pc, #268]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001612:	f7ff fb6d 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001616:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800161a:	2201      	movs	r2, #1
 800161c:	f10d 0106 	add.w	r1, sp, #6
 8001620:	483f      	ldr	r0, [pc, #252]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 8001622:	f7ff fc7b 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162c:	483b      	ldr	r0, [pc, #236]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 800162e:	f7fe ffd5 	bl	80005dc <HAL_GPIO_WritePin>
 8001632:	f04f 09fe 	mov.w	r9, #254	; 0xfe
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001636:	f89d 2006 	ldrb.w	r2, [sp, #6]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800163a:	4e38      	ldr	r6, [pc, #224]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800163c:	4d38      	ldr	r5, [pc, #224]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 800163e:	e022      	b.n	8001686 <CalulateCRC.constprop.2+0x23a>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001644:	4630      	mov	r0, r6
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001646:	f88d 7007 	strb.w	r7, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800164a:	f7fe ffc7 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800164e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001652:	2201      	movs	r2, #1
 8001654:	4621      	mov	r1, r4
 8001656:	4628      	mov	r0, r5
 8001658:	f7ff fb4a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800165c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001660:	2201      	movs	r2, #1
 8001662:	f10d 0106 	add.w	r1, sp, #6
 8001666:	4628      	mov	r0, r5
 8001668:	f7ff fc58 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001672:	4630      	mov	r0, r6
 8001674:	f7fe ffb2 	bl	80005dc <HAL_GPIO_WritePin>
 8001678:	f109 33ff 	add.w	r3, r9, #4294967295
  do
  {
    n = Read_MFRC522(DivIrqReg);
    i--;
  }
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800167c:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001680:	f89d 2006 	ldrb.w	r2, [sp, #6]
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001684:	d002      	beq.n	800168c <CalulateCRC.constprop.2+0x240>
 8001686:	f012 0204 	ands.w	r2, r2, #4
 800168a:	d0d9      	beq.n	8001640 <CalulateCRC.constprop.2+0x1f4>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800168c:	23c4      	movs	r3, #196	; 0xc4
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001694:	4821      	ldr	r0, [pc, #132]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001696:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800169a:	f7fe ff9f 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800169e:	4621      	mov	r1, r4
 80016a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a4:	2201      	movs	r2, #1
 80016a6:	481e      	ldr	r0, [pc, #120]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80016a8:	f7ff fb22 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80016ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016b0:	f10d 0106 	add.w	r1, sp, #6
 80016b4:	2201      	movs	r2, #1
 80016b6:	481a      	ldr	r0, [pc, #104]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80016b8:	f7ff fc30 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c2:	4816      	ldr	r0, [pc, #88]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 80016c4:	f7fe ff8a 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80016c8:	23c2      	movs	r3, #194	; 0xc2
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80016ca:	f89d 1006 	ldrb.w	r1, [sp, #6]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0

  //Read CRC calculation result
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 80016d0:	f888 1000 	strb.w	r1, [r8]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 80016d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80016da:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80016de:	f7fe ff7d 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80016e2:	4621      	mov	r1, r4
 80016e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e8:	2201      	movs	r2, #1
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80016ec:	f7ff fb00 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80016f0:	f10d 0106 	add.w	r1, sp, #6
 80016f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f8:	2201      	movs	r2, #1
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <CalulateCRC.constprop.2+0x2d4>)
 80016fc:	f7ff fc0e 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <CalulateCRC.constprop.2+0x2d0>)
 8001708:	f7fe ff68 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800170c:	f89d 3006 	ldrb.w	r3, [sp, #6]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 8001710:	f888 3001 	strb.w	r3, [r8, #1]
}
 8001714:	b003      	add	sp, #12
 8001716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800171a:	bf00      	nop
 800171c:	40011400 	.word	0x40011400
 8001720:	20000130 	.word	0x20000130

08001724 <MFRC522_ToCard.constprop.7>:
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
 8001724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001728:	2504      	movs	r5, #4
 800172a:	23f7      	movs	r3, #247	; 0xf7
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
 800172c:	b085      	sub	sp, #20
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800172e:	ac04      	add	r4, sp, #16
 8001730:	f804 5d01 	strb.w	r5, [r4, #-1]!
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
 8001734:	4680      	mov	r8, r0
 8001736:	4689      	mov	r9, r1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001738:	48bb      	ldr	r0, [pc, #748]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 800173a:	f44f 6100 	mov.w	r1, #2048	; 0x800
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
 800173e:	4692      	mov	sl, r2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f88d 3009 	strb.w	r3, [sp, #9]
 8001746:	f7fe ff49 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800174a:	4621      	mov	r1, r4
 800174c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001750:	2201      	movs	r2, #1
 8001752:	48b6      	ldr	r0, [pc, #728]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001754:	f7ff facc 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001758:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800175c:	2201      	movs	r2, #1
 800175e:	f10d 0109 	add.w	r1, sp, #9
 8001762:	48b2      	ldr	r0, [pc, #712]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001764:	f7ff fac4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800176e:	48ae      	ldr	r0, [pc, #696]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001770:	f7fe ff34 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001774:	2388      	movs	r3, #136	; 0x88
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001776:	2508      	movs	r5, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	48aa      	ldr	r0, [pc, #680]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001780:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001784:	f7fe ff2a 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001788:	4621      	mov	r1, r4
 800178a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800178e:	2201      	movs	r2, #1
 8001790:	48a6      	ldr	r0, [pc, #664]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001792:	f7ff faad 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001796:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179a:	f10d 010e 	add.w	r1, sp, #14
 800179e:	2201      	movs	r2, #1
 80017a0:	48a2      	ldr	r0, [pc, #648]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80017a2:	f7ff fbbb 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ac:	489e      	ldr	r0, [pc, #632]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 80017ae:	f7fe ff15 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80017b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80017b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80017bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c0:	4899      	ldr	r0, [pc, #612]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 80017c2:	f88d 3008 	strb.w	r3, [sp, #8]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80017c6:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80017ca:	f7fe ff07 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80017ce:	4621      	mov	r1, r4
 80017d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d4:	2201      	movs	r2, #1
 80017d6:	4895      	ldr	r0, [pc, #596]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80017d8:	f7ff fa8a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80017dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017e0:	eb0d 0105 	add.w	r1, sp, r5
 80017e4:	2201      	movs	r2, #1
 80017e6:	4891      	ldr	r0, [pc, #580]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80017e8:	f7ff fa82 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f2:	488d      	ldr	r0, [pc, #564]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 80017f4:	f7fe fef2 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80017f8:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80017fa:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001802:	4889      	ldr	r0, [pc, #548]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001804:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001808:	f7fe fee8 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800180c:	4621      	mov	r1, r4
 800180e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001812:	2201      	movs	r2, #1
 8001814:	4885      	ldr	r0, [pc, #532]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001816:	f7ff fa6b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800181a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800181e:	f10d 010e 	add.w	r1, sp, #14
 8001822:	2201      	movs	r2, #1
 8001824:	4881      	ldr	r0, [pc, #516]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001826:	f7ff fb79 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001830:	487d      	ldr	r0, [pc, #500]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001832:	f7fe fed3 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001836:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800183c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001844:	4878      	ldr	r0, [pc, #480]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001846:	f88d 3007 	strb.w	r3, [sp, #7]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800184a:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800184e:	f7fe fec5 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001852:	4621      	mov	r1, r4
 8001854:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001858:	2201      	movs	r2, #1
 800185a:	4874      	ldr	r0, [pc, #464]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 800185c:	f7ff fa48 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001860:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001864:	2201      	movs	r2, #1
 8001866:	f10d 0107 	add.w	r1, sp, #7
 800186a:	4870      	ldr	r0, [pc, #448]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 800186c:	f7ff fa40 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001876:	486c      	ldr	r0, [pc, #432]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001878:	f7fe feb0 	bl	80005dc <HAL_GPIO_WritePin>
 800187c:	2300      	movs	r3, #0
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800187e:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001880:	461a      	mov	r2, r3
 8001882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001886:	4868      	ldr	r0, [pc, #416]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001888:	f88d 3006 	strb.w	r3, [sp, #6]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800188c:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001890:	f7fe fea4 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001894:	4621      	mov	r1, r4
 8001896:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800189a:	2201      	movs	r2, #1
 800189c:	4863      	ldr	r0, [pc, #396]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 800189e:	f7ff fa27 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80018a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018a6:	2201      	movs	r2, #1
 80018a8:	f10d 0106 	add.w	r1, sp, #6
 80018ac:	485f      	ldr	r0, [pc, #380]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80018ae:	f7ff fa1f 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b8:	485b      	ldr	r0, [pc, #364]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 80018ba:	f7fe fe8f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80018be:	4f5a      	ldr	r7, [pc, #360]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80018c0:	4e5a      	ldr	r6, [pc, #360]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80018c2:	f108 35ff 	add.w	r5, r8, #4294967295
 80018c6:	f108 0803 	add.w	r8, r8, #3
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80018ca:	f04f 0c12 	mov.w	ip, #18
 80018ce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d8:	4638      	mov	r0, r7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80018da:	f88d c00f 	strb.w	ip, [sp, #15]
 80018de:	f88d 300a 	strb.w	r3, [sp, #10]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80018e2:	f7fe fe7b 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80018e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ea:	2201      	movs	r2, #1
 80018ec:	4621      	mov	r1, r4
 80018ee:	4630      	mov	r0, r6
 80018f0:	f7ff f9fe 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80018f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018f8:	2201      	movs	r2, #1
 80018fa:	f10d 010a 	add.w	r1, sp, #10
 80018fe:	4630      	mov	r0, r6
 8001900:	f7ff f9f6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190a:	4638      	mov	r0, r7
 800190c:	f7fe fe66 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<sendLen; i++)
 8001910:	45a8      	cmp	r8, r5
 8001912:	d1da      	bne.n	80018ca <MFRC522_ToCard.constprop.7+0x1a6>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001914:	2302      	movs	r3, #2
 8001916:	250c      	movs	r5, #12
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191e:	4842      	ldr	r0, [pc, #264]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001920:	f88d 500b 	strb.w	r5, [sp, #11]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001924:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001928:	f7fe fe58 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800192c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001930:	2201      	movs	r2, #1
 8001932:	4621      	mov	r1, r4
 8001934:	483d      	ldr	r0, [pc, #244]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001936:	f7ff f9db 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800193a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800193e:	2201      	movs	r2, #1
 8001940:	f10d 010b 	add.w	r1, sp, #11
 8001944:	4839      	ldr	r0, [pc, #228]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001946:	f7ff f9d3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001950:	4835      	ldr	r0, [pc, #212]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001952:	f7fe fe43 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001956:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001958:	251a      	movs	r5, #26
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800195a:	f04f 0b88 	mov.w	fp, #136	; 0x88
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001964:	4830      	ldr	r0, [pc, #192]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001966:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800196a:	f7fe fe37 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800196e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001972:	2201      	movs	r2, #1
 8001974:	4621      	mov	r1, r4
 8001976:	482d      	ldr	r0, [pc, #180]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001978:	f7ff f9ba 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800197c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001980:	2201      	movs	r2, #1
 8001982:	f10d 010e 	add.w	r1, sp, #14
 8001986:	4829      	ldr	r0, [pc, #164]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001988:	f7ff fac8 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001992:	4825      	ldr	r0, [pc, #148]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001994:	f7fe fe22 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001998:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80019a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019a6:	4820      	ldr	r0, [pc, #128]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 80019a8:	f88d 300c 	strb.w	r3, [sp, #12]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80019ac:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80019b0:	f7fe fe14 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80019b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019b8:	2201      	movs	r2, #1
 80019ba:	4621      	mov	r1, r4
 80019bc:	481b      	ldr	r0, [pc, #108]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80019be:	f7ff f997 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80019c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019c6:	2201      	movs	r2, #1
 80019c8:	a903      	add	r1, sp, #12
 80019ca:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80019cc:	f7ff f990 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d6:	4814      	ldr	r0, [pc, #80]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 80019d8:	f7fe fe00 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e2:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80019e4:	f88d b00f 	strb.w	fp, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80019e8:	f7fe fdf8 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80019ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019f0:	2201      	movs	r2, #1
 80019f2:	4621      	mov	r1, r4
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 80019f6:	f7ff f97b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80019fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019fe:	2201      	movs	r2, #1
 8001a00:	f10d 010e 	add.w	r1, sp, #14
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001a06:	f7ff fa89 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MFRC522_ToCard.constprop.7+0x304>)
 8001a12:	f7fe fde3 	bl	80005dc <HAL_GPIO_WritePin>
    i--;
 8001a16:	f240 76cf 	movw	r6, #1999	; 0x7cf
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001a1a:	f89d 500e 	ldrb.w	r5, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001a1e:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8001a28 <MFRC522_ToCard.constprop.7+0x304>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001a22:	4f02      	ldr	r7, [pc, #8]	; (8001a2c <MFRC522_ToCard.constprop.7+0x308>)
 8001a24:	e024      	b.n	8001a70 <MFRC522_ToCard.constprop.7+0x34c>
 8001a26:	bf00      	nop
 8001a28:	40011400 	.word	0x40011400
 8001a2c:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a34:	4640      	mov	r0, r8
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001a36:	f88d b00f 	strb.w	fp, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001a3a:	f7fe fdcf 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a42:	2201      	movs	r2, #1
 8001a44:	4621      	mov	r1, r4
 8001a46:	4638      	mov	r0, r7
 8001a48:	f7ff f952 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001a4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a50:	2201      	movs	r2, #1
 8001a52:	f10d 010e 	add.w	r1, sp, #14
 8001a56:	4638      	mov	r0, r7
 8001a58:	f7ff fa60 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a62:	4640      	mov	r0, r8
 8001a64:	f7fe fdba 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001a68:	3e01      	subs	r6, #1
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001a6a:	f89d 500e 	ldrb.w	r5, [sp, #14]
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001a6e:	d002      	beq.n	8001a76 <MFRC522_ToCard.constprop.7+0x352>
 8001a70:	f015 0231 	ands.w	r2, r5, #49	; 0x31
 8001a74:	d0dc      	beq.n	8001a30 <MFRC522_ToCard.constprop.7+0x30c>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001a76:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001a78:	271a      	movs	r7, #26
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a80:	4874      	ldr	r0, [pc, #464]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001a82:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001a86:	f7fe fda9 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001a8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4621      	mov	r1, r4
 8001a92:	4871      	ldr	r0, [pc, #452]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001a94:	f7ff f92c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001a98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f10d 010e 	add.w	r1, sp, #14
 8001aa2:	486d      	ldr	r0, [pc, #436]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001aa4:	f7ff fa3a 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aae:	4869      	ldr	r0, [pc, #420]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
 8001ab0:	f7fe fd94 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001ab4:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac2:	4864      	ldr	r0, [pc, #400]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
 8001ac4:	f88d 300d 	strb.w	r3, [sp, #13]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001ac8:	f88d 700f 	strb.w	r7, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001acc:	f7fe fd86 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001ad0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	485f      	ldr	r0, [pc, #380]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001ada:	f7ff f909 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f10d 010d 	add.w	r1, sp, #13
 8001ae4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ae8:	485b      	ldr	r0, [pc, #364]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001aea:	f7ff f901 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af4:	4857      	ldr	r0, [pc, #348]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
 8001af6:	f7fe fd71 	bl	80005dc <HAL_GPIO_WritePin>
  if (i != 0)
 8001afa:	2e00      	cmp	r6, #0
 8001afc:	f000 809f 	beq.w	8001c3e <MFRC522_ToCard.constprop.7+0x51a>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001b00:	238c      	movs	r3, #140	; 0x8c
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b08:	4852      	ldr	r0, [pc, #328]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001b0a:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001b0e:	f7fe fd65 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b16:	2201      	movs	r2, #1
 8001b18:	4621      	mov	r1, r4
 8001b1a:	484f      	ldr	r0, [pc, #316]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001b1c:	f7ff f8e8 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001b20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b24:	2201      	movs	r2, #1
 8001b26:	f10d 010e 	add.w	r1, sp, #14
 8001b2a:	484b      	ldr	r0, [pc, #300]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001b2c:	f7ff f9f6 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b36:	4847      	ldr	r0, [pc, #284]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
 8001b38:	f7fe fd50 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001b3c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8001b40:	f012 061b 	ands.w	r6, r2, #27
 8001b44:	d17b      	bne.n	8001c3e <MFRC522_ToCard.constprop.7+0x51a>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001b46:	2394      	movs	r3, #148	; 0x94
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001b48:	4632      	mov	r2, r6
 8001b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4e:	4841      	ldr	r0, [pc, #260]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001b50:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001b54:	f7fe fd42 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001b58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4621      	mov	r1, r4
 8001b60:	483d      	ldr	r0, [pc, #244]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001b62:	f7ff f8c5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001b66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f10d 010e 	add.w	r1, sp, #14
 8001b70:	4839      	ldr	r0, [pc, #228]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001b72:	f7ff f9d3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b7c:	4835      	ldr	r0, [pc, #212]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
 8001b7e:	f7fe fd2d 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001b82:	2398      	movs	r3, #152	; 0x98
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001b84:	4632      	mov	r2, r6
 8001b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b8a:	4832      	ldr	r0, [pc, #200]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001b8c:	f89d 600e 	ldrb.w	r6, [sp, #14]
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001b90:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001b94:	f7fe fd22 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001b98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	482d      	ldr	r0, [pc, #180]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001ba2:	f7ff f8a5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001ba6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001baa:	2201      	movs	r2, #1
 8001bac:	f10d 010e 	add.w	r1, sp, #14
 8001bb0:	4829      	ldr	r0, [pc, #164]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001bb2:	f7ff f9b3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bbc:	4825      	ldr	r0, [pc, #148]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
 8001bbe:	f7fe fd0d 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001bc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001bc6:	f005 0501 	and.w	r5, r5, #1
        if (lastBits)
 8001bca:	f013 0307 	ands.w	r3, r3, #7
          *backLen = (n-1)*8 + lastBits;
 8001bce:	bf1a      	itte	ne
 8001bd0:	f106 32ff 	addne.w	r2, r6, #4294967295
 8001bd4:	eb03 03c2 	addne.w	r3, r3, r2, lsl #3
          *backLen = n*8;
 8001bd8:	00f3      	lsleq	r3, r6, #3
 8001bda:	f8ca 3000 	str.w	r3, [sl]
        if (n == 0)
 8001bde:	bb9e      	cbnz	r6, 8001c48 <MFRC522_ToCard.constprop.7+0x524>
        for (i=0; i<n; i++)
 8001be0:	f04f 0801 	mov.w	r8, #1
 8001be4:	f109 39ff 	add.w	r9, r9, #4294967295
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001be8:	4f1a      	ldr	r7, [pc, #104]	; (8001c54 <MFRC522_ToCard.constprop.7+0x530>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001bea:	4e1b      	ldr	r6, [pc, #108]	; (8001c58 <MFRC522_ToCard.constprop.7+0x534>)
 8001bec:	44c8      	add	r8, r9
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001bee:	2392      	movs	r3, #146	; 0x92
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf6:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001bf8:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001bfc:	f7fe fcee 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001c00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c04:	2201      	movs	r2, #1
 8001c06:	4621      	mov	r1, r4
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f7ff f871 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c12:	2201      	movs	r2, #1
 8001c14:	f10d 010e 	add.w	r1, sp, #14
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f7ff f97f 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c24:	4638      	mov	r0, r7
 8001c26:	f7fe fcd9 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001c2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
          backData[i] = Read_MFRC522(FIFODataReg);
 8001c2e:	f809 3f01 	strb.w	r3, [r9, #1]!
        for (i=0; i<n; i++)
 8001c32:	45c1      	cmp	r9, r8
 8001c34:	d1db      	bne.n	8001bee <MFRC522_ToCard.constprop.7+0x4ca>
}
 8001c36:	4628      	mov	r0, r5
 8001c38:	b005      	add	sp, #20
 8001c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u_char status = MI_ERR;
 8001c3e:	2502      	movs	r5, #2
}
 8001c40:	4628      	mov	r0, r5
 8001c42:	b005      	add	sp, #20
 8001c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i=0; i<n; i++)
 8001c48:	2e10      	cmp	r6, #16
 8001c4a:	bf28      	it	cs
 8001c4c:	2610      	movcs	r6, #16
 8001c4e:	46b0      	mov	r8, r6
 8001c50:	e7c8      	b.n	8001be4 <MFRC522_ToCard.constprop.7+0x4c0>
 8001c52:	bf00      	nop
 8001c54:	40011400 	.word	0x40011400
 8001c58:	20000130 	.word	0x20000130

08001c5c <Read_MFRC522>:
u_char Read_MFRC522(u_char addr) {
 8001c5c:	b570      	push	{r4, r5, r6, lr}
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001c5e:	0040      	lsls	r0, r0, #1
u_char Read_MFRC522(u_char addr) {
 8001c60:	b082      	sub	sp, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001c62:	4d14      	ldr	r5, [pc, #80]	; (8001cb4 <Read_MFRC522+0x58>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001c64:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 8001c68:	ac02      	add	r4, sp, #8
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001c6a:	4e13      	ldr	r6, [pc, #76]	; (8001cb8 <Read_MFRC522+0x5c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001c6c:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001c70:	f804 0d01 	strb.w	r0, [r4, #-1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	4628      	mov	r0, r5
 8001c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c7c:	f7fe fcae 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001c80:	4621      	mov	r1, r4
 8001c82:	4630      	mov	r0, r6
 8001c84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f7ff f831 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001c8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c92:	f10d 0106 	add.w	r1, sp, #6
 8001c96:	4630      	mov	r0, r6
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f7ff f93f 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca6:	f7fe fc99 	bl	80005dc <HAL_GPIO_WritePin>
}
 8001caa:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40011400 	.word	0x40011400
 8001cb8:	20000130 	.word	0x20000130

08001cbc <MFRC522_Init>:
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	230f      	movs	r3, #15
{
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001cc2:	4c95      	ldr	r4, [pc, #596]	; (8001f18 <MFRC522_Init+0x25c>)
{
 8001cc4:	b085      	sub	sp, #20
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001cc6:	4d95      	ldr	r5, [pc, #596]	; (8001f1c <MFRC522_Init+0x260>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001cc8:	ae04      	add	r6, sp, #16
 8001cca:	f806 2d01 	strb.w	r2, [r6, #-1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001cce:	4620      	mov	r0, r4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd6:	f88d 300d 	strb.w	r3, [sp, #13]
 8001cda:	f7fe fc7f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001cde:	4631      	mov	r1, r6
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f7ff f802 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001cec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cf0:	f10d 010d 	add.w	r1, sp, #13
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f7fe fffa 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d04:	f7fe fc6a 	bl	80005dc <HAL_GPIO_WritePin>
 8001d08:	2780      	movs	r7, #128	; 0x80
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001d0a:	2354      	movs	r3, #84	; 0x54
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d14:	f88d 700c 	strb.w	r7, [sp, #12]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001d18:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001d1c:	f7fe fc5e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001d20:	4631      	mov	r1, r6
 8001d22:	4628      	mov	r0, r5
 8001d24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f7fe ffe1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001d2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d32:	a903      	add	r1, sp, #12
 8001d34:	4628      	mov	r0, r5
 8001d36:	2201      	movs	r2, #1
 8001d38:	f7fe ffda 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d44:	f7fe fc4a 	bl	80005dc <HAL_GPIO_WritePin>
 8001d48:	27a9      	movs	r7, #169	; 0xa9
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001d4a:	2356      	movs	r3, #86	; 0x56
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d54:	f88d 700b 	strb.w	r7, [sp, #11]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001d58:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001d5c:	f7fe fc3e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001d60:	4631      	mov	r1, r6
 8001d62:	4628      	mov	r0, r5
 8001d64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f7fe ffc1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001d6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d72:	f10d 010b 	add.w	r1, sp, #11
 8001d76:	4628      	mov	r0, r5
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f7fe ffb9 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001d7e:	4620      	mov	r0, r4
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d86:	f7fe fc29 	bl	80005dc <HAL_GPIO_WritePin>
 8001d8a:	2703      	movs	r7, #3
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001d8c:	235a      	movs	r3, #90	; 0x5a
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001d8e:	4620      	mov	r0, r4
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d96:	f88d 700a 	strb.w	r7, [sp, #10]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001d9a:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001d9e:	f7fe fc1d 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001da2:	4631      	mov	r1, r6
 8001da4:	4628      	mov	r0, r5
 8001da6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001daa:	2201      	movs	r2, #1
 8001dac:	f7fe ffa0 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001db0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001db4:	f10d 010a 	add.w	r1, sp, #10
 8001db8:	4628      	mov	r0, r5
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f7fe ff98 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc8:	f7fe fc08 	bl	80005dc <HAL_GPIO_WritePin>
 8001dcc:	27e8      	movs	r7, #232	; 0xe8
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001dce:	2358      	movs	r3, #88	; 0x58
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd8:	f88d 7009 	strb.w	r7, [sp, #9]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001ddc:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001de0:	f7fe fbfc 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001de4:	4631      	mov	r1, r6
 8001de6:	4628      	mov	r0, r5
 8001de8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dec:	2201      	movs	r2, #1
 8001dee:	f7fe ff7f 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001df2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001df6:	f10d 0109 	add.w	r1, sp, #9
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f7fe ff77 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001e02:	4620      	mov	r0, r4
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0a:	f7fe fbe7 	bl	80005dc <HAL_GPIO_WritePin>
 8001e0e:	2740      	movs	r7, #64	; 0x40
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001e10:	232a      	movs	r3, #42	; 0x2a
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001e12:	4620      	mov	r0, r4
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	f88d 7008 	strb.w	r7, [sp, #8]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001e1e:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001e22:	f7fe fbdb 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001e26:	4631      	mov	r1, r6
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f7fe ff5e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001e34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e38:	a902      	add	r1, sp, #8
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f7fe ff57 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001e42:	4620      	mov	r0, r4
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e4a:	f7fe fbc7 	bl	80005dc <HAL_GPIO_WritePin>
 8001e4e:	273d      	movs	r7, #61	; 0x3d
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001e50:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001e52:	4620      	mov	r0, r4
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e5a:	f88d 7007 	strb.w	r7, [sp, #7]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001e5e:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001e62:	f7fe fbbb 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001e66:	4631      	mov	r1, r6
 8001e68:	4628      	mov	r0, r5
 8001e6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f7fe ff3e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001e74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e78:	f10d 0107 	add.w	r1, sp, #7
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f7fe ff36 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001e84:	4620      	mov	r0, r4
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e8c:	f7fe fba6 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001e90:	23a8      	movs	r3, #168	; 0xa8
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001e92:	2728      	movs	r7, #40	; 0x28
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001e94:	4620      	mov	r0, r4
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001e9c:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ea0:	f7fe fb9c 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001ea4:	4631      	mov	r1, r6
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eac:	2201      	movs	r2, #1
 8001eae:	f7fe ff1f 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001eb2:	f10d 010e 	add.w	r1, sp, #14
 8001eb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eba:	4628      	mov	r0, r5
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f7ff f82d 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eca:	f7fe fb87 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001ece:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ed2:	4620      	mov	r0, r4
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001ed4:	f043 0303 	orr.w	r3, r3, #3
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ede:	f88d 300e 	strb.w	r3, [sp, #14]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001ee2:	f88d 700f 	strb.w	r7, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ee6:	f7fe fb79 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001eea:	4631      	mov	r1, r6
 8001eec:	4628      	mov	r0, r5
 8001eee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f7fe fefc 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001ef8:	f10d 010e 	add.w	r1, sp, #14
 8001efc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f00:	4628      	mov	r0, r5
 8001f02:	2201      	movs	r2, #1
 8001f04:	f7fe fef4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	f7fe fb64 	bl	80005dc <HAL_GPIO_WritePin>
}
 8001f14:	b005      	add	sp, #20
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	40011400 	.word	0x40011400
 8001f1c:	20000130 	.word	0x20000130

08001f20 <MFRC522_Request>:
{
 8001f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001f24:	261a      	movs	r6, #26
 8001f26:	2307      	movs	r3, #7
 8001f28:	24f7      	movs	r4, #247	; 0xf7
{
 8001f2a:	b084      	sub	sp, #16
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001f2c:	ad04      	add	r5, sp, #16
 8001f2e:	f805 6d01 	strb.w	r6, [r5, #-1]!
{
 8001f32:	4607      	mov	r7, r0
 8001f34:	468a      	mov	sl, r1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	48c4      	ldr	r0, [pc, #784]	; (8002250 <MFRC522_Request+0x330>)
 8001f3e:	f88d 3005 	strb.w	r3, [sp, #5]
 8001f42:	f7fe fb4b 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001f46:	4629      	mov	r1, r5
 8001f48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	48c1      	ldr	r0, [pc, #772]	; (8002254 <MFRC522_Request+0x334>)
 8001f50:	f7fe fece 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001f54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f10d 0105 	add.w	r1, sp, #5
 8001f5e:	48bd      	ldr	r0, [pc, #756]	; (8002254 <MFRC522_Request+0x334>)
 8001f60:	f7fe fec6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f6a:	48b9      	ldr	r0, [pc, #740]	; (8002250 <MFRC522_Request+0x330>)
 8001f6c:	f7fe fb36 	bl	80005dc <HAL_GPIO_WritePin>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001f70:	2304      	movs	r3, #4
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001f72:	f04f 0988 	mov.w	r9, #136	; 0x88
 8001f76:	f88d 4009 	strb.w	r4, [sp, #9]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001f7a:	2408      	movs	r4, #8
  TagType[0] = reqMode;
 8001f7c:	f88a 7000 	strb.w	r7, [sl]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f86:	48b2      	ldr	r0, [pc, #712]	; (8002250 <MFRC522_Request+0x330>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8001f88:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001f8c:	f7fe fb26 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001f90:	4629      	mov	r1, r5
 8001f92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f96:	2201      	movs	r2, #1
 8001f98:	48ae      	ldr	r0, [pc, #696]	; (8002254 <MFRC522_Request+0x334>)
 8001f9a:	f7fe fea9 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001f9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f10d 0109 	add.w	r1, sp, #9
 8001fa8:	48aa      	ldr	r0, [pc, #680]	; (8002254 <MFRC522_Request+0x334>)
 8001faa:	f7fe fea1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb4:	48a6      	ldr	r0, [pc, #664]	; (8002250 <MFRC522_Request+0x330>)
 8001fb6:	f7fe fb11 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	48a3      	ldr	r0, [pc, #652]	; (8002250 <MFRC522_Request+0x330>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001fc2:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001fc6:	f7fe fb09 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001fca:	4629      	mov	r1, r5
 8001fcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	48a0      	ldr	r0, [pc, #640]	; (8002254 <MFRC522_Request+0x334>)
 8001fd4:	f7fe fe8c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001fd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fdc:	f10d 010e 	add.w	r1, sp, #14
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	489c      	ldr	r0, [pc, #624]	; (8002254 <MFRC522_Request+0x334>)
 8001fe4:	f7fe ff9a 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fee:	4898      	ldr	r0, [pc, #608]	; (8002250 <MFRC522_Request+0x330>)
 8001ff0:	f7fe faf4 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001ff4:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002002:	4893      	ldr	r0, [pc, #588]	; (8002250 <MFRC522_Request+0x330>)
 8002004:	f88d 3008 	strb.w	r3, [sp, #8]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002008:	f88d 400f 	strb.w	r4, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800200c:	f7fe fae6 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002010:	4629      	mov	r1, r5
 8002012:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002016:	2201      	movs	r2, #1
 8002018:	488e      	ldr	r0, [pc, #568]	; (8002254 <MFRC522_Request+0x334>)
 800201a:	f7fe fe69 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800201e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002022:	eb0d 0104 	add.w	r1, sp, r4
 8002026:	2201      	movs	r2, #1
 8002028:	488a      	ldr	r0, [pc, #552]	; (8002254 <MFRC522_Request+0x334>)
 800202a:	f7fe fe61 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002034:	4886      	ldr	r0, [pc, #536]	; (8002250 <MFRC522_Request+0x330>)
 8002036:	f7fe fad1 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800203a:	2394      	movs	r3, #148	; 0x94
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002042:	4883      	ldr	r0, [pc, #524]	; (8002250 <MFRC522_Request+0x330>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002044:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002048:	f7fe fac8 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800204c:	4629      	mov	r1, r5
 800204e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002052:	2201      	movs	r2, #1
 8002054:	487f      	ldr	r0, [pc, #508]	; (8002254 <MFRC522_Request+0x334>)
 8002056:	f7fe fe4b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800205a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800205e:	f10d 010e 	add.w	r1, sp, #14
 8002062:	2201      	movs	r2, #1
 8002064:	487b      	ldr	r0, [pc, #492]	; (8002254 <MFRC522_Request+0x334>)
 8002066:	2400      	movs	r4, #0
 8002068:	f7fe ff58 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002072:	4877      	ldr	r0, [pc, #476]	; (8002250 <MFRC522_Request+0x330>)
 8002074:	f7fe fab2 	bl	80005dc <HAL_GPIO_WritePin>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002078:	f04f 0c14 	mov.w	ip, #20
 800207c:	2702      	movs	r7, #2
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800207e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002082:	4622      	mov	r2, r4
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002084:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4870      	ldr	r0, [pc, #448]	; (8002250 <MFRC522_Request+0x330>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800208e:	f88d c00f 	strb.w	ip, [sp, #15]
 8002092:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002096:	f7fe faa1 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800209a:	4629      	mov	r1, r5
 800209c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020a0:	2201      	movs	r2, #1
 80020a2:	486c      	ldr	r0, [pc, #432]	; (8002254 <MFRC522_Request+0x334>)
 80020a4:	f7fe fe24 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80020a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020ac:	2201      	movs	r2, #1
 80020ae:	f10d 0107 	add.w	r1, sp, #7
 80020b2:	4868      	ldr	r0, [pc, #416]	; (8002254 <MFRC522_Request+0x334>)
 80020b4:	f7fe fe1c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80020b8:	2201      	movs	r2, #1
 80020ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020be:	4864      	ldr	r0, [pc, #400]	; (8002250 <MFRC522_Request+0x330>)
 80020c0:	f7fe fa8c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80020c4:	4622      	mov	r2, r4
 80020c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ca:	4861      	ldr	r0, [pc, #388]	; (8002250 <MFRC522_Request+0x330>)
 80020cc:	f88d 4006 	strb.w	r4, [sp, #6]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80020d0:	f88d 700f 	strb.w	r7, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80020d4:	f7fe fa82 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80020d8:	4629      	mov	r1, r5
 80020da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020de:	2201      	movs	r2, #1
 80020e0:	485c      	ldr	r0, [pc, #368]	; (8002254 <MFRC522_Request+0x334>)
 80020e2:	f7fe fe05 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80020e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020ea:	2201      	movs	r2, #1
 80020ec:	f10d 0106 	add.w	r1, sp, #6
 80020f0:	4858      	ldr	r0, [pc, #352]	; (8002254 <MFRC522_Request+0x334>)
 80020f2:	f7fe fdfd 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fc:	4854      	ldr	r0, [pc, #336]	; (8002250 <MFRC522_Request+0x330>)
 80020fe:	f7fe fa6d 	bl	80005dc <HAL_GPIO_WritePin>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002102:	2312      	movs	r3, #18
 8002104:	f89a c000 	ldrb.w	ip, [sl]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002108:	4622      	mov	r2, r4
 800210a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800210e:	4850      	ldr	r0, [pc, #320]	; (8002250 <MFRC522_Request+0x330>)
 8002110:	f88d c00a 	strb.w	ip, [sp, #10]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002114:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002118:	f7fe fa60 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800211c:	4629      	mov	r1, r5
 800211e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002122:	2201      	movs	r2, #1
 8002124:	484b      	ldr	r0, [pc, #300]	; (8002254 <MFRC522_Request+0x334>)
 8002126:	f7fe fde3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800212a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800212e:	2201      	movs	r2, #1
 8002130:	f10d 010a 	add.w	r1, sp, #10
 8002134:	4847      	ldr	r0, [pc, #284]	; (8002254 <MFRC522_Request+0x334>)
 8002136:	f7fe fddb 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800213a:	2201      	movs	r2, #1
 800213c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002140:	4843      	ldr	r0, [pc, #268]	; (8002250 <MFRC522_Request+0x330>)
 8002142:	f7fe fa4b 	bl	80005dc <HAL_GPIO_WritePin>
 8002146:	230c      	movs	r3, #12
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002148:	4622      	mov	r2, r4
 800214a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800214e:	4840      	ldr	r0, [pc, #256]	; (8002250 <MFRC522_Request+0x330>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002150:	f88d 700f 	strb.w	r7, [sp, #15]
 8002154:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002158:	f7fe fa40 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800215c:	4629      	mov	r1, r5
 800215e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002162:	2201      	movs	r2, #1
 8002164:	483b      	ldr	r0, [pc, #236]	; (8002254 <MFRC522_Request+0x334>)
 8002166:	f7fe fdc3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800216a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800216e:	2201      	movs	r2, #1
 8002170:	f10d 010b 	add.w	r1, sp, #11
 8002174:	4837      	ldr	r0, [pc, #220]	; (8002254 <MFRC522_Request+0x334>)
 8002176:	f7fe fdbb 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002180:	4833      	ldr	r0, [pc, #204]	; (8002250 <MFRC522_Request+0x330>)
 8002182:	f7fe fa2b 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002186:	239a      	movs	r3, #154	; 0x9a
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002188:	4622      	mov	r2, r4
 800218a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218e:	4830      	ldr	r0, [pc, #192]	; (8002250 <MFRC522_Request+0x330>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002190:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002194:	f7fe fa22 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002198:	4629      	mov	r1, r5
 800219a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800219e:	2201      	movs	r2, #1
 80021a0:	482c      	ldr	r0, [pc, #176]	; (8002254 <MFRC522_Request+0x334>)
 80021a2:	f7fe fda5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80021a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021aa:	f10d 010e 	add.w	r1, sp, #14
 80021ae:	2201      	movs	r2, #1
 80021b0:	4828      	ldr	r0, [pc, #160]	; (8002254 <MFRC522_Request+0x334>)
 80021b2:	f7fe feb3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021bc:	4824      	ldr	r0, [pc, #144]	; (8002250 <MFRC522_Request+0x330>)
 80021be:	f7fe fa0d 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80021c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80021c6:	4622      	mov	r2, r4
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80021c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80021cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d0:	481f      	ldr	r0, [pc, #124]	; (8002250 <MFRC522_Request+0x330>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80021d2:	f88d 600f 	strb.w	r6, [sp, #15]
 80021d6:	f88d 300c 	strb.w	r3, [sp, #12]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80021da:	f7fe f9ff 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80021de:	4629      	mov	r1, r5
 80021e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021e4:	2201      	movs	r2, #1
 80021e6:	481b      	ldr	r0, [pc, #108]	; (8002254 <MFRC522_Request+0x334>)
 80021e8:	f7fe fd82 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80021ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80021f0:	2201      	movs	r2, #1
 80021f2:	a903      	add	r1, sp, #12
 80021f4:	4817      	ldr	r0, [pc, #92]	; (8002254 <MFRC522_Request+0x334>)
 80021f6:	f7fe fd7b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <MFRC522_Request+0x330>)
 8002202:	f7fe f9eb 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002206:	4622      	mov	r2, r4
 8002208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220c:	4810      	ldr	r0, [pc, #64]	; (8002250 <MFRC522_Request+0x330>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800220e:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002212:	f7fe f9e3 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002216:	4629      	mov	r1, r5
 8002218:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800221c:	2201      	movs	r2, #1
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MFRC522_Request+0x334>)
 8002220:	f7fe fd66 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002224:	f10d 010e 	add.w	r1, sp, #14
 8002228:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800222c:	2201      	movs	r2, #1
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <MFRC522_Request+0x334>)
 8002230:	f7fe fe74 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <MFRC522_Request+0x330>)
 800223c:	f7fe f9ce 	bl	80005dc <HAL_GPIO_WritePin>
    i--;
 8002240:	f240 76cf 	movw	r6, #1999	; 0x7cf
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002244:	f89d 400e 	ldrb.w	r4, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002248:	f8df 8004 	ldr.w	r8, [pc, #4]	; 8002250 <MFRC522_Request+0x330>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800224c:	4f01      	ldr	r7, [pc, #4]	; (8002254 <MFRC522_Request+0x334>)
 800224e:	e023      	b.n	8002298 <MFRC522_Request+0x378>
 8002250:	40011400 	.word	0x40011400
 8002254:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225c:	4640      	mov	r0, r8
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800225e:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002262:	f7fe f9bb 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002266:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800226a:	2201      	movs	r2, #1
 800226c:	4629      	mov	r1, r5
 800226e:	4638      	mov	r0, r7
 8002270:	f7fe fd3e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002274:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002278:	2201      	movs	r2, #1
 800227a:	f10d 010e 	add.w	r1, sp, #14
 800227e:	4638      	mov	r0, r7
 8002280:	f7fe fe4c 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228a:	4640      	mov	r0, r8
 800228c:	f7fe f9a6 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002290:	3e01      	subs	r6, #1
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002292:	f89d 400e 	ldrb.w	r4, [sp, #14]
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002296:	d002      	beq.n	800229e <MFRC522_Request+0x37e>
 8002298:	f014 0231 	ands.w	r2, r4, #49	; 0x31
 800229c:	d0dc      	beq.n	8002258 <MFRC522_Request+0x338>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800229e:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80022a0:	271a      	movs	r7, #26
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a8:	4875      	ldr	r0, [pc, #468]	; (8002480 <MFRC522_Request+0x560>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80022aa:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80022ae:	f7fe f995 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80022b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022b6:	2201      	movs	r2, #1
 80022b8:	4629      	mov	r1, r5
 80022ba:	4872      	ldr	r0, [pc, #456]	; (8002484 <MFRC522_Request+0x564>)
 80022bc:	f7fe fd18 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80022c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022c4:	2201      	movs	r2, #1
 80022c6:	f10d 010e 	add.w	r1, sp, #14
 80022ca:	486e      	ldr	r0, [pc, #440]	; (8002484 <MFRC522_Request+0x564>)
 80022cc:	f7fe fe26 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d6:	486a      	ldr	r0, [pc, #424]	; (8002480 <MFRC522_Request+0x560>)
 80022d8:	f7fe f980 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80022dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80022e0:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80022e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80022e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ea:	4865      	ldr	r0, [pc, #404]	; (8002480 <MFRC522_Request+0x560>)
 80022ec:	f88d 300d 	strb.w	r3, [sp, #13]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80022f0:	f88d 700f 	strb.w	r7, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80022f4:	f7fe f972 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80022f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022fc:	2201      	movs	r2, #1
 80022fe:	4629      	mov	r1, r5
 8002300:	4860      	ldr	r0, [pc, #384]	; (8002484 <MFRC522_Request+0x564>)
 8002302:	f7fe fcf5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002306:	2201      	movs	r2, #1
 8002308:	f10d 010d 	add.w	r1, sp, #13
 800230c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002310:	485c      	ldr	r0, [pc, #368]	; (8002484 <MFRC522_Request+0x564>)
 8002312:	f7fe fced 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231c:	4858      	ldr	r0, [pc, #352]	; (8002480 <MFRC522_Request+0x560>)
 800231e:	f7fe f95d 	bl	80005dc <HAL_GPIO_WritePin>
  if (i != 0)
 8002322:	2e00      	cmp	r6, #0
 8002324:	f000 80a2 	beq.w	800246c <MFRC522_Request+0x54c>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002328:	238c      	movs	r3, #140	; 0x8c
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002330:	4853      	ldr	r0, [pc, #332]	; (8002480 <MFRC522_Request+0x560>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002332:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002336:	f7fe f951 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800233a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800233e:	2201      	movs	r2, #1
 8002340:	4629      	mov	r1, r5
 8002342:	4850      	ldr	r0, [pc, #320]	; (8002484 <MFRC522_Request+0x564>)
 8002344:	f7fe fcd4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002348:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800234c:	2201      	movs	r2, #1
 800234e:	f10d 010e 	add.w	r1, sp, #14
 8002352:	484c      	ldr	r0, [pc, #304]	; (8002484 <MFRC522_Request+0x564>)
 8002354:	f7fe fde2 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800235e:	4848      	ldr	r0, [pc, #288]	; (8002480 <MFRC522_Request+0x560>)
 8002360:	f7fe f93c 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002364:	f89d 200e 	ldrb.w	r2, [sp, #14]
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8002368:	f012 061b 	ands.w	r6, r2, #27
 800236c:	d17e      	bne.n	800246c <MFRC522_Request+0x54c>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800236e:	2394      	movs	r3, #148	; 0x94
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002370:	4632      	mov	r2, r6
 8002372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002376:	4842      	ldr	r0, [pc, #264]	; (8002480 <MFRC522_Request+0x560>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002378:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800237c:	f7fe f92e 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002380:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002384:	2201      	movs	r2, #1
 8002386:	4629      	mov	r1, r5
 8002388:	483e      	ldr	r0, [pc, #248]	; (8002484 <MFRC522_Request+0x564>)
 800238a:	f7fe fcb1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800238e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002392:	2201      	movs	r2, #1
 8002394:	f10d 010e 	add.w	r1, sp, #14
 8002398:	483a      	ldr	r0, [pc, #232]	; (8002484 <MFRC522_Request+0x564>)
 800239a:	f7fe fdbf 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a4:	4836      	ldr	r0, [pc, #216]	; (8002480 <MFRC522_Request+0x560>)
 80023a6:	f7fe f919 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80023aa:	2398      	movs	r3, #152	; 0x98
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80023ac:	4632      	mov	r2, r6
 80023ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023b2:	4833      	ldr	r0, [pc, #204]	; (8002480 <MFRC522_Request+0x560>)
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80023b4:	f89d 600e 	ldrb.w	r6, [sp, #14]
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80023b8:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80023bc:	f7fe f90e 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80023c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023c4:	2201      	movs	r2, #1
 80023c6:	4629      	mov	r1, r5
 80023c8:	482e      	ldr	r0, [pc, #184]	; (8002484 <MFRC522_Request+0x564>)
 80023ca:	f7fe fc91 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80023ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023d2:	2201      	movs	r2, #1
 80023d4:	f10d 010e 	add.w	r1, sp, #14
 80023d8:	482a      	ldr	r0, [pc, #168]	; (8002484 <MFRC522_Request+0x564>)
 80023da:	f7fe fd9f 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023e4:	4826      	ldr	r0, [pc, #152]	; (8002480 <MFRC522_Request+0x560>)
 80023e6:	f7fe f8f9 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80023ea:	f89d 900e 	ldrb.w	r9, [sp, #14]
 80023ee:	f004 0401 	and.w	r4, r4, #1
        if (lastBits)
 80023f2:	f019 0907 	ands.w	r9, r9, #7
          *backLen = (n-1)*8 + lastBits;
 80023f6:	bf1a      	itte	ne
 80023f8:	f106 33ff 	addne.w	r3, r6, #4294967295
 80023fc:	eb09 09c3 	addne.w	r9, r9, r3, lsl #3
          *backLen = n*8;
 8002400:	ea4f 09c6 	moveq.w	r9, r6, lsl #3
        if (n == 0)
 8002404:	bbb6      	cbnz	r6, 8002474 <MFRC522_Request+0x554>
        for (i=0; i<n; i++)
 8002406:	f04f 0801 	mov.w	r8, #1
 800240a:	f10a 3aff 	add.w	sl, sl, #4294967295
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800240e:	4f1c      	ldr	r7, [pc, #112]	; (8002480 <MFRC522_Request+0x560>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002410:	4e1c      	ldr	r6, [pc, #112]	; (8002484 <MFRC522_Request+0x564>)
 8002412:	44d0      	add	r8, sl
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002414:	2392      	movs	r3, #146	; 0x92
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800241c:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800241e:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002422:	f7fe f8db 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002426:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800242a:	2201      	movs	r2, #1
 800242c:	4629      	mov	r1, r5
 800242e:	4630      	mov	r0, r6
 8002430:	f7fe fc5e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002434:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002438:	2201      	movs	r2, #1
 800243a:	f10d 010e 	add.w	r1, sp, #14
 800243e:	4630      	mov	r0, r6
 8002440:	f7fe fd6c 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800244a:	4638      	mov	r0, r7
 800244c:	f7fe f8c6 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002450:	f89d 300e 	ldrb.w	r3, [sp, #14]
          backData[i] = Read_MFRC522(FIFODataReg);
 8002454:	f80a 3f01 	strb.w	r3, [sl, #1]!
        for (i=0; i<n; i++)
 8002458:	45d0      	cmp	r8, sl
 800245a:	d1db      	bne.n	8002414 <MFRC522_Request+0x4f4>
  if ((status != MI_OK) || (backBits != 0x10)) {
 800245c:	b934      	cbnz	r4, 800246c <MFRC522_Request+0x54c>
 800245e:	f1b9 0f10 	cmp.w	r9, #16
 8002462:	d103      	bne.n	800246c <MFRC522_Request+0x54c>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002464:	4620      	mov	r0, r4
}
 8002466:	b004      	add	sp, #16
 8002468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = MI_ERR;
 800246c:	2002      	movs	r0, #2
}
 800246e:	b004      	add	sp, #16
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (i=0; i<n; i++)
 8002474:	2e10      	cmp	r6, #16
 8002476:	bf28      	it	cs
 8002478:	2610      	movcs	r6, #16
 800247a:	46b0      	mov	r8, r6
 800247c:	e7c5      	b.n	800240a <MFRC522_Request+0x4ea>
 800247e:	bf00      	nop
 8002480:	40011400 	.word	0x40011400
 8002484:	20000130 	.word	0x20000130

08002488 <MFRC522_Anticoll>:
{
 8002488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800248c:	231a      	movs	r3, #26
 800248e:	2500      	movs	r5, #0
{
 8002490:	b087      	sub	sp, #28
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002492:	ac06      	add	r4, sp, #24
 8002494:	f804 3d01 	strb.w	r3, [r4, #-1]!
{
 8002498:	4682      	mov	sl, r0
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800249a:	462a      	mov	r2, r5
 800249c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a0:	48cd      	ldr	r0, [pc, #820]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80024a2:	f88d 500d 	strb.w	r5, [sp, #13]
 80024a6:	f7fe f899 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80024aa:	4621      	mov	r1, r4
 80024ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024b0:	2201      	movs	r2, #1
 80024b2:	48ca      	ldr	r0, [pc, #808]	; (80027dc <MFRC522_Anticoll+0x354>)
 80024b4:	f7fe fc1c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80024b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024bc:	2201      	movs	r2, #1
 80024be:	f10d 010d 	add.w	r1, sp, #13
 80024c2:	48c6      	ldr	r0, [pc, #792]	; (80027dc <MFRC522_Anticoll+0x354>)
 80024c4:	f7fe fc14 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ce:	48c2      	ldr	r0, [pc, #776]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80024d0:	f7fe f884 	bl	80005dc <HAL_GPIO_WritePin>
  serNum[0] = PICC_ANTICOLL;
 80024d4:	2193      	movs	r1, #147	; 0x93
  serNum[1] = 0x20;
 80024d6:	2220      	movs	r2, #32
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80024d8:	2304      	movs	r3, #4
 80024da:	26f7      	movs	r6, #247	; 0xf7
  serNum[0] = PICC_ANTICOLL;
 80024dc:	f88a 1000 	strb.w	r1, [sl]
  serNum[1] = 0x20;
 80024e0:	f88a 2001 	strb.w	r2, [sl, #1]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80024e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e8:	462a      	mov	r2, r5
 80024ea:	48bb      	ldr	r0, [pc, #748]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80024ec:	f88d 6011 	strb.w	r6, [sp, #17]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80024f0:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80024f4:	f7fe f872 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80024f8:	4621      	mov	r1, r4
 80024fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024fe:	2201      	movs	r2, #1
 8002500:	48b6      	ldr	r0, [pc, #728]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002502:	f7fe fbf5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002506:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800250a:	2201      	movs	r2, #1
 800250c:	f10d 0111 	add.w	r1, sp, #17
 8002510:	48b2      	ldr	r0, [pc, #712]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002512:	f7fe fbed 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002516:	2201      	movs	r2, #1
 8002518:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800251c:	48ae      	ldr	r0, [pc, #696]	; (80027d8 <MFRC522_Anticoll+0x350>)
 800251e:	f7fe f85d 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002522:	2388      	movs	r3, #136	; 0x88
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002524:	2608      	movs	r6, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002526:	462a      	mov	r2, r5
 8002528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800252c:	48aa      	ldr	r0, [pc, #680]	; (80027d8 <MFRC522_Anticoll+0x350>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800252e:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002532:	f7fe f853 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002536:	4621      	mov	r1, r4
 8002538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800253c:	2201      	movs	r2, #1
 800253e:	48a7      	ldr	r0, [pc, #668]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002540:	f7fe fbd6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002544:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002548:	f10d 0116 	add.w	r1, sp, #22
 800254c:	2201      	movs	r2, #1
 800254e:	48a3      	ldr	r0, [pc, #652]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002550:	f7fe fce4 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800255a:	489f      	ldr	r0, [pc, #636]	; (80027d8 <MFRC522_Anticoll+0x350>)
 800255c:	f7fe f83e 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002560:	f89d 3016 	ldrb.w	r3, [sp, #22]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002564:	462a      	mov	r2, r5
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800256a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800256e:	489a      	ldr	r0, [pc, #616]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002570:	f88d 3010 	strb.w	r3, [sp, #16]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002574:	f88d 6017 	strb.w	r6, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002578:	f7fe f830 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800257c:	4621      	mov	r1, r4
 800257e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002582:	2201      	movs	r2, #1
 8002584:	4895      	ldr	r0, [pc, #596]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002586:	f7fe fbb3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800258a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800258e:	2201      	movs	r2, #1
 8002590:	a904      	add	r1, sp, #16
 8002592:	4892      	ldr	r0, [pc, #584]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002594:	f7fe fbac 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800259e:	488e      	ldr	r0, [pc, #568]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80025a0:	f7fe f81c 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80025a4:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80025a6:	2614      	movs	r6, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80025a8:	462a      	mov	r2, r5
 80025aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ae:	488a      	ldr	r0, [pc, #552]	; (80027d8 <MFRC522_Anticoll+0x350>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80025b0:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80025b4:	f7fe f812 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80025b8:	4621      	mov	r1, r4
 80025ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025be:	2201      	movs	r2, #1
 80025c0:	4886      	ldr	r0, [pc, #536]	; (80027dc <MFRC522_Anticoll+0x354>)
 80025c2:	f7fe fb95 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80025c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80025ca:	f10d 0116 	add.w	r1, sp, #22
 80025ce:	2201      	movs	r2, #1
 80025d0:	4882      	ldr	r0, [pc, #520]	; (80027dc <MFRC522_Anticoll+0x354>)
 80025d2:	f7fe fca3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025dc:	487e      	ldr	r0, [pc, #504]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80025de:	f7fd fffd 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80025e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80025e6:	462a      	mov	r2, r5
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80025e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80025ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f0:	4879      	ldr	r0, [pc, #484]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80025f2:	f88d 300f 	strb.w	r3, [sp, #15]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80025f6:	f88d 6017 	strb.w	r6, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80025fa:	f7fd ffef 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80025fe:	4621      	mov	r1, r4
 8002600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002604:	2201      	movs	r2, #1
 8002606:	4875      	ldr	r0, [pc, #468]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002608:	f7fe fb72 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800260c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002610:	2201      	movs	r2, #1
 8002612:	f10d 010f 	add.w	r1, sp, #15
 8002616:	4871      	ldr	r0, [pc, #452]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002618:	f7fe fb6a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002622:	486d      	ldr	r0, [pc, #436]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002624:	f7fd ffda 	bl	80005dc <HAL_GPIO_WritePin>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002628:	2302      	movs	r3, #2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800262a:	462a      	mov	r2, r5
 800262c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002630:	4869      	ldr	r0, [pc, #420]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002632:	f88d 500e 	strb.w	r5, [sp, #14]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002636:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800263a:	f7fd ffcf 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800263e:	4621      	mov	r1, r4
 8002640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002644:	2201      	movs	r2, #1
 8002646:	4865      	ldr	r0, [pc, #404]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002648:	f7fe fb52 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800264c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002650:	2201      	movs	r2, #1
 8002652:	f10d 010e 	add.w	r1, sp, #14
 8002656:	4861      	ldr	r0, [pc, #388]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002658:	f7fe fb4a 	bl	8000cf0 <HAL_SPI_Transmit>
 800265c:	f10a 33ff 	add.w	r3, sl, #4294967295
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002660:	2201      	movs	r2, #1
 8002662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002666:	485c      	ldr	r0, [pc, #368]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	469b      	mov	fp, r3
 800266c:	461d      	mov	r5, r3
 800266e:	f7fd ffb5 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002672:	4f59      	ldr	r7, [pc, #356]	; (80027d8 <MFRC522_Anticoll+0x350>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002674:	4e59      	ldr	r6, [pc, #356]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002676:	f10a 0801 	add.w	r8, sl, #1
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800267a:	f04f 0c12 	mov.w	ip, #18
 800267e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002682:	2200      	movs	r2, #0
 8002684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002688:	4638      	mov	r0, r7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800268a:	f88d c017 	strb.w	ip, [sp, #23]
 800268e:	f88d 3012 	strb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002692:	f7fd ffa3 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002696:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800269a:	2201      	movs	r2, #1
 800269c:	4621      	mov	r1, r4
 800269e:	4630      	mov	r0, r6
 80026a0:	f7fe fb26 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80026a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026a8:	2201      	movs	r2, #1
 80026aa:	f10d 0112 	add.w	r1, sp, #18
 80026ae:	4630      	mov	r0, r6
 80026b0:	f7fe fb1e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ba:	4638      	mov	r0, r7
 80026bc:	f7fd ff8e 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<sendLen; i++)
 80026c0:	4545      	cmp	r5, r8
 80026c2:	d1da      	bne.n	800267a <MFRC522_Anticoll+0x1f2>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80026c4:	2302      	movs	r3, #2
 80026c6:	250c      	movs	r5, #12
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ce:	4842      	ldr	r0, [pc, #264]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80026d0:	f88d 5013 	strb.w	r5, [sp, #19]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80026d4:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80026d8:	f7fd ff80 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80026dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026e0:	2201      	movs	r2, #1
 80026e2:	4621      	mov	r1, r4
 80026e4:	483d      	ldr	r0, [pc, #244]	; (80027dc <MFRC522_Anticoll+0x354>)
 80026e6:	f7fe fb03 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80026ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026ee:	2201      	movs	r2, #1
 80026f0:	f10d 0113 	add.w	r1, sp, #19
 80026f4:	4839      	ldr	r0, [pc, #228]	; (80027dc <MFRC522_Anticoll+0x354>)
 80026f6:	f7fe fafb 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80026fa:	2201      	movs	r2, #1
 80026fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002700:	4835      	ldr	r0, [pc, #212]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002702:	f7fd ff6b 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002706:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002708:	251a      	movs	r5, #26
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800270a:	f04f 0988 	mov.w	r9, #136	; 0x88
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002714:	4830      	ldr	r0, [pc, #192]	; (80027d8 <MFRC522_Anticoll+0x350>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002716:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800271a:	f7fd ff5f 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800271e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002722:	2201      	movs	r2, #1
 8002724:	4621      	mov	r1, r4
 8002726:	482d      	ldr	r0, [pc, #180]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002728:	f7fe fae2 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800272c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002730:	2201      	movs	r2, #1
 8002732:	f10d 0116 	add.w	r1, sp, #22
 8002736:	4829      	ldr	r0, [pc, #164]	; (80027dc <MFRC522_Anticoll+0x354>)
 8002738:	f7fe fbf0 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002742:	4825      	ldr	r0, [pc, #148]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002744:	f7fd ff4a 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002748:	f89d 3016 	ldrb.w	r3, [sp, #22]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800274e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002756:	4820      	ldr	r0, [pc, #128]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002758:	f88d 3014 	strb.w	r3, [sp, #20]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800275c:	f88d 5017 	strb.w	r5, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002760:	f7fd ff3c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002764:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002768:	2201      	movs	r2, #1
 800276a:	4621      	mov	r1, r4
 800276c:	481b      	ldr	r0, [pc, #108]	; (80027dc <MFRC522_Anticoll+0x354>)
 800276e:	f7fe fabf 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002772:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002776:	2201      	movs	r2, #1
 8002778:	a905      	add	r1, sp, #20
 800277a:	4818      	ldr	r0, [pc, #96]	; (80027dc <MFRC522_Anticoll+0x354>)
 800277c:	f7fe fab8 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002786:	4814      	ldr	r0, [pc, #80]	; (80027d8 <MFRC522_Anticoll+0x350>)
 8002788:	f7fd ff28 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002792:	4811      	ldr	r0, [pc, #68]	; (80027d8 <MFRC522_Anticoll+0x350>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002794:	f88d 9017 	strb.w	r9, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002798:	f7fd ff20 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800279c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027a0:	2201      	movs	r2, #1
 80027a2:	4621      	mov	r1, r4
 80027a4:	480d      	ldr	r0, [pc, #52]	; (80027dc <MFRC522_Anticoll+0x354>)
 80027a6:	f7fe faa3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80027aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027ae:	2201      	movs	r2, #1
 80027b0:	f10d 0116 	add.w	r1, sp, #22
 80027b4:	4809      	ldr	r0, [pc, #36]	; (80027dc <MFRC522_Anticoll+0x354>)
 80027b6:	f7fe fbb1 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80027ba:	2201      	movs	r2, #1
 80027bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MFRC522_Anticoll+0x350>)
 80027c2:	f7fd ff0b 	bl	80005dc <HAL_GPIO_WritePin>
    i--;
 80027c6:	f240 76cf 	movw	r6, #1999	; 0x7cf
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80027ca:	f89d 5016 	ldrb.w	r5, [sp, #22]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80027ce:	f8df 8008 	ldr.w	r8, [pc, #8]	; 80027d8 <MFRC522_Anticoll+0x350>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80027d2:	4f02      	ldr	r7, [pc, #8]	; (80027dc <MFRC522_Anticoll+0x354>)
 80027d4:	e024      	b.n	8002820 <MFRC522_Anticoll+0x398>
 80027d6:	bf00      	nop
 80027d8:	40011400 	.word	0x40011400
 80027dc:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80027e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e4:	4640      	mov	r0, r8
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80027e6:	f88d 9017 	strb.w	r9, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80027ea:	f7fd fef7 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80027ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027f2:	2201      	movs	r2, #1
 80027f4:	4621      	mov	r1, r4
 80027f6:	4638      	mov	r0, r7
 80027f8:	f7fe fa7a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80027fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002800:	2201      	movs	r2, #1
 8002802:	f10d 0116 	add.w	r1, sp, #22
 8002806:	4638      	mov	r0, r7
 8002808:	f7fe fb88 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002812:	4640      	mov	r0, r8
 8002814:	f7fd fee2 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002818:	3e01      	subs	r6, #1
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800281a:	f89d 5016 	ldrb.w	r5, [sp, #22]
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800281e:	d002      	beq.n	8002826 <MFRC522_Anticoll+0x39e>
 8002820:	f015 0231 	ands.w	r2, r5, #49	; 0x31
 8002824:	d0dc      	beq.n	80027e0 <MFRC522_Anticoll+0x358>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002826:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002828:	271a      	movs	r7, #26
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002830:	4877      	ldr	r0, [pc, #476]	; (8002a10 <MFRC522_Anticoll+0x588>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002832:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002836:	f7fd fed1 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800283a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800283e:	2201      	movs	r2, #1
 8002840:	4621      	mov	r1, r4
 8002842:	4874      	ldr	r0, [pc, #464]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 8002844:	f7fe fa54 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002848:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800284c:	2201      	movs	r2, #1
 800284e:	f10d 0116 	add.w	r1, sp, #22
 8002852:	4870      	ldr	r0, [pc, #448]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 8002854:	f7fe fb62 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800285e:	486c      	ldr	r0, [pc, #432]	; (8002a10 <MFRC522_Anticoll+0x588>)
 8002860:	f7fd febc 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002864:	f89d 3016 	ldrb.w	r3, [sp, #22]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002868:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800286a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800286e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002872:	4867      	ldr	r0, [pc, #412]	; (8002a10 <MFRC522_Anticoll+0x588>)
 8002874:	f88d 3015 	strb.w	r3, [sp, #21]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002878:	f88d 7017 	strb.w	r7, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800287c:	f7fd feae 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002884:	2201      	movs	r2, #1
 8002886:	4621      	mov	r1, r4
 8002888:	4862      	ldr	r0, [pc, #392]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 800288a:	f7fe fa31 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800288e:	2201      	movs	r2, #1
 8002890:	f10d 0115 	add.w	r1, sp, #21
 8002894:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002898:	485e      	ldr	r0, [pc, #376]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 800289a:	f7fe fa29 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800289e:	2201      	movs	r2, #1
 80028a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028a4:	485a      	ldr	r0, [pc, #360]	; (8002a10 <MFRC522_Anticoll+0x588>)
 80028a6:	f7fd fe99 	bl	80005dc <HAL_GPIO_WritePin>
  if (i != 0)
 80028aa:	2e00      	cmp	r6, #0
 80028ac:	f000 80a6 	beq.w	80029fc <MFRC522_Anticoll+0x574>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80028b0:	238c      	movs	r3, #140	; 0x8c
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80028b2:	2200      	movs	r2, #0
 80028b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028b8:	4855      	ldr	r0, [pc, #340]	; (8002a10 <MFRC522_Anticoll+0x588>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80028ba:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80028be:	f7fd fe8d 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80028c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028c6:	2201      	movs	r2, #1
 80028c8:	4621      	mov	r1, r4
 80028ca:	4852      	ldr	r0, [pc, #328]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 80028cc:	f7fe fa10 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80028d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028d4:	2201      	movs	r2, #1
 80028d6:	f10d 0116 	add.w	r1, sp, #22
 80028da:	484e      	ldr	r0, [pc, #312]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 80028dc:	f7fe fb1e 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80028e0:	2201      	movs	r2, #1
 80028e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028e6:	484a      	ldr	r0, [pc, #296]	; (8002a10 <MFRC522_Anticoll+0x588>)
 80028e8:	f7fd fe78 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80028ec:	f89d 2016 	ldrb.w	r2, [sp, #22]
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80028f0:	f012 061b 	ands.w	r6, r2, #27
 80028f4:	f040 8082 	bne.w	80029fc <MFRC522_Anticoll+0x574>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80028f8:	2394      	movs	r3, #148	; 0x94
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80028fa:	4632      	mov	r2, r6
 80028fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002900:	4843      	ldr	r0, [pc, #268]	; (8002a10 <MFRC522_Anticoll+0x588>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002902:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002906:	f7fd fe69 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800290a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800290e:	2201      	movs	r2, #1
 8002910:	4621      	mov	r1, r4
 8002912:	4840      	ldr	r0, [pc, #256]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 8002914:	f7fe f9ec 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002918:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800291c:	2201      	movs	r2, #1
 800291e:	f10d 0116 	add.w	r1, sp, #22
 8002922:	483c      	ldr	r0, [pc, #240]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 8002924:	f7fe fafa 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800292e:	4838      	ldr	r0, [pc, #224]	; (8002a10 <MFRC522_Anticoll+0x588>)
 8002930:	f7fd fe54 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002934:	2398      	movs	r3, #152	; 0x98
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002936:	4632      	mov	r2, r6
 8002938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800293c:	4834      	ldr	r0, [pc, #208]	; (8002a10 <MFRC522_Anticoll+0x588>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800293e:	f88d 3017 	strb.w	r3, [sp, #23]
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002942:	f89d 6016 	ldrb.w	r6, [sp, #22]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002946:	f7fd fe49 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800294a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800294e:	2201      	movs	r2, #1
 8002950:	4621      	mov	r1, r4
 8002952:	4830      	ldr	r0, [pc, #192]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 8002954:	f7fe f9cc 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002958:	2201      	movs	r2, #1
 800295a:	f10d 0116 	add.w	r1, sp, #22
 800295e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002962:	482c      	ldr	r0, [pc, #176]	; (8002a14 <MFRC522_Anticoll+0x58c>)
 8002964:	f7fe fada 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002968:	2201      	movs	r2, #1
 800296a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800296e:	4828      	ldr	r0, [pc, #160]	; (8002a10 <MFRC522_Anticoll+0x588>)
 8002970:	4015      	ands	r5, r2
 8002972:	f7fd fe33 	bl	80005dc <HAL_GPIO_WritePin>
        if (n == 0)
 8002976:	2e00      	cmp	r6, #0
 8002978:	d044      	beq.n	8002a04 <MFRC522_Anticoll+0x57c>
        for (i=0; i<n; i++)
 800297a:	2e10      	cmp	r6, #16
 800297c:	bf28      	it	cs
 800297e:	2610      	movcs	r6, #16
 8002980:	46b0      	mov	r8, r6
 8002982:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002984:	4f22      	ldr	r7, [pc, #136]	; (8002a10 <MFRC522_Anticoll+0x588>)
 8002986:	4443      	add	r3, r8
 8002988:	4698      	mov	r8, r3
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800298a:	4e22      	ldr	r6, [pc, #136]	; (8002a14 <MFRC522_Anticoll+0x58c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800298c:	2392      	movs	r3, #146	; 0x92
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002994:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002996:	f88d 3017 	strb.w	r3, [sp, #23]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800299a:	f7fd fe1f 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800299e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029a2:	2201      	movs	r2, #1
 80029a4:	4621      	mov	r1, r4
 80029a6:	4630      	mov	r0, r6
 80029a8:	f7fe f9a2 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80029ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029b0:	2201      	movs	r2, #1
 80029b2:	f10d 0116 	add.w	r1, sp, #22
 80029b6:	4630      	mov	r0, r6
 80029b8:	f7fe fab0 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80029bc:	2201      	movs	r2, #1
 80029be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029c2:	4638      	mov	r0, r7
 80029c4:	f7fd fe0a 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80029c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
          backData[i] = Read_MFRC522(FIFODataReg);
 80029cc:	f80b 3f01 	strb.w	r3, [fp, #1]!
        for (i=0; i<n; i++)
 80029d0:	45c3      	cmp	fp, r8
 80029d2:	d1db      	bne.n	800298c <MFRC522_Anticoll+0x504>
  if (status == MI_OK)
 80029d4:	b9cd      	cbnz	r5, 8002a0a <MFRC522_Anticoll+0x582>
      serNumCheck ^= serNum[i];
 80029d6:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80029da:	f89a 3000 	ldrb.w	r3, [sl]
 80029de:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80029e2:	404b      	eors	r3, r1
 80029e4:	f89a 1003 	ldrb.w	r1, [sl, #3]
 80029e8:	4053      	eors	r3, r2
    if (serNumCheck != serNum[i])
 80029ea:	f89a 2004 	ldrb.w	r2, [sl, #4]
 80029ee:	404b      	eors	r3, r1
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d103      	bne.n	80029fc <MFRC522_Anticoll+0x574>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80029f4:	4628      	mov	r0, r5
}
 80029f6:	b007      	add	sp, #28
 80029f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      status = MI_ERR;
 80029fc:	2002      	movs	r0, #2
}
 80029fe:	b007      	add	sp, #28
 8002a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i=0; i<n; i++)
 8002a04:	f04f 0801 	mov.w	r8, #1
 8002a08:	e7bb      	b.n	8002982 <MFRC522_Anticoll+0x4fa>
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	e7f7      	b.n	80029fe <MFRC522_Anticoll+0x576>
 8002a0e:	bf00      	nop
 8002a10:	40011400 	.word	0x40011400
 8002a14:	20000130 	.word	0x20000130

08002a18 <MFRC522_Write>:
  buff[0] = PICC_WRITE;
 8002a18:	23a0      	movs	r3, #160	; 0xa0
{
 8002a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1e:	b08b      	sub	sp, #44	; 0x2c
  buff[1] = blockAddr;
 8002a20:	f88d 0015 	strb.w	r0, [sp, #21]
{
 8002a24:	460e      	mov	r6, r1
  CalulateCRC(buff, 2, &buff[2]);
 8002a26:	a805      	add	r0, sp, #20
 8002a28:	f10d 0116 	add.w	r1, sp, #22
  buff[0] = PICC_WRITE;
 8002a2c:	f88d 3014 	strb.w	r3, [sp, #20]
  CalulateCRC(buff, 2, &buff[2]);
 8002a30:	f7fe fd0c 	bl	800144c <CalulateCRC.constprop.2>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 8002a34:	a905      	add	r1, sp, #20
 8002a36:	4608      	mov	r0, r1
 8002a38:	aa04      	add	r2, sp, #16
 8002a3a:	f7fe fe73 	bl	8001724 <MFRC522_ToCard.constprop.7>
  if ((status != MI_OK))// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	f040 83ec 	bne.w	800321c <MFRC522_Write+0x804>
 8002a44:	4682      	mov	sl, r0
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002a46:	278a      	movs	r7, #138	; 0x8a
 8002a48:	6830      	ldr	r0, [r6, #0]
 8002a4a:	6871      	ldr	r1, [r6, #4]
 8002a4c:	68b2      	ldr	r2, [r6, #8]
 8002a4e:	68f3      	ldr	r3, [r6, #12]
 8002a50:	ad05      	add	r5, sp, #20
 8002a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002a54:	250a      	movs	r5, #10
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002a56:	ac0a      	add	r4, sp, #40	; 0x28
 8002a58:	f804 7d19 	strb.w	r7, [r4, #-25]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002a5c:	4652      	mov	r2, sl
 8002a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a62:	4878      	ldr	r0, [pc, #480]	; (8002c44 <MFRC522_Write+0x22c>)
 8002a64:	f7fd fdba 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002a68:	4621      	mov	r1, r4
 8002a6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4875      	ldr	r0, [pc, #468]	; (8002c48 <MFRC522_Write+0x230>)
 8002a72:	f7fe f93d 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002a76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a7a:	f10d 010e 	add.w	r1, sp, #14
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4871      	ldr	r0, [pc, #452]	; (8002c48 <MFRC522_Write+0x230>)
 8002a82:	f7fe fa4b 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002a86:	2201      	movs	r2, #1
 8002a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a8c:	486d      	ldr	r0, [pc, #436]	; (8002c44 <MFRC522_Write+0x22c>)
 8002a8e:	f7fd fda5 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002a92:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002a96:	4652      	mov	r2, sl
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002a98:	f023 0304 	bic.w	r3, r3, #4
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002aa0:	4868      	ldr	r0, [pc, #416]	; (8002c44 <MFRC522_Write+0x22c>)
 8002aa2:	f88d 3003 	strb.w	r3, [sp, #3]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002aa6:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002aaa:	f7fd fd97 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002aae:	4621      	mov	r1, r4
 8002ab0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4864      	ldr	r0, [pc, #400]	; (8002c48 <MFRC522_Write+0x230>)
 8002ab8:	f7fe f91a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f10d 0103 	add.w	r1, sp, #3
 8002ac6:	4860      	ldr	r0, [pc, #384]	; (8002c48 <MFRC522_Write+0x230>)
 8002ac8:	f7fe f912 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ad2:	485c      	ldr	r0, [pc, #368]	; (8002c44 <MFRC522_Write+0x22c>)
 8002ad4:	f7fd fd82 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002ad8:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002ada:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002adc:	4652      	mov	r2, sl
 8002ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae2:	4858      	ldr	r0, [pc, #352]	; (8002c44 <MFRC522_Write+0x22c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002ae4:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002ae8:	f7fd fd78 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002aec:	4621      	mov	r1, r4
 8002aee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002af2:	2201      	movs	r2, #1
 8002af4:	4854      	ldr	r0, [pc, #336]	; (8002c48 <MFRC522_Write+0x230>)
 8002af6:	f7fe f8fb 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002afa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002afe:	f10d 010e 	add.w	r1, sp, #14
 8002b02:	2201      	movs	r2, #1
 8002b04:	4850      	ldr	r0, [pc, #320]	; (8002c48 <MFRC522_Write+0x230>)
 8002b06:	f7fe fa09 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b10:	484c      	ldr	r0, [pc, #304]	; (8002c44 <MFRC522_Write+0x22c>)
 8002b12:	f7fd fd63 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002b16:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002b1a:	4652      	mov	r2, sl
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b24:	4847      	ldr	r0, [pc, #284]	; (8002c44 <MFRC522_Write+0x22c>)
 8002b26:	f88d 3002 	strb.w	r3, [sp, #2]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002b2a:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002b2e:	f7fd fd55 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002b32:	4621      	mov	r1, r4
 8002b34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4843      	ldr	r0, [pc, #268]	; (8002c48 <MFRC522_Write+0x230>)
 8002b3c:	f7fe f8d8 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002b40:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b44:	2201      	movs	r2, #1
 8002b46:	f10d 0102 	add.w	r1, sp, #2
 8002b4a:	483f      	ldr	r0, [pc, #252]	; (8002c48 <MFRC522_Write+0x230>)
 8002b4c:	f7fe f8d0 	bl	8000cf0 <HAL_SPI_Transmit>
 8002b50:	f10d 0813 	add.w	r8, sp, #19
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b5a:	483a      	ldr	r0, [pc, #232]	; (8002c44 <MFRC522_Write+0x22c>)
 8002b5c:	f7fd fd3e 	bl	80005dc <HAL_GPIO_WritePin>
 8002b60:	4645      	mov	r5, r8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002b62:	4f38      	ldr	r7, [pc, #224]	; (8002c44 <MFRC522_Write+0x22c>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002b64:	4e38      	ldr	r6, [pc, #224]	; (8002c48 <MFRC522_Write+0x230>)
 8002b66:	f10d 0b14 	add.w	fp, sp, #20
 8002b6a:	f10d 0923 	add.w	r9, sp, #35	; 0x23
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002b6e:	f04f 0c12 	mov.w	ip, #18
 8002b72:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b7c:	4638      	mov	r0, r7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002b7e:	f88d c00f 	strb.w	ip, [sp, #15]
 8002b82:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002b86:	f7fd fd29 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002b8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4621      	mov	r1, r4
 8002b92:	4630      	mov	r0, r6
 8002b94:	f7fe f8ac 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002b98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	a901      	add	r1, sp, #4
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	f7fe f8a5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bac:	4638      	mov	r0, r7
 8002bae:	f7fd fd15 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<len; i++)
 8002bb2:	454d      	cmp	r5, r9
 8002bb4:	d1db      	bne.n	8002b6e <MFRC522_Write+0x156>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	2503      	movs	r5, #3
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002bba:	f04f 098a 	mov.w	r9, #138	; 0x8a
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bc4:	481f      	ldr	r0, [pc, #124]	; (8002c44 <MFRC522_Write+0x22c>)
 8002bc6:	f88d 5005 	strb.w	r5, [sp, #5]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002bca:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002bce:	f7fd fd05 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002bd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4621      	mov	r1, r4
 8002bda:	481b      	ldr	r0, [pc, #108]	; (8002c48 <MFRC522_Write+0x230>)
 8002bdc:	f7fe f888 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002be0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002be4:	2201      	movs	r2, #1
 8002be6:	f10d 0105 	add.w	r1, sp, #5
 8002bea:	4817      	ldr	r0, [pc, #92]	; (8002c48 <MFRC522_Write+0x230>)
 8002bec:	f7fe f880 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bf6:	4813      	ldr	r0, [pc, #76]	; (8002c44 <MFRC522_Write+0x22c>)
 8002bf8:	f7fd fcf0 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <MFRC522_Write+0x22c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002c04:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002c08:	f7fd fce8 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002c0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c10:	2201      	movs	r2, #1
 8002c12:	4621      	mov	r1, r4
 8002c14:	480c      	ldr	r0, [pc, #48]	; (8002c48 <MFRC522_Write+0x230>)
 8002c16:	f7fe f86b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002c1a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f10d 010e 	add.w	r1, sp, #14
 8002c24:	4808      	ldr	r0, [pc, #32]	; (8002c48 <MFRC522_Write+0x230>)
 8002c26:	f7fe f979 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <MFRC522_Write+0x22c>)
 8002c32:	f7fd fcd3 	bl	80005dc <HAL_GPIO_WritePin>
 8002c36:	25fe      	movs	r5, #254	; 0xfe
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002c38:	f89d 200e 	ldrb.w	r2, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002c3c:	4f01      	ldr	r7, [pc, #4]	; (8002c44 <MFRC522_Write+0x22c>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002c3e:	4e02      	ldr	r6, [pc, #8]	; (8002c48 <MFRC522_Write+0x230>)
 8002c40:	e026      	b.n	8002c90 <MFRC522_Write+0x278>
 8002c42:	bf00      	nop
 8002c44:	40011400 	.word	0x40011400
 8002c48:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c50:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002c52:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002c56:	f7fd fcc1 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002c5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4621      	mov	r1, r4
 8002c62:	4630      	mov	r0, r6
 8002c64:	f7fe f844 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002c68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f10d 010e 	add.w	r1, sp, #14
 8002c72:	4630      	mov	r0, r6
 8002c74:	f7fe f952 	bl	8000f1c <HAL_SPI_Receive>
 8002c78:	3d01      	subs	r5, #1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c80:	4638      	mov	r0, r7
 8002c82:	f7fd fcab 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8002c86:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002c8a:	f89d 200e 	ldrb.w	r2, [sp, #14]
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8002c8e:	d002      	beq.n	8002c96 <MFRC522_Write+0x27e>
 8002c90:	f012 0204 	ands.w	r2, r2, #4
 8002c94:	d0da      	beq.n	8002c4c <MFRC522_Write+0x234>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002c96:	23c4      	movs	r3, #196	; 0xc4
 8002c98:	25c2      	movs	r5, #194	; 0xc2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ca0:	48db      	ldr	r0, [pc, #876]	; (8003010 <MFRC522_Write+0x5f8>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002ca2:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002ca6:	f7fd fc99 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002caa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	48d8      	ldr	r0, [pc, #864]	; (8003014 <MFRC522_Write+0x5fc>)
 8002cb4:	f7fe f81c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002cb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f10d 010e 	add.w	r1, sp, #14
 8002cc2:	48d4      	ldr	r0, [pc, #848]	; (8003014 <MFRC522_Write+0x5fc>)
 8002cc4:	f7fe f92a 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cce:	48d0      	ldr	r0, [pc, #832]	; (8003010 <MFRC522_Write+0x5f8>)
 8002cd0:	f7fd fc84 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002cd4:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cde:	48cc      	ldr	r0, [pc, #816]	; (8003010 <MFRC522_Write+0x5f8>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002ce0:	f88d 500f 	strb.w	r5, [sp, #15]
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 8002ce4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002ce8:	f7fd fc78 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002cec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	48c7      	ldr	r0, [pc, #796]	; (8003014 <MFRC522_Write+0x5fc>)
 8002cf6:	f7fd fffb 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002cfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f10d 010e 	add.w	r1, sp, #14
 8002d04:	48c3      	ldr	r0, [pc, #780]	; (8003014 <MFRC522_Write+0x5fc>)
 8002d06:	f7fe f909 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d10:	48bf      	ldr	r0, [pc, #764]	; (8003010 <MFRC522_Write+0x5f8>)
 8002d12:	f7fd fc63 	bl	80005dc <HAL_GPIO_WritePin>
 8002d16:	20f7      	movs	r0, #247	; 0xf7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002d18:	2504      	movs	r5, #4
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002d1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d24:	f88d 0009 	strb.w	r0, [sp, #9]
 8002d28:	48b9      	ldr	r0, [pc, #740]	; (8003010 <MFRC522_Write+0x5f8>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002d2a:	f88d 500f 	strb.w	r5, [sp, #15]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 8002d2e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002d32:	f7fd fc53 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002d36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	48b5      	ldr	r0, [pc, #724]	; (8003014 <MFRC522_Write+0x5fc>)
 8002d40:	f7fd ffd6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002d44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f10d 0109 	add.w	r1, sp, #9
 8002d4e:	48b1      	ldr	r0, [pc, #708]	; (8003014 <MFRC522_Write+0x5fc>)
 8002d50:	f7fd ffce 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002d54:	2201      	movs	r2, #1
 8002d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d5a:	48ad      	ldr	r0, [pc, #692]	; (8003010 <MFRC522_Write+0x5f8>)
 8002d5c:	f7fd fc3e 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002d60:	2388      	movs	r3, #136	; 0x88
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002d62:	2508      	movs	r5, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002d64:	2200      	movs	r2, #0
 8002d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d6a:	48a9      	ldr	r0, [pc, #676]	; (8003010 <MFRC522_Write+0x5f8>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002d6c:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002d70:	f7fd fc34 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002d74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	48a5      	ldr	r0, [pc, #660]	; (8003014 <MFRC522_Write+0x5fc>)
 8002d7e:	f7fd ffb7 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002d82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d86:	2201      	movs	r2, #1
 8002d88:	f10d 010e 	add.w	r1, sp, #14
 8002d8c:	48a1      	ldr	r0, [pc, #644]	; (8003014 <MFRC522_Write+0x5fc>)
 8002d8e:	f7fe f8c5 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002d92:	2201      	movs	r2, #1
 8002d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d98:	489d      	ldr	r0, [pc, #628]	; (8003010 <MFRC522_Write+0x5f8>)
 8002d9a:	f7fd fc1f 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002d9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002da8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dac:	4898      	ldr	r0, [pc, #608]	; (8003010 <MFRC522_Write+0x5f8>)
 8002dae:	f88d 3008 	strb.w	r3, [sp, #8]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002db2:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002db6:	f7fd fc11 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002dba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4894      	ldr	r0, [pc, #592]	; (8003014 <MFRC522_Write+0x5fc>)
 8002dc4:	f7fd ff94 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002dc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dcc:	eb0d 0105 	add.w	r1, sp, r5
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4890      	ldr	r0, [pc, #576]	; (8003014 <MFRC522_Write+0x5fc>)
 8002dd4:	f7fd ff8c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dde:	488c      	ldr	r0, [pc, #560]	; (8003010 <MFRC522_Write+0x5f8>)
 8002de0:	f7fd fbfc 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002de4:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002de6:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dee:	4888      	ldr	r0, [pc, #544]	; (8003010 <MFRC522_Write+0x5f8>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002df0:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002df4:	f7fd fbf2 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002df8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4884      	ldr	r0, [pc, #528]	; (8003014 <MFRC522_Write+0x5fc>)
 8002e02:	f7fd ff75 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002e06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f10d 010e 	add.w	r1, sp, #14
 8002e10:	4880      	ldr	r0, [pc, #512]	; (8003014 <MFRC522_Write+0x5fc>)
 8002e12:	f7fe f883 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002e16:	2201      	movs	r2, #1
 8002e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e1c:	487c      	ldr	r0, [pc, #496]	; (8003010 <MFRC522_Write+0x5f8>)
 8002e1e:	f7fd fbdd 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002e22:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002e26:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002e28:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e30:	4877      	ldr	r0, [pc, #476]	; (8003010 <MFRC522_Write+0x5f8>)
 8002e32:	f88d 3007 	strb.w	r3, [sp, #7]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002e36:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002e3a:	f7fd fbcf 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002e3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e42:	2201      	movs	r2, #1
 8002e44:	4621      	mov	r1, r4
 8002e46:	4873      	ldr	r0, [pc, #460]	; (8003014 <MFRC522_Write+0x5fc>)
 8002e48:	f7fd ff52 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002e4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e50:	2201      	movs	r2, #1
 8002e52:	f10d 0107 	add.w	r1, sp, #7
 8002e56:	486f      	ldr	r0, [pc, #444]	; (8003014 <MFRC522_Write+0x5fc>)
 8002e58:	f7fd ff4a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e62:	486b      	ldr	r0, [pc, #428]	; (8003010 <MFRC522_Write+0x5f8>)
 8002e64:	f7fd fbba 	bl	80005dc <HAL_GPIO_WritePin>
 8002e68:	2300      	movs	r3, #0
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002e6a:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e72:	4867      	ldr	r0, [pc, #412]	; (8003010 <MFRC522_Write+0x5f8>)
 8002e74:	f88d 3006 	strb.w	r3, [sp, #6]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002e78:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002e7c:	f7fd fbae 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002e80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e84:	2201      	movs	r2, #1
 8002e86:	4621      	mov	r1, r4
 8002e88:	4862      	ldr	r0, [pc, #392]	; (8003014 <MFRC522_Write+0x5fc>)
 8002e8a:	f7fd ff31 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002e8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e92:	2201      	movs	r2, #1
 8002e94:	f10d 0106 	add.w	r1, sp, #6
 8002e98:	485e      	ldr	r0, [pc, #376]	; (8003014 <MFRC522_Write+0x5fc>)
 8002e9a:	f7fd ff29 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ea4:	485a      	ldr	r0, [pc, #360]	; (8003010 <MFRC522_Write+0x5f8>)
 8002ea6:	f7fd fb99 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002eaa:	4e59      	ldr	r6, [pc, #356]	; (8003010 <MFRC522_Write+0x5f8>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002eac:	4d59      	ldr	r5, [pc, #356]	; (8003014 <MFRC522_Write+0x5fc>)
 8002eae:	f10d 0725 	add.w	r7, sp, #37	; 0x25
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002eb2:	f04f 0c12 	mov.w	ip, #18
 8002eb6:	f818 3f01 	ldrb.w	r3, [r8, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ec0:	4630      	mov	r0, r6
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002ec2:	f88d c00f 	strb.w	ip, [sp, #15]
 8002ec6:	f88d 300a 	strb.w	r3, [sp, #10]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002eca:	f7fd fb87 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002ece:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f7fd ff0a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002edc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f10d 010a 	add.w	r1, sp, #10
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f7fd ff02 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002eec:	2201      	movs	r2, #1
 8002eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7fd fb72 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<sendLen; i++)
 8002ef8:	4547      	cmp	r7, r8
 8002efa:	d1da      	bne.n	8002eb2 <MFRC522_Write+0x49a>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002efc:	2302      	movs	r3, #2
 8002efe:	250c      	movs	r5, #12
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f06:	4842      	ldr	r0, [pc, #264]	; (8003010 <MFRC522_Write+0x5f8>)
 8002f08:	f88d 500b 	strb.w	r5, [sp, #11]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002f0c:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f10:	f7fd fb64 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	483d      	ldr	r0, [pc, #244]	; (8003014 <MFRC522_Write+0x5fc>)
 8002f1e:	f7fd fee7 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002f22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f26:	2201      	movs	r2, #1
 8002f28:	f10d 010b 	add.w	r1, sp, #11
 8002f2c:	4839      	ldr	r0, [pc, #228]	; (8003014 <MFRC522_Write+0x5fc>)
 8002f2e:	f7fd fedf 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002f32:	2201      	movs	r2, #1
 8002f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f38:	4835      	ldr	r0, [pc, #212]	; (8003010 <MFRC522_Write+0x5f8>)
 8002f3a:	f7fd fb4f 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002f3e:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002f40:	251a      	movs	r5, #26
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002f42:	f04f 0988 	mov.w	r9, #136	; 0x88
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f46:	2200      	movs	r2, #0
 8002f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f4c:	4830      	ldr	r0, [pc, #192]	; (8003010 <MFRC522_Write+0x5f8>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002f4e:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f52:	f7fd fb43 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002f56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	482d      	ldr	r0, [pc, #180]	; (8003014 <MFRC522_Write+0x5fc>)
 8002f60:	f7fd fec6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002f64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f10d 010e 	add.w	r1, sp, #14
 8002f6e:	4829      	ldr	r0, [pc, #164]	; (8003014 <MFRC522_Write+0x5fc>)
 8002f70:	f7fd ffd4 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002f74:	2201      	movs	r2, #1
 8002f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f7a:	4825      	ldr	r0, [pc, #148]	; (8003010 <MFRC522_Write+0x5f8>)
 8002f7c:	f7fd fb2e 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8002f80:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f84:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f8e:	4820      	ldr	r0, [pc, #128]	; (8003010 <MFRC522_Write+0x5f8>)
 8002f90:	f88d 300c 	strb.w	r3, [sp, #12]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8002f94:	f88d 500f 	strb.w	r5, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002f98:	f7fd fb20 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	481b      	ldr	r0, [pc, #108]	; (8003014 <MFRC522_Write+0x5fc>)
 8002fa6:	f7fd fea3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8002faa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fae:	2201      	movs	r2, #1
 8002fb0:	a903      	add	r1, sp, #12
 8002fb2:	4818      	ldr	r0, [pc, #96]	; (8003014 <MFRC522_Write+0x5fc>)
 8002fb4:	f7fd fe9c 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fbe:	4814      	ldr	r0, [pc, #80]	; (8003010 <MFRC522_Write+0x5f8>)
 8002fc0:	f7fd fb0c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fca:	4811      	ldr	r0, [pc, #68]	; (8003010 <MFRC522_Write+0x5f8>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8002fcc:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8002fd0:	f7fd fb04 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8002fd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4621      	mov	r1, r4
 8002fdc:	480d      	ldr	r0, [pc, #52]	; (8003014 <MFRC522_Write+0x5fc>)
 8002fde:	f7fd fe87 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8002fe2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f10d 010e 	add.w	r1, sp, #14
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <MFRC522_Write+0x5fc>)
 8002fee:	f7fd ff95 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ff8:	4805      	ldr	r0, [pc, #20]	; (8003010 <MFRC522_Write+0x5f8>)
 8002ffa:	f7fd faef 	bl	80005dc <HAL_GPIO_WritePin>
    i--;
 8002ffe:	f240 76cf 	movw	r6, #1999	; 0x7cf
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003002:	f89d 500e 	ldrb.w	r5, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003006:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8003010 <MFRC522_Write+0x5f8>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800300a:	4f02      	ldr	r7, [pc, #8]	; (8003014 <MFRC522_Write+0x5fc>)
 800300c:	e024      	b.n	8003058 <MFRC522_Write+0x640>
 800300e:	bf00      	nop
 8003010:	40011400 	.word	0x40011400
 8003014:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800301c:	4640      	mov	r0, r8
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800301e:	f88d 900f 	strb.w	r9, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003022:	f7fd fadb 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003026:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800302a:	2201      	movs	r2, #1
 800302c:	4621      	mov	r1, r4
 800302e:	4638      	mov	r0, r7
 8003030:	f7fd fe5e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003034:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003038:	2201      	movs	r2, #1
 800303a:	f10d 010e 	add.w	r1, sp, #14
 800303e:	4638      	mov	r0, r7
 8003040:	f7fd ff6c 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003044:	2201      	movs	r2, #1
 8003046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800304a:	4640      	mov	r0, r8
 800304c:	f7fd fac6 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003050:	3e01      	subs	r6, #1
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003052:	f89d 500e 	ldrb.w	r5, [sp, #14]
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003056:	d002      	beq.n	800305e <MFRC522_Write+0x646>
 8003058:	f015 0231 	ands.w	r2, r5, #49	; 0x31
 800305c:	d0dc      	beq.n	8003018 <MFRC522_Write+0x600>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800305e:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003060:	271a      	movs	r7, #26
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003068:	4872      	ldr	r0, [pc, #456]	; (8003234 <MFRC522_Write+0x81c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800306a:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800306e:	f7fd fab5 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003072:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003076:	2201      	movs	r2, #1
 8003078:	4621      	mov	r1, r4
 800307a:	486f      	ldr	r0, [pc, #444]	; (8003238 <MFRC522_Write+0x820>)
 800307c:	f7fd fe38 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003080:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003084:	2201      	movs	r2, #1
 8003086:	f10d 010e 	add.w	r1, sp, #14
 800308a:	486b      	ldr	r0, [pc, #428]	; (8003238 <MFRC522_Write+0x820>)
 800308c:	f7fd ff46 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003090:	2201      	movs	r2, #1
 8003092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003096:	4867      	ldr	r0, [pc, #412]	; (8003234 <MFRC522_Write+0x81c>)
 8003098:	f7fd faa0 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800309c:	f89d 300e 	ldrb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80030a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80030a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030aa:	4862      	ldr	r0, [pc, #392]	; (8003234 <MFRC522_Write+0x81c>)
 80030ac:	f88d 300d 	strb.w	r3, [sp, #13]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80030b0:	f88d 700f 	strb.w	r7, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80030b4:	f7fd fa92 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80030b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030bc:	2201      	movs	r2, #1
 80030be:	4621      	mov	r1, r4
 80030c0:	485d      	ldr	r0, [pc, #372]	; (8003238 <MFRC522_Write+0x820>)
 80030c2:	f7fd fe15 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80030c6:	2201      	movs	r2, #1
 80030c8:	f10d 010d 	add.w	r1, sp, #13
 80030cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030d0:	4859      	ldr	r0, [pc, #356]	; (8003238 <MFRC522_Write+0x820>)
 80030d2:	f7fd fe0d 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80030d6:	2201      	movs	r2, #1
 80030d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030dc:	4855      	ldr	r0, [pc, #340]	; (8003234 <MFRC522_Write+0x81c>)
 80030de:	f7fd fa7d 	bl	80005dc <HAL_GPIO_WritePin>
  if (i != 0)
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	f000 809a 	beq.w	800321c <MFRC522_Write+0x804>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80030e8:	238c      	movs	r3, #140	; 0x8c
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030f0:	4850      	ldr	r0, [pc, #320]	; (8003234 <MFRC522_Write+0x81c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80030f2:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80030f6:	f7fd fa71 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80030fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030fe:	2201      	movs	r2, #1
 8003100:	4621      	mov	r1, r4
 8003102:	484d      	ldr	r0, [pc, #308]	; (8003238 <MFRC522_Write+0x820>)
 8003104:	f7fd fdf4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003108:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800310c:	2201      	movs	r2, #1
 800310e:	f10d 010e 	add.w	r1, sp, #14
 8003112:	4849      	ldr	r0, [pc, #292]	; (8003238 <MFRC522_Write+0x820>)
 8003114:	f7fd ff02 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800311e:	4845      	ldr	r0, [pc, #276]	; (8003234 <MFRC522_Write+0x81c>)
 8003120:	f7fd fa5c 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003124:	f89d 200e 	ldrb.w	r2, [sp, #14]
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8003128:	f012 061b 	ands.w	r6, r2, #27
 800312c:	d176      	bne.n	800321c <MFRC522_Write+0x804>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800312e:	2394      	movs	r3, #148	; 0x94
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003130:	4632      	mov	r2, r6
 8003132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003136:	483f      	ldr	r0, [pc, #252]	; (8003234 <MFRC522_Write+0x81c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003138:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800313c:	f7fd fa4e 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003140:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003144:	2201      	movs	r2, #1
 8003146:	4621      	mov	r1, r4
 8003148:	483b      	ldr	r0, [pc, #236]	; (8003238 <MFRC522_Write+0x820>)
 800314a:	f7fd fdd1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800314e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003152:	2201      	movs	r2, #1
 8003154:	f10d 010e 	add.w	r1, sp, #14
 8003158:	4837      	ldr	r0, [pc, #220]	; (8003238 <MFRC522_Write+0x820>)
 800315a:	f7fd fedf 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800315e:	2201      	movs	r2, #1
 8003160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003164:	4833      	ldr	r0, [pc, #204]	; (8003234 <MFRC522_Write+0x81c>)
 8003166:	f7fd fa39 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800316a:	2398      	movs	r3, #152	; 0x98
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800316c:	4632      	mov	r2, r6
 800316e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003172:	4830      	ldr	r0, [pc, #192]	; (8003234 <MFRC522_Write+0x81c>)
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003174:	f89d 600e 	ldrb.w	r6, [sp, #14]
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003178:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800317c:	f7fd fa2e 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003180:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003184:	2201      	movs	r2, #1
 8003186:	4621      	mov	r1, r4
 8003188:	482b      	ldr	r0, [pc, #172]	; (8003238 <MFRC522_Write+0x820>)
 800318a:	f7fd fdb1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800318e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003192:	2201      	movs	r2, #1
 8003194:	f10d 010e 	add.w	r1, sp, #14
 8003198:	4827      	ldr	r0, [pc, #156]	; (8003238 <MFRC522_Write+0x820>)
 800319a:	f7fd febf 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800319e:	2201      	movs	r2, #1
 80031a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031a4:	4823      	ldr	r0, [pc, #140]	; (8003234 <MFRC522_Write+0x81c>)
 80031a6:	f7fd fa19 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80031aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80031ae:	f005 0501 	and.w	r5, r5, #1
        if (lastBits)
 80031b2:	f013 0307 	ands.w	r3, r3, #7
          *backLen = (n-1)*8 + lastBits;
 80031b6:	bf1a      	itte	ne
 80031b8:	f106 32ff 	addne.w	r2, r6, #4294967295
 80031bc:	eb03 03c2 	addne.w	r3, r3, r2, lsl #3
          *backLen = n*8;
 80031c0:	00f3      	lsleq	r3, r6, #3
 80031c2:	9304      	str	r3, [sp, #16]
        if (n == 0)
 80031c4:	bb86      	cbnz	r6, 8003228 <MFRC522_Write+0x810>
        for (i=0; i<n; i++)
 80031c6:	f04f 0801 	mov.w	r8, #1
 80031ca:	ab05      	add	r3, sp, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80031cc:	4f19      	ldr	r7, [pc, #100]	; (8003234 <MFRC522_Write+0x81c>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80031ce:	4e1a      	ldr	r6, [pc, #104]	; (8003238 <MFRC522_Write+0x820>)
 80031d0:	4498      	add	r8, r3
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80031d2:	2392      	movs	r3, #146	; 0x92
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031da:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80031dc:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80031e0:	f7fd f9fc 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80031e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031e8:	2201      	movs	r2, #1
 80031ea:	4621      	mov	r1, r4
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7fd fd7f 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80031f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031f6:	2201      	movs	r2, #1
 80031f8:	f10d 010e 	add.w	r1, sp, #14
 80031fc:	4630      	mov	r0, r6
 80031fe:	f7fd fe8d 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003202:	2201      	movs	r2, #1
 8003204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003208:	4638      	mov	r0, r7
 800320a:	f7fd f9e7 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800320e:	f89d 300e 	ldrb.w	r3, [sp, #14]
          backData[i] = Read_MFRC522(FIFODataReg);
 8003212:	f80b 3b01 	strb.w	r3, [fp], #1
        for (i=0; i<n; i++)
 8003216:	45c3      	cmp	fp, r8
 8003218:	d1db      	bne.n	80031d2 <MFRC522_Write+0x7ba>
    if ((status != MI_OK))// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 800321a:	b10d      	cbz	r5, 8003220 <MFRC522_Write+0x808>
      status = MI_ERR;
 800321c:	f04f 0a02 	mov.w	sl, #2
}
 8003220:	4650      	mov	r0, sl
 8003222:	b00b      	add	sp, #44	; 0x2c
 8003224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i=0; i<n; i++)
 8003228:	2e10      	cmp	r6, #16
 800322a:	bf28      	it	cs
 800322c:	2610      	movcs	r6, #16
 800322e:	46b0      	mov	r8, r6
 8003230:	e7cb      	b.n	80031ca <MFRC522_Write+0x7b2>
 8003232:	bf00      	nop
 8003234:	40011400 	.word	0x40011400
 8003238:	20000130 	.word	0x20000130

0800323c <MFRC522_Auth>:
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800323c:	f04f 0c04 	mov.w	ip, #4
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Auth(u_char authMode, u_char BlockAddr, u_char *Sectorkey, u_char *serNum)
{
 8003240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003244:	2592      	movs	r5, #146	; 0x92
 8003246:	b086      	sub	sp, #24
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003248:	ac06      	add	r4, sp, #24
 800324a:	681f      	ldr	r7, [r3, #0]
 800324c:	6816      	ldr	r6, [r2, #0]
 800324e:	8893      	ldrh	r3, [r2, #4]
 8003250:	f804 cd0d 	strb.w	ip, [r4, #-13]!
  uint recvBits;
  u_char i;
  u_char buff[12];

  //Verify the command block address + sector + password + card serial number
  buff[0] = authMode;
 8003254:	f88d 000c 	strb.w	r0, [sp, #12]
  buff[1] = BlockAddr;
 8003258:	f88d 100d 	strb.w	r1, [sp, #13]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003262:	4899      	ldr	r0, [pc, #612]	; (80034c8 <MFRC522_Auth+0x28c>)
 8003264:	9705      	str	r7, [sp, #20]
 8003266:	f8cd 600e 	str.w	r6, [sp, #14]
 800326a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800326e:	f88d 5006 	strb.w	r5, [sp, #6]
 8003272:	f7fd f9b3 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003276:	4621      	mov	r1, r4
 8003278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800327c:	2201      	movs	r2, #1
 800327e:	4893      	ldr	r0, [pc, #588]	; (80034cc <MFRC522_Auth+0x290>)
 8003280:	f7fd fd36 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003288:	2201      	movs	r2, #1
 800328a:	f10d 0106 	add.w	r1, sp, #6
 800328e:	488f      	ldr	r0, [pc, #572]	; (80034cc <MFRC522_Auth+0x290>)
 8003290:	f7fd fd2e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003294:	2201      	movs	r2, #1
 8003296:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800329a:	488b      	ldr	r0, [pc, #556]	; (80034c8 <MFRC522_Auth+0x28c>)
 800329c:	f7fd f99e 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80032a0:	2388      	movs	r3, #136	; 0x88
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80032a2:	2508      	movs	r5, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032aa:	4887      	ldr	r0, [pc, #540]	; (80034c8 <MFRC522_Auth+0x28c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80032ac:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80032b0:	f7fd f994 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80032b4:	4621      	mov	r1, r4
 80032b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032ba:	2201      	movs	r2, #1
 80032bc:	4883      	ldr	r0, [pc, #524]	; (80034cc <MFRC522_Auth+0x290>)
 80032be:	f7fd fd17 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80032c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032c6:	f10d 010a 	add.w	r1, sp, #10
 80032ca:	2201      	movs	r2, #1
 80032cc:	487f      	ldr	r0, [pc, #508]	; (80034cc <MFRC522_Auth+0x290>)
 80032ce:	f7fd fe25 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80032d2:	2201      	movs	r2, #1
 80032d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d8:	487b      	ldr	r0, [pc, #492]	; (80034c8 <MFRC522_Auth+0x28c>)
 80032da:	f7fd f97f 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80032de:	f89d 300a 	ldrb.w	r3, [sp, #10]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80032e2:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80032e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80032e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032ec:	4876      	ldr	r0, [pc, #472]	; (80034c8 <MFRC522_Auth+0x28c>)
 80032ee:	f88d 3005 	strb.w	r3, [sp, #5]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80032f2:	f88d 500b 	strb.w	r5, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80032f6:	f7fd f971 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80032fa:	4621      	mov	r1, r4
 80032fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003300:	2201      	movs	r2, #1
 8003302:	4872      	ldr	r0, [pc, #456]	; (80034cc <MFRC522_Auth+0x290>)
 8003304:	f7fd fcf4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003308:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800330c:	2201      	movs	r2, #1
 800330e:	f10d 0105 	add.w	r1, sp, #5
 8003312:	486e      	ldr	r0, [pc, #440]	; (80034cc <MFRC522_Auth+0x290>)
 8003314:	f7fd fcec 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800331e:	486a      	ldr	r0, [pc, #424]	; (80034c8 <MFRC522_Auth+0x28c>)
 8003320:	f7fd f95c 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003324:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003326:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800332e:	4866      	ldr	r0, [pc, #408]	; (80034c8 <MFRC522_Auth+0x28c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003330:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003334:	f7fd f952 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003338:	4621      	mov	r1, r4
 800333a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800333e:	2201      	movs	r2, #1
 8003340:	4862      	ldr	r0, [pc, #392]	; (80034cc <MFRC522_Auth+0x290>)
 8003342:	f7fd fcd5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003346:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800334a:	f10d 010a 	add.w	r1, sp, #10
 800334e:	2201      	movs	r2, #1
 8003350:	485e      	ldr	r0, [pc, #376]	; (80034cc <MFRC522_Auth+0x290>)
 8003352:	f7fd fde3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003356:	2201      	movs	r2, #1
 8003358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800335c:	485a      	ldr	r0, [pc, #360]	; (80034c8 <MFRC522_Auth+0x28c>)
 800335e:	f7fd f93d 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003362:	f89d 300a 	ldrb.w	r3, [sp, #10]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003366:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003368:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800336c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003370:	4855      	ldr	r0, [pc, #340]	; (80034c8 <MFRC522_Auth+0x28c>)
 8003372:	f88d 3004 	strb.w	r3, [sp, #4]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003376:	f88d 500b 	strb.w	r5, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800337a:	f7fd f92f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800337e:	4621      	mov	r1, r4
 8003380:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003384:	2201      	movs	r2, #1
 8003386:	4851      	ldr	r0, [pc, #324]	; (80034cc <MFRC522_Auth+0x290>)
 8003388:	f7fd fcb2 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800338c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003390:	2201      	movs	r2, #1
 8003392:	a901      	add	r1, sp, #4
 8003394:	484d      	ldr	r0, [pc, #308]	; (80034cc <MFRC522_Auth+0x290>)
 8003396:	f7fd fcab 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800339a:	2201      	movs	r2, #1
 800339c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a0:	4849      	ldr	r0, [pc, #292]	; (80034c8 <MFRC522_Auth+0x28c>)
 80033a2:	f7fd f91b 	bl	80005dc <HAL_GPIO_WritePin>
 80033a6:	2300      	movs	r3, #0
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80033a8:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033b0:	4845      	ldr	r0, [pc, #276]	; (80034c8 <MFRC522_Auth+0x28c>)
 80033b2:	f88d 3003 	strb.w	r3, [sp, #3]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80033b6:	f88d 500b 	strb.w	r5, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80033ba:	f7fd f90f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80033be:	4621      	mov	r1, r4
 80033c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033c4:	2201      	movs	r2, #1
 80033c6:	4841      	ldr	r0, [pc, #260]	; (80034cc <MFRC522_Auth+0x290>)
 80033c8:	f7fd fc92 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80033cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033d0:	2201      	movs	r2, #1
 80033d2:	f10d 0103 	add.w	r1, sp, #3
 80033d6:	483d      	ldr	r0, [pc, #244]	; (80034cc <MFRC522_Auth+0x290>)
 80033d8:	f7fd fc8a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80033dc:	2201      	movs	r2, #1
 80033de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033e2:	4839      	ldr	r0, [pc, #228]	; (80034c8 <MFRC522_Auth+0x28c>)
 80033e4:	f7fd f8fa 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80033e8:	4f37      	ldr	r7, [pc, #220]	; (80034c8 <MFRC522_Auth+0x28c>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80033ea:	4e38      	ldr	r6, [pc, #224]	; (80034cc <MFRC522_Auth+0x290>)
 80033ec:	ad03      	add	r5, sp, #12
 80033ee:	f10d 0818 	add.w	r8, sp, #24
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80033f2:	f04f 0c12 	mov.w	ip, #18
    Write_MFRC522(FIFODataReg, sendData[i]);
 80033f6:	f815 3b01 	ldrb.w	r3, [r5], #1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003400:	4638      	mov	r0, r7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003402:	f88d c00b 	strb.w	ip, [sp, #11]
 8003406:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800340a:	f7fd f8e7 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800340e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003412:	2201      	movs	r2, #1
 8003414:	4621      	mov	r1, r4
 8003416:	4630      	mov	r0, r6
 8003418:	f7fd fc6a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800341c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003420:	2201      	movs	r2, #1
 8003422:	f10d 0107 	add.w	r1, sp, #7
 8003426:	4630      	mov	r0, r6
 8003428:	f7fd fc62 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800342c:	2201      	movs	r2, #1
 800342e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003432:	4638      	mov	r0, r7
 8003434:	f7fd f8d2 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<sendLen; i++)
 8003438:	4545      	cmp	r5, r8
 800343a:	d1da      	bne.n	80033f2 <MFRC522_Auth+0x1b6>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800343c:	2302      	movs	r3, #2
 800343e:	250e      	movs	r5, #14
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003440:	f04f 0888 	mov.w	r8, #136	; 0x88
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800344a:	481f      	ldr	r0, [pc, #124]	; (80034c8 <MFRC522_Auth+0x28c>)
 800344c:	f88d 5008 	strb.w	r5, [sp, #8]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003450:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003454:	f7fd f8c2 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003458:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800345c:	2201      	movs	r2, #1
 800345e:	4621      	mov	r1, r4
 8003460:	481a      	ldr	r0, [pc, #104]	; (80034cc <MFRC522_Auth+0x290>)
 8003462:	f7fd fc45 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003466:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800346a:	2201      	movs	r2, #1
 800346c:	a902      	add	r1, sp, #8
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <MFRC522_Auth+0x290>)
 8003470:	f7fd fc3e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003474:	2201      	movs	r2, #1
 8003476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800347a:	4813      	ldr	r0, [pc, #76]	; (80034c8 <MFRC522_Auth+0x28c>)
 800347c:	f7fd f8ae 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003486:	4810      	ldr	r0, [pc, #64]	; (80034c8 <MFRC522_Auth+0x28c>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003488:	f88d 800b 	strb.w	r8, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800348c:	f7fd f8a6 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003490:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003494:	2201      	movs	r2, #1
 8003496:	4621      	mov	r1, r4
 8003498:	480c      	ldr	r0, [pc, #48]	; (80034cc <MFRC522_Auth+0x290>)
 800349a:	f7fd fc29 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800349e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034a2:	2201      	movs	r2, #1
 80034a4:	f10d 010a 	add.w	r1, sp, #10
 80034a8:	4808      	ldr	r0, [pc, #32]	; (80034cc <MFRC522_Auth+0x290>)
 80034aa:	f7fd fd37 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80034ae:	2201      	movs	r2, #1
 80034b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034b4:	4804      	ldr	r0, [pc, #16]	; (80034c8 <MFRC522_Auth+0x28c>)
 80034b6:	f7fd f891 	bl	80005dc <HAL_GPIO_WritePin>
    i--;
 80034ba:	f240 75cf 	movw	r5, #1999	; 0x7cf
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80034be:	f89d 200a 	ldrb.w	r2, [sp, #10]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80034c2:	4f01      	ldr	r7, [pc, #4]	; (80034c8 <MFRC522_Auth+0x28c>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80034c4:	4e01      	ldr	r6, [pc, #4]	; (80034cc <MFRC522_Auth+0x290>)
 80034c6:	e023      	b.n	8003510 <MFRC522_Auth+0x2d4>
 80034c8:	40011400 	.word	0x40011400
 80034cc:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80034d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034d4:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80034d6:	f88d 800b 	strb.w	r8, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80034da:	f7fd f87f 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80034de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034e2:	2201      	movs	r2, #1
 80034e4:	4621      	mov	r1, r4
 80034e6:	4630      	mov	r0, r6
 80034e8:	f7fd fc02 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80034ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80034f0:	2201      	movs	r2, #1
 80034f2:	f10d 010a 	add.w	r1, sp, #10
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7fd fd10 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80034fc:	2201      	movs	r2, #1
 80034fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003502:	4638      	mov	r0, r7
 8003504:	f7fd f86a 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003508:	3d01      	subs	r5, #1
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800350a:	f89d 200a 	ldrb.w	r2, [sp, #10]
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800350e:	d002      	beq.n	8003516 <MFRC522_Auth+0x2da>
 8003510:	f012 0211 	ands.w	r2, r2, #17
 8003514:	d0dc      	beq.n	80034d0 <MFRC522_Auth+0x294>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003516:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003518:	261a      	movs	r6, #26
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800351a:	2200      	movs	r2, #0
 800351c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003520:	4845      	ldr	r0, [pc, #276]	; (8003638 <MFRC522_Auth+0x3fc>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003522:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003526:	f7fd f859 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800352a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800352e:	2201      	movs	r2, #1
 8003530:	4621      	mov	r1, r4
 8003532:	4842      	ldr	r0, [pc, #264]	; (800363c <MFRC522_Auth+0x400>)
 8003534:	f7fd fbdc 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800353c:	2201      	movs	r2, #1
 800353e:	f10d 010a 	add.w	r1, sp, #10
 8003542:	483e      	ldr	r0, [pc, #248]	; (800363c <MFRC522_Auth+0x400>)
 8003544:	f7fd fcea 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003548:	2201      	movs	r2, #1
 800354a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800354e:	483a      	ldr	r0, [pc, #232]	; (8003638 <MFRC522_Auth+0x3fc>)
 8003550:	f7fd f844 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003554:	f89d 300a 	ldrb.w	r3, [sp, #10]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800355a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800355e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003562:	4835      	ldr	r0, [pc, #212]	; (8003638 <MFRC522_Auth+0x3fc>)
 8003564:	f88d 3009 	strb.w	r3, [sp, #9]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003568:	f88d 600b 	strb.w	r6, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800356c:	f7fd f836 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003570:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003574:	2201      	movs	r2, #1
 8003576:	4621      	mov	r1, r4
 8003578:	4830      	ldr	r0, [pc, #192]	; (800363c <MFRC522_Auth+0x400>)
 800357a:	f7fd fbb9 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800357e:	2201      	movs	r2, #1
 8003580:	f10d 0109 	add.w	r1, sp, #9
 8003584:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003588:	482c      	ldr	r0, [pc, #176]	; (800363c <MFRC522_Auth+0x400>)
 800358a:	f7fd fbb1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800358e:	2201      	movs	r2, #1
 8003590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003594:	4828      	ldr	r0, [pc, #160]	; (8003638 <MFRC522_Auth+0x3fc>)
 8003596:	f7fd f821 	bl	80005dc <HAL_GPIO_WritePin>
  if (i != 0)
 800359a:	2d00      	cmp	r5, #0
 800359c:	d048      	beq.n	8003630 <MFRC522_Auth+0x3f4>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800359e:	238c      	movs	r3, #140	; 0x8c
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80035a0:	2200      	movs	r2, #0
 80035a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035a6:	4824      	ldr	r0, [pc, #144]	; (8003638 <MFRC522_Auth+0x3fc>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80035a8:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80035ac:	f7fd f816 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80035b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035b4:	2201      	movs	r2, #1
 80035b6:	4621      	mov	r1, r4
 80035b8:	4820      	ldr	r0, [pc, #128]	; (800363c <MFRC522_Auth+0x400>)
 80035ba:	f7fd fb99 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80035be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035c2:	2201      	movs	r2, #1
 80035c4:	f10d 010a 	add.w	r1, sp, #10
 80035c8:	481c      	ldr	r0, [pc, #112]	; (800363c <MFRC522_Auth+0x400>)
 80035ca:	f7fd fca7 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80035ce:	481a      	ldr	r0, [pc, #104]	; (8003638 <MFRC522_Auth+0x3fc>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035d6:	f7fd f801 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80035da:	f89d 000a 	ldrb.w	r0, [sp, #10]
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80035de:	f010 051b 	ands.w	r5, r0, #27
 80035e2:	d125      	bne.n	8003630 <MFRC522_Auth+0x3f4>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80035e4:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80035e6:	462a      	mov	r2, r5
 80035e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035ec:	4812      	ldr	r0, [pc, #72]	; (8003638 <MFRC522_Auth+0x3fc>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80035ee:	f88d 300b 	strb.w	r3, [sp, #11]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80035f2:	f7fc fff3 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80035f6:	4621      	mov	r1, r4
 80035f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035fc:	2201      	movs	r2, #1
 80035fe:	480f      	ldr	r0, [pc, #60]	; (800363c <MFRC522_Auth+0x400>)
 8003600:	f7fd fb76 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003604:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003608:	f10d 010a 	add.w	r1, sp, #10
 800360c:	2201      	movs	r2, #1
 800360e:	480b      	ldr	r0, [pc, #44]	; (800363c <MFRC522_Auth+0x400>)
 8003610:	f7fd fc84 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003614:	2201      	movs	r2, #1
 8003616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800361a:	4807      	ldr	r0, [pc, #28]	; (8003638 <MFRC522_Auth+0x3fc>)
 800361c:	f7fc ffde 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003620:	f89d 300a 	ldrb.w	r3, [sp, #10]
  {
    buff[i+8] = *(serNum+i);
  }
  status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);

  if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8003624:	071b      	lsls	r3, r3, #28
 8003626:	d503      	bpl.n	8003630 <MFRC522_Auth+0x3f4>
  status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8003628:	4628      	mov	r0, r5
  {
    status = MI_ERR;
  }

  return status;
}
 800362a:	b006      	add	sp, #24
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = MI_ERR;
 8003630:	2002      	movs	r0, #2
}
 8003632:	b006      	add	sp, #24
 8003634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003638:	40011400 	.word	0x40011400
 800363c:	20000130 	.word	0x20000130

08003640 <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
u_char MFRC522_SelectTag(u_char *serNum)
{
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	b089      	sub	sp, #36	; 0x24
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003646:	ac08      	add	r4, sp, #32
  uint recvBits;
  u_char buffer[9];

  //ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

  buffer[0] = PICC_SElECTTAG;
 8003648:	f247 0393 	movw	r3, #28819	; 0x7093
 800364c:	46a3      	mov	fp, r4
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800364e:	228a      	movs	r2, #138	; 0x8a
 8003650:	7905      	ldrb	r5, [r0, #4]
 8003652:	6806      	ldr	r6, [r0, #0]
 8003654:	f88d 501a 	strb.w	r5, [sp, #26]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003658:	250a      	movs	r5, #10
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800365a:	f804 2d0d 	strb.w	r2, [r4, #-13]!
  buffer[0] = PICC_SElECTTAG;
 800365e:	f82b 3d0c 	strh.w	r3, [fp, #-12]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003668:	4877      	ldr	r0, [pc, #476]	; (8003848 <MFRC522_SelectTag+0x208>)
 800366a:	f8cd 6016 	str.w	r6, [sp, #22]
 800366e:	f7fc ffb5 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003672:	4621      	mov	r1, r4
 8003674:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003678:	2201      	movs	r2, #1
 800367a:	4874      	ldr	r0, [pc, #464]	; (800384c <MFRC522_SelectTag+0x20c>)
 800367c:	f7fd fb38 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003680:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003684:	f10d 0112 	add.w	r1, sp, #18
 8003688:	2201      	movs	r2, #1
 800368a:	4870      	ldr	r0, [pc, #448]	; (800384c <MFRC522_SelectTag+0x20c>)
 800368c:	f7fd fc46 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003690:	2201      	movs	r2, #1
 8003692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003696:	486c      	ldr	r0, [pc, #432]	; (8003848 <MFRC522_SelectTag+0x208>)
 8003698:	f7fc ffa0 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800369c:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80036a2:	f023 0304 	bic.w	r3, r3, #4
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80036a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036aa:	4867      	ldr	r0, [pc, #412]	; (8003848 <MFRC522_SelectTag+0x208>)
 80036ac:	f88d 3007 	strb.w	r3, [sp, #7]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80036b0:	f88d 5013 	strb.w	r5, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80036b4:	f7fc ff92 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80036b8:	4621      	mov	r1, r4
 80036ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036be:	2201      	movs	r2, #1
 80036c0:	4862      	ldr	r0, [pc, #392]	; (800384c <MFRC522_SelectTag+0x20c>)
 80036c2:	f7fd fb15 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80036c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036ca:	2201      	movs	r2, #1
 80036cc:	f10d 0107 	add.w	r1, sp, #7
 80036d0:	485e      	ldr	r0, [pc, #376]	; (800384c <MFRC522_SelectTag+0x20c>)
 80036d2:	f7fd fb0d 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80036d6:	2201      	movs	r2, #1
 80036d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036dc:	485a      	ldr	r0, [pc, #360]	; (8003848 <MFRC522_SelectTag+0x208>)
 80036de:	f7fc ff7d 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80036e2:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80036e4:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80036e6:	2200      	movs	r2, #0
 80036e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036ec:	4856      	ldr	r0, [pc, #344]	; (8003848 <MFRC522_SelectTag+0x208>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80036ee:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80036f2:	f7fc ff73 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80036f6:	4621      	mov	r1, r4
 80036f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036fc:	2201      	movs	r2, #1
 80036fe:	4853      	ldr	r0, [pc, #332]	; (800384c <MFRC522_SelectTag+0x20c>)
 8003700:	f7fd faf6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003704:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003708:	f10d 0112 	add.w	r1, sp, #18
 800370c:	2201      	movs	r2, #1
 800370e:	484f      	ldr	r0, [pc, #316]	; (800384c <MFRC522_SelectTag+0x20c>)
 8003710:	f7fd fc04 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800371a:	484b      	ldr	r0, [pc, #300]	; (8003848 <MFRC522_SelectTag+0x208>)
 800371c:	f7fc ff5e 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003720:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003724:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003726:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800372a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800372e:	4846      	ldr	r0, [pc, #280]	; (8003848 <MFRC522_SelectTag+0x208>)
 8003730:	f88d 3006 	strb.w	r3, [sp, #6]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003734:	f88d 5013 	strb.w	r5, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003738:	f7fc ff50 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800373c:	4621      	mov	r1, r4
 800373e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003742:	2201      	movs	r2, #1
 8003744:	4841      	ldr	r0, [pc, #260]	; (800384c <MFRC522_SelectTag+0x20c>)
 8003746:	f7fd fad3 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800374a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800374e:	2201      	movs	r2, #1
 8003750:	f10d 0106 	add.w	r1, sp, #6
 8003754:	483d      	ldr	r0, [pc, #244]	; (800384c <MFRC522_SelectTag+0x20c>)
 8003756:	f7fd facb 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003760:	4839      	ldr	r0, [pc, #228]	; (8003848 <MFRC522_SelectTag+0x208>)
 8003762:	46a0      	mov	r8, r4
 8003764:	46da      	mov	sl, fp
 8003766:	4625      	mov	r5, r4
 8003768:	f7fc ff38 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800376c:	4f36      	ldr	r7, [pc, #216]	; (8003848 <MFRC522_SelectTag+0x208>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800376e:	4e37      	ldr	r6, [pc, #220]	; (800384c <MFRC522_SelectTag+0x20c>)
 8003770:	f10d 091a 	add.w	r9, sp, #26
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003774:	f04f 0c12 	mov.w	ip, #18
 8003778:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800377c:	2200      	movs	r2, #0
 800377e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003782:	4638      	mov	r0, r7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003784:	f88d c013 	strb.w	ip, [sp, #19]
 8003788:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800378c:	f7fc ff26 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003790:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003794:	2201      	movs	r2, #1
 8003796:	4621      	mov	r1, r4
 8003798:	4630      	mov	r0, r6
 800379a:	f7fd faa9 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 800379e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037a2:	2201      	movs	r2, #1
 80037a4:	a902      	add	r1, sp, #8
 80037a6:	4630      	mov	r0, r6
 80037a8:	f7fd faa2 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80037ac:	2201      	movs	r2, #1
 80037ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037b2:	4638      	mov	r0, r7
 80037b4:	f7fc ff12 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<len; i++)
 80037b8:	45a9      	cmp	r9, r5
 80037ba:	d1db      	bne.n	8003774 <MFRC522_SelectTag+0x134>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80037bc:	2302      	movs	r3, #2
 80037be:	2503      	movs	r5, #3
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80037c0:	f04f 098a 	mov.w	r9, #138	; 0x8a
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037ca:	481f      	ldr	r0, [pc, #124]	; (8003848 <MFRC522_SelectTag+0x208>)
 80037cc:	f88d 5009 	strb.w	r5, [sp, #9]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80037d0:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80037d4:	f7fc ff02 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80037d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037dc:	2201      	movs	r2, #1
 80037de:	4621      	mov	r1, r4
 80037e0:	481a      	ldr	r0, [pc, #104]	; (800384c <MFRC522_SelectTag+0x20c>)
 80037e2:	f7fd fa85 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80037e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037ea:	2201      	movs	r2, #1
 80037ec:	f10d 0109 	add.w	r1, sp, #9
 80037f0:	4816      	ldr	r0, [pc, #88]	; (800384c <MFRC522_SelectTag+0x20c>)
 80037f2:	f7fd fa7d 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80037f6:	2201      	movs	r2, #1
 80037f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037fc:	4812      	ldr	r0, [pc, #72]	; (8003848 <MFRC522_SelectTag+0x208>)
 80037fe:	f7fc feed 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003802:	2200      	movs	r2, #0
 8003804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003808:	480f      	ldr	r0, [pc, #60]	; (8003848 <MFRC522_SelectTag+0x208>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800380a:	f88d 9013 	strb.w	r9, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800380e:	f7fc fee5 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003812:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003816:	2201      	movs	r2, #1
 8003818:	4621      	mov	r1, r4
 800381a:	480c      	ldr	r0, [pc, #48]	; (800384c <MFRC522_SelectTag+0x20c>)
 800381c:	f7fd fa68 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003820:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003824:	2201      	movs	r2, #1
 8003826:	f10d 0112 	add.w	r1, sp, #18
 800382a:	4808      	ldr	r0, [pc, #32]	; (800384c <MFRC522_SelectTag+0x20c>)
 800382c:	f7fd fb76 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003830:	2201      	movs	r2, #1
 8003832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003836:	4804      	ldr	r0, [pc, #16]	; (8003848 <MFRC522_SelectTag+0x208>)
 8003838:	f7fc fed0 	bl	80005dc <HAL_GPIO_WritePin>
 800383c:	25fe      	movs	r5, #254	; 0xfe
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800383e:	f89d 2012 	ldrb.w	r2, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003842:	4f01      	ldr	r7, [pc, #4]	; (8003848 <MFRC522_SelectTag+0x208>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003844:	4e01      	ldr	r6, [pc, #4]	; (800384c <MFRC522_SelectTag+0x20c>)
 8003846:	e025      	b.n	8003894 <MFRC522_SelectTag+0x254>
 8003848:	40011400 	.word	0x40011400
 800384c:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003854:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003856:	f88d 9013 	strb.w	r9, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800385a:	f7fc febf 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800385e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003862:	2201      	movs	r2, #1
 8003864:	4621      	mov	r1, r4
 8003866:	4630      	mov	r0, r6
 8003868:	f7fd fa42 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 800386c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003870:	2201      	movs	r2, #1
 8003872:	f10d 0112 	add.w	r1, sp, #18
 8003876:	4630      	mov	r0, r6
 8003878:	f7fd fb50 	bl	8000f1c <HAL_SPI_Receive>
 800387c:	3d01      	subs	r5, #1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800387e:	2201      	movs	r2, #1
 8003880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003884:	4638      	mov	r0, r7
 8003886:	f7fc fea9 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800388a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800388e:	f89d 2012 	ldrb.w	r2, [sp, #18]
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003892:	d002      	beq.n	800389a <MFRC522_SelectTag+0x25a>
 8003894:	f012 0204 	ands.w	r2, r2, #4
 8003898:	d0da      	beq.n	8003850 <MFRC522_SelectTag+0x210>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 800389a:	23c4      	movs	r3, #196	; 0xc4
 800389c:	25c2      	movs	r5, #194	; 0xc2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800389e:	2200      	movs	r2, #0
 80038a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038a4:	48da      	ldr	r0, [pc, #872]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80038a6:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80038aa:	f7fc fe97 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80038ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038b2:	2201      	movs	r2, #1
 80038b4:	4621      	mov	r1, r4
 80038b6:	48d7      	ldr	r0, [pc, #860]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 80038b8:	f7fd fa1a 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80038bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038c0:	2201      	movs	r2, #1
 80038c2:	f10d 0112 	add.w	r1, sp, #18
 80038c6:	48d3      	ldr	r0, [pc, #844]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 80038c8:	f7fd fb28 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80038cc:	2201      	movs	r2, #1
 80038ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038d2:	48cf      	ldr	r0, [pc, #828]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 80038d4:	f7fc fe82 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80038d8:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038e2:	48cb      	ldr	r0, [pc, #812]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80038e4:	f88d 5013 	strb.w	r5, [sp, #19]
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 80038e8:	f88d 301b 	strb.w	r3, [sp, #27]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80038ec:	f7fc fe76 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80038f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038f4:	2201      	movs	r2, #1
 80038f6:	4621      	mov	r1, r4
 80038f8:	48c6      	ldr	r0, [pc, #792]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 80038fa:	f7fd f9f9 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 80038fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003902:	2201      	movs	r2, #1
 8003904:	f10d 0112 	add.w	r1, sp, #18
 8003908:	48c2      	ldr	r0, [pc, #776]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 800390a:	f7fd fb07 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800390e:	2201      	movs	r2, #1
 8003910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003914:	48be      	ldr	r0, [pc, #760]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003916:	f7fc fe61 	bl	80005dc <HAL_GPIO_WritePin>
 800391a:	20f7      	movs	r0, #247	; 0xf7
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800391c:	2504      	movs	r5, #4
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 800391e:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003928:	f88d 000d 	strb.w	r0, [sp, #13]
 800392c:	48b8      	ldr	r0, [pc, #736]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800392e:	f88d 5013 	strb.w	r5, [sp, #19]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 8003932:	f88d 301c 	strb.w	r3, [sp, #28]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003936:	f7fc fe51 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 800393a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800393e:	2201      	movs	r2, #1
 8003940:	4621      	mov	r1, r4
 8003942:	48b4      	ldr	r0, [pc, #720]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003944:	f7fd f9d4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003948:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800394c:	2201      	movs	r2, #1
 800394e:	f10d 010d 	add.w	r1, sp, #13
 8003952:	48b0      	ldr	r0, [pc, #704]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003954:	f7fd f9cc 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003958:	2201      	movs	r2, #1
 800395a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800395e:	48ac      	ldr	r0, [pc, #688]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003960:	f7fc fe3c 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003964:	2388      	movs	r3, #136	; 0x88
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003966:	2508      	movs	r5, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800396e:	48a8      	ldr	r0, [pc, #672]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003970:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003974:	f7fc fe32 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003978:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800397c:	2201      	movs	r2, #1
 800397e:	4621      	mov	r1, r4
 8003980:	48a4      	ldr	r0, [pc, #656]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003982:	f7fd f9b5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003986:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800398a:	2201      	movs	r2, #1
 800398c:	f10d 0112 	add.w	r1, sp, #18
 8003990:	48a0      	ldr	r0, [pc, #640]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003992:	f7fd fac3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003996:	2201      	movs	r2, #1
 8003998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800399c:	489c      	ldr	r0, [pc, #624]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 800399e:	f7fc fe1d 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 80039a2:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80039a6:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80039a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80039ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039b0:	4897      	ldr	r0, [pc, #604]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 80039b2:	f88d 300c 	strb.w	r3, [sp, #12]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80039b6:	f88d 5013 	strb.w	r5, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80039ba:	f7fc fe0f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80039be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039c2:	2201      	movs	r2, #1
 80039c4:	4621      	mov	r1, r4
 80039c6:	4893      	ldr	r0, [pc, #588]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 80039c8:	f7fd f992 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 80039cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039d0:	2201      	movs	r2, #1
 80039d2:	a903      	add	r1, sp, #12
 80039d4:	488f      	ldr	r0, [pc, #572]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 80039d6:	f7fd f98b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80039da:	2201      	movs	r2, #1
 80039dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039e0:	488b      	ldr	r0, [pc, #556]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 80039e2:	f7fc fdfb 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80039e6:	2394      	movs	r3, #148	; 0x94
	  u_char addr_bits = (((addr<<1) & 0x7E));
 80039e8:	2514      	movs	r5, #20
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039f0:	4887      	ldr	r0, [pc, #540]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80039f2:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80039f6:	f7fc fdf1 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 80039fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039fe:	2201      	movs	r2, #1
 8003a00:	4621      	mov	r1, r4
 8003a02:	4884      	ldr	r0, [pc, #528]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003a04:	f7fd f974 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003a08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f10d 0112 	add.w	r1, sp, #18
 8003a12:	4880      	ldr	r0, [pc, #512]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003a14:	f7fd fa82 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a1e:	487c      	ldr	r0, [pc, #496]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003a20:	f7fc fddc 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003a24:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003a28:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003a2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a32:	4877      	ldr	r0, [pc, #476]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003a34:	f88d 300b 	strb.w	r3, [sp, #11]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003a38:	f88d 5013 	strb.w	r5, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003a3c:	f7fc fdce 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003a40:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a44:	2201      	movs	r2, #1
 8003a46:	4621      	mov	r1, r4
 8003a48:	4872      	ldr	r0, [pc, #456]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003a4a:	f7fd f951 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003a4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a52:	2201      	movs	r2, #1
 8003a54:	f10d 010b 	add.w	r1, sp, #11
 8003a58:	486e      	ldr	r0, [pc, #440]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003a5a:	f7fd f949 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a64:	486a      	ldr	r0, [pc, #424]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003a66:	f7fc fdb9 	bl	80005dc <HAL_GPIO_WritePin>
 8003a6a:	2300      	movs	r3, #0
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003a6c:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a74:	4866      	ldr	r0, [pc, #408]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003a76:	f88d 300a 	strb.w	r3, [sp, #10]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003a7a:	f88d 5013 	strb.w	r5, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003a7e:	f7fc fdad 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003a82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a86:	2201      	movs	r2, #1
 8003a88:	4621      	mov	r1, r4
 8003a8a:	4862      	ldr	r0, [pc, #392]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003a8c:	f7fd f930 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003a90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003a94:	2201      	movs	r2, #1
 8003a96:	f10d 010a 	add.w	r1, sp, #10
 8003a9a:	485e      	ldr	r0, [pc, #376]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003a9c:	f7fd f928 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003aa6:	485a      	ldr	r0, [pc, #360]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003aa8:	f7fc fd98 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003aac:	4e58      	ldr	r6, [pc, #352]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003aae:	4d59      	ldr	r5, [pc, #356]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003ab0:	f10b 0708 	add.w	r7, fp, #8
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003ab4:	f04f 0c12 	mov.w	ip, #18
 8003ab8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ac2:	4630      	mov	r0, r6
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003ac4:	f88d c013 	strb.w	ip, [sp, #19]
 8003ac8:	f88d 300e 	strb.w	r3, [sp, #14]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003acc:	f7fc fd86 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003ad0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7fd f909 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003ade:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f10d 010e 	add.w	r1, sp, #14
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f7fd f901 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003aee:	2201      	movs	r2, #1
 8003af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003af4:	4630      	mov	r0, r6
 8003af6:	f7fc fd71 	bl	80005dc <HAL_GPIO_WritePin>
  for (i=0; i<sendLen; i++)
 8003afa:	4547      	cmp	r7, r8
 8003afc:	d1da      	bne.n	8003ab4 <MFRC522_SelectTag+0x474>
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003afe:	2302      	movs	r3, #2
 8003b00:	250c      	movs	r5, #12
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b02:	2200      	movs	r2, #0
 8003b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b08:	4841      	ldr	r0, [pc, #260]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003b0a:	f88d 500f 	strb.w	r5, [sp, #15]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003b0e:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b12:	f7fc fd63 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003b16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	483d      	ldr	r0, [pc, #244]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003b20:	f7fd f8e6 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003b24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f10d 010f 	add.w	r1, sp, #15
 8003b2e:	4839      	ldr	r0, [pc, #228]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003b30:	f7fd f8de 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003b34:	2201      	movs	r2, #1
 8003b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b3a:	4835      	ldr	r0, [pc, #212]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003b3c:	f7fc fd4e 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003b40:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003b42:	251a      	movs	r5, #26
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003b44:	f04f 0988 	mov.w	r9, #136	; 0x88
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b4e:	4830      	ldr	r0, [pc, #192]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003b50:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b54:	f7fc fd42 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003b58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4621      	mov	r1, r4
 8003b60:	482c      	ldr	r0, [pc, #176]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003b62:	f7fd f8c5 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003b66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f10d 0112 	add.w	r1, sp, #18
 8003b70:	4828      	ldr	r0, [pc, #160]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003b72:	f7fd f9d3 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003b76:	2201      	movs	r2, #1
 8003b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b7c:	4824      	ldr	r0, [pc, #144]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003b7e:	f7fc fd2d 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003b82:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b86:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003b88:	f063 037f 	orn	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b90:	481f      	ldr	r0, [pc, #124]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003b92:	f88d 3010 	strb.w	r3, [sp, #16]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003b96:	f88d 5013 	strb.w	r5, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003b9a:	f7fc fd1f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003b9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	481b      	ldr	r0, [pc, #108]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003ba8:	f7fd f8a2 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003bac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	a904      	add	r1, sp, #16
 8003bb4:	4817      	ldr	r0, [pc, #92]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003bb6:	f7fd f89b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bc0:	4813      	ldr	r0, [pc, #76]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003bc2:	f7fc fd0b 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bcc:	4810      	ldr	r0, [pc, #64]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003bce:	f88d 9013 	strb.w	r9, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003bd2:	f7fc fd03 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4621      	mov	r1, r4
 8003bde:	480d      	ldr	r0, [pc, #52]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003be0:	f7fd f886 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003be4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003be8:	2201      	movs	r2, #1
 8003bea:	f10d 0112 	add.w	r1, sp, #18
 8003bee:	4809      	ldr	r0, [pc, #36]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003bf0:	f7fd f994 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bfa:	4805      	ldr	r0, [pc, #20]	; (8003c10 <MFRC522_SelectTag+0x5d0>)
 8003bfc:	f7fc fcee 	bl	80005dc <HAL_GPIO_WritePin>
    i--;
 8003c00:	f240 76cf 	movw	r6, #1999	; 0x7cf
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003c04:	f89d 5012 	ldrb.w	r5, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003c08:	f8df 8004 	ldr.w	r8, [pc, #4]	; 8003c10 <MFRC522_SelectTag+0x5d0>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003c0c:	4f01      	ldr	r7, [pc, #4]	; (8003c14 <MFRC522_SelectTag+0x5d4>)
 8003c0e:	e023      	b.n	8003c58 <MFRC522_SelectTag+0x618>
 8003c10:	40011400 	.word	0x40011400
 8003c14:	20000130 	.word	0x20000130
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c1c:	4640      	mov	r0, r8
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003c1e:	f88d 9013 	strb.w	r9, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003c22:	f7fc fcdb 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f7fd f85e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003c34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f10d 0112 	add.w	r1, sp, #18
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f7fd f96c 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003c44:	2201      	movs	r2, #1
 8003c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	f7fc fcc6 	bl	80005dc <HAL_GPIO_WritePin>
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003c50:	3e01      	subs	r6, #1
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003c52:	f89d 5012 	ldrb.w	r5, [sp, #18]
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003c56:	d002      	beq.n	8003c5e <MFRC522_SelectTag+0x61e>
 8003c58:	f015 0231 	ands.w	r2, r5, #49	; 0x31
 8003c5c:	d0dc      	beq.n	8003c18 <MFRC522_SelectTag+0x5d8>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003c5e:	239a      	movs	r3, #154	; 0x9a
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003c60:	271a      	movs	r7, #26
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003c62:	2200      	movs	r2, #0
 8003c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c68:	4874      	ldr	r0, [pc, #464]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003c6a:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003c6e:	f7fc fcb5 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003c72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c76:	2201      	movs	r2, #1
 8003c78:	4621      	mov	r1, r4
 8003c7a:	4871      	ldr	r0, [pc, #452]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003c7c:	f7fd f838 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003c80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c84:	2201      	movs	r2, #1
 8003c86:	f10d 0112 	add.w	r1, sp, #18
 8003c8a:	486d      	ldr	r0, [pc, #436]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003c8c:	f7fd f946 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003c90:	2201      	movs	r2, #1
 8003c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c96:	4869      	ldr	r0, [pc, #420]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
 8003c98:	f7fc fca0 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003c9c:	f89d 3012 	ldrb.w	r3, [sp, #18]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003ca0:	2200      	movs	r2, #0
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8003ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003caa:	4864      	ldr	r0, [pc, #400]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
 8003cac:	f88d 3011 	strb.w	r3, [sp, #17]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003cb0:	f88d 7013 	strb.w	r7, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003cb4:	f7fc fc92 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003cb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	485f      	ldr	r0, [pc, #380]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003cc2:	f7fd f815 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f10d 0111 	add.w	r1, sp, #17
 8003ccc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003cd0:	485b      	ldr	r0, [pc, #364]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003cd2:	f7fd f80d 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cdc:	4857      	ldr	r0, [pc, #348]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
 8003cde:	f7fc fc7d 	bl	80005dc <HAL_GPIO_WritePin>
  if (i != 0)
 8003ce2:	2e00      	cmp	r6, #0
 8003ce4:	f000 80a0 	beq.w	8003e28 <MFRC522_SelectTag+0x7e8>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003ce8:	238c      	movs	r3, #140	; 0x8c
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003cea:	2200      	movs	r2, #0
 8003cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cf0:	4852      	ldr	r0, [pc, #328]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003cf2:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003cf6:	f7fc fc71 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003cfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4621      	mov	r1, r4
 8003d02:	484f      	ldr	r0, [pc, #316]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003d04:	f7fc fff4 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003d08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f10d 0112 	add.w	r1, sp, #18
 8003d12:	484b      	ldr	r0, [pc, #300]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003d14:	f7fd f902 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d1e:	4847      	ldr	r0, [pc, #284]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
 8003d20:	f7fc fc5c 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003d24:	f89d 2012 	ldrb.w	r2, [sp, #18]
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8003d28:	f012 061b 	ands.w	r6, r2, #27
 8003d2c:	d17c      	bne.n	8003e28 <MFRC522_SelectTag+0x7e8>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003d2e:	2394      	movs	r3, #148	; 0x94
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003d30:	4632      	mov	r2, r6
 8003d32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d36:	4841      	ldr	r0, [pc, #260]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003d38:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003d3c:	f7fc fc4e 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003d40:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d44:	2201      	movs	r2, #1
 8003d46:	4621      	mov	r1, r4
 8003d48:	483d      	ldr	r0, [pc, #244]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003d4a:	f7fc ffd1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003d4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d52:	2201      	movs	r2, #1
 8003d54:	f10d 0112 	add.w	r1, sp, #18
 8003d58:	4839      	ldr	r0, [pc, #228]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003d5a:	f7fd f8df 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d64:	4835      	ldr	r0, [pc, #212]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
 8003d66:	f7fc fc39 	bl	80005dc <HAL_GPIO_WritePin>
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003d6a:	2398      	movs	r3, #152	; 0x98
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003d6c:	4632      	mov	r2, r6
 8003d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d72:	4832      	ldr	r0, [pc, #200]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003d74:	f89d 6012 	ldrb.w	r6, [sp, #18]
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003d78:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003d7c:	f7fc fc2e 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003d80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d84:	2201      	movs	r2, #1
 8003d86:	4621      	mov	r1, r4
 8003d88:	482d      	ldr	r0, [pc, #180]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003d8a:	f7fc ffb1 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003d8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d92:	2201      	movs	r2, #1
 8003d94:	f10d 0112 	add.w	r1, sp, #18
 8003d98:	4829      	ldr	r0, [pc, #164]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003d9a:	f7fd f8bf 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003da4:	4825      	ldr	r0, [pc, #148]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
 8003da6:	f7fc fc19 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003daa:	f89d 8012 	ldrb.w	r8, [sp, #18]
 8003dae:	f005 0501 	and.w	r5, r5, #1
        if (lastBits)
 8003db2:	f018 0807 	ands.w	r8, r8, #7
          *backLen = (n-1)*8 + lastBits;
 8003db6:	bf1a      	itte	ne
 8003db8:	f106 33ff 	addne.w	r3, r6, #4294967295
 8003dbc:	eb08 08c3 	addne.w	r8, r8, r3, lsl #3
          *backLen = n*8;
 8003dc0:	ea4f 08c6 	moveq.w	r8, r6, lsl #3
        if (n == 0)
 8003dc4:	bba6      	cbnz	r6, 8003e30 <MFRC522_SelectTag+0x7f0>
        for (i=0; i<n; i++)
 8003dc6:	2301      	movs	r3, #1
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003dc8:	4f1c      	ldr	r7, [pc, #112]	; (8003e3c <MFRC522_SelectTag+0x7fc>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003dca:	4e1d      	ldr	r6, [pc, #116]	; (8003e40 <MFRC522_SelectTag+0x800>)
 8003dcc:	449b      	add	fp, r3
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003dce:	2392      	movs	r3, #146	; 0x92
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003dd6:	4638      	mov	r0, r7
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003dd8:	f88d 3013 	strb.w	r3, [sp, #19]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003ddc:	f7fc fbfe 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003de0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003de4:	2201      	movs	r2, #1
 8003de6:	4621      	mov	r1, r4
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7fc ff81 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003dee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003df2:	2201      	movs	r2, #1
 8003df4:	f10d 0112 	add.w	r1, sp, #18
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f7fd f88f 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e04:	4638      	mov	r0, r7
 8003e06:	f7fc fbe9 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003e0a:	f89d 3012 	ldrb.w	r3, [sp, #18]
          backData[i] = Read_MFRC522(FIFODataReg);
 8003e0e:	f80a 3b01 	strb.w	r3, [sl], #1
        for (i=0; i<n; i++)
 8003e12:	45da      	cmp	sl, fp
 8003e14:	d1db      	bne.n	8003dce <MFRC522_SelectTag+0x78e>
    buffer[i+2] = *(serNum+i);
  }
  CalulateCRC(buffer, 7, &buffer[7]);		//??
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);

  if ((status == MI_OK) && (recvBits == 0x18))
 8003e16:	b93d      	cbnz	r5, 8003e28 <MFRC522_SelectTag+0x7e8>
 8003e18:	f1b8 0f18 	cmp.w	r8, #24
 8003e1c:	d104      	bne.n	8003e28 <MFRC522_SelectTag+0x7e8>
  {
    size = buffer[0];
 8003e1e:	f89d 0014 	ldrb.w	r0, [sp, #20]
  {
    size = 0;
  }

  return size;
}
 8003e22:	b009      	add	sp, #36	; 0x24
 8003e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size = 0;
 8003e28:	2000      	movs	r0, #0
}
 8003e2a:	b009      	add	sp, #36	; 0x24
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (i=0; i<n; i++)
 8003e30:	2e10      	cmp	r6, #16
 8003e32:	4633      	mov	r3, r6
 8003e34:	bf28      	it	cs
 8003e36:	2310      	movcs	r3, #16
 8003e38:	e7c6      	b.n	8003dc8 <MFRC522_SelectTag+0x788>
 8003e3a:	bf00      	nop
 8003e3c:	40011400 	.word	0x40011400
 8003e40:	20000130 	.word	0x20000130

08003e44 <MFRC522_Halt>:
{
  u_char status;
  uint unLen;
  u_char buff[4];

  buff[0] = PICC_HALT;
 8003e44:	2350      	movs	r3, #80	; 0x50
{
 8003e46:	b510      	push	{r4, lr}
 8003e48:	b082      	sub	sp, #8
  buff[0] = PICC_HALT;
 8003e4a:	ac02      	add	r4, sp, #8
 8003e4c:	f824 3d04 	strh.w	r3, [r4, #-4]!
  buff[1] = 0;
  CalulateCRC(buff, 2, &buff[2]);
 8003e50:	4620      	mov	r0, r4
 8003e52:	f10d 0106 	add.w	r1, sp, #6
 8003e56:	f7fd faf9 	bl	800144c <CalulateCRC.constprop.2>

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	466a      	mov	r2, sp
 8003e60:	f7fd fc60 	bl	8001724 <MFRC522_ToCard.constprop.7>
  //return status;
}
 8003e64:	b002      	add	sp, #8
 8003e66:	bd10      	pop	{r4, pc}

08003e68 <MFRC522_StopCrypto1>:
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003e68:	2390      	movs	r3, #144	; 0x90
//--------------------------------------
void MFRC522_StopCrypto1(void) {
 8003e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003e6c:	2710      	movs	r7, #16
void MFRC522_StopCrypto1(void) {
 8003e6e:	b083      	sub	sp, #12
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003e70:	4c22      	ldr	r4, [pc, #136]	; (8003efc <MFRC522_StopCrypto1+0x94>)
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003e72:	4d23      	ldr	r5, [pc, #140]	; (8003f00 <MFRC522_StopCrypto1+0x98>)
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8003e74:	ae02      	add	r6, sp, #8
 8003e76:	f806 3d01 	strb.w	r3, [r6, #-1]!
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e82:	f7fc fbab 	bl	80005dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f7fc ff2e 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8003e94:	f10d 0106 	add.w	r1, sp, #6
 8003e98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f7fd f83c 	bl	8000f1c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eac:	f7fc fb96 	bl	80005dc <HAL_GPIO_WritePin>
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8003eb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003eb4:	4620      	mov	r0, r4
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8003eb6:	f023 0308 	bic.w	r3, r3, #8
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ec0:	f88d 3006 	strb.w	r3, [sp, #6]
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8003ec4:	f88d 7007 	strb.w	r7, [sp, #7]
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8003ec8:	f7fc fb88 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f7fc ff0b 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8003eda:	f10d 0106 	add.w	r1, sp, #6
 8003ede:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f7fc ff03 	bl	8000cf0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8003eea:	4620      	mov	r0, r4
 8003eec:	2201      	movs	r2, #1
 8003eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ef2:	f7fc fb73 	bl	80005dc <HAL_GPIO_WritePin>
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
} // End PCD_StopCrypto1()
 8003ef6:	b003      	add	sp, #12
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40011400 	.word	0x40011400
 8003f00:	20000130 	.word	0x20000130

08003f04 <DWT_Delay_Init>:
     /* Disable clock cycle counter */
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
     /* Enable clock cycle counter */
     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
     /* Reset the clock cycle counter value */
     DWT->CYCCNT = 0;
 8003f04:	2000      	movs	r0, #0
     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003f06:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <DWT_Delay_Init+0x38>)
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <DWT_Delay_Init+0x3c>)
     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003f0a:	68d1      	ldr	r1, [r2, #12]
 8003f0c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003f10:	60d1      	str	r1, [r2, #12]
     CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003f12:	68d1      	ldr	r1, [r2, #12]
 8003f14:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003f18:	60d1      	str	r1, [r2, #12]
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
     DWT->CYCCNT = 0;
 8003f2a:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8003f2c:	bf00      	nop
    __ASM volatile ("NOP");
 8003f2e:	bf00      	nop
     __ASM volatile ("NOP");
 8003f30:	bf00      	nop
     /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8003f32:	6858      	ldr	r0, [r3, #4]
    }
    else
     {
     return 1; /*clock cycle counter not started*/
     }
    }
 8003f34:	fab0 f080 	clz	r0, r0
 8003f38:	0940      	lsrs	r0, r0, #5
 8003f3a:	4770      	bx	lr
 8003f3c:	e000edf0 	.word	0xe000edf0
 8003f40:	e0001000 	.word	0xe0001000

08003f44 <DWT_Delay_ms>:
//////////
    void	DWT_Delay_ms(volatile uint32_t miliseconds){
 8003f44:	b410      	push	{r4}
    {
    // uint32_t clk_cycle_start = DWT->CYCCNT;
    	DWT->CYCCNT = 0;
     /* Go to number of cycles for system */
     //microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
    microseconds *= (SystemCoreClock / 1000000);
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <DWT_Delay_ms+0x3c>)
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <DWT_Delay_ms+0x40>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	9001      	str	r0, [sp, #4]
 8003f50:	fba2 3003 	umull	r3, r0, r2, r3
    	while(miliseconds > 0){
 8003f54:	9b01      	ldr	r3, [sp, #4]
    	DWT->CYCCNT = 0;
 8003f56:	490c      	ldr	r1, [pc, #48]	; (8003f88 <DWT_Delay_ms+0x44>)
    microseconds *= (SystemCoreClock / 1000000);
 8003f58:	0c80      	lsrs	r0, r0, #18
    	DWT->CYCCNT = 0;
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	b16b      	cbz	r3, 8003f7a <DWT_Delay_ms+0x36>
 8003f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    		miliseconds--;
 8003f62:	9b01      	ldr	r3, [sp, #4]
    microseconds *= (SystemCoreClock / 1000000);
 8003f64:	fb02 f200 	mul.w	r2, r2, r0
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	9301      	str	r3, [sp, #4]
    	DWT->CYCCNT = 0;
 8003f6c:	604c      	str	r4, [r1, #4]
//	DWT->CYCCNT = 0;

     //microseconds = microseconds - 8;
     /* Delay till end */
     //while (((DWT->CYCCNT - clk_cycle_start) + 8) < microseconds);
     while (DWT->CYCCNT < microseconds);
 8003f6e:	684b      	ldr	r3, [r1, #4]
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d3fc      	bcc.n	8003f6e <DWT_Delay_ms+0x2a>
    	while(miliseconds > 0){
 8003f74:	9b01      	ldr	r3, [sp, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f1      	bne.n	8003f5e <DWT_Delay_ms+0x1a>
    		DWT_Delay_us(1000);
    	}
    }
 8003f7a:	b003      	add	sp, #12
 8003f7c:	bc10      	pop	{r4}
 8003f7e:	4770      	bx	lr
 8003f80:	20000008 	.word	0x20000008
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	e0001000 	.word	0xe0001000

08003f8c <lcd_init>:
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
}

void lcd_init(void)
{
 8003f8c:	b510      	push	{r4, lr}
  HAL_Delay(2);
 8003f8e:	2002      	movs	r0, #2
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 8003f90:	4c39      	ldr	r4, [pc, #228]	; (8004078 <lcd_init+0xec>)
  HAL_Delay(2);
 8003f92:	f7fc f98f 	bl	80002b4 <HAL_Delay>
  HAL_Delay(2);
 8003f96:	2002      	movs	r0, #2
 8003f98:	f7fc f98c 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fa4:	f7fc fb1a 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	2200      	movs	r2, #0
 8003fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fb0:	f7fc fb14 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	21ff      	movs	r1, #255	; 0xff
 8003fba:	f7fc fb0f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	213c      	movs	r1, #60	; 0x3c
 8003fc4:	f7fc fb0a 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8003fc8:	4620      	mov	r0, r4
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd0:	f7fc fb04 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fdc:	f7fc fafe 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8003fe0:	2002      	movs	r0, #2
 8003fe2:	f7fc f967 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fee:	f7fc faf5 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ffa:	f7fc faef 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8003ffe:	4620      	mov	r0, r4
 8004000:	2200      	movs	r2, #0
 8004002:	21ff      	movs	r1, #255	; 0xff
 8004004:	f7fc faea 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004008:	4620      	mov	r0, r4
 800400a:	2201      	movs	r2, #1
 800400c:	2106      	movs	r1, #6
 800400e:	f7fc fae5 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8004012:	4620      	mov	r0, r4
 8004014:	2201      	movs	r2, #1
 8004016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800401a:	f7fc fadf 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800401e:	4620      	mov	r0, r4
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004026:	f7fc fad9 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800402a:	2002      	movs	r0, #2
 800402c:	f7fc f942 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 8004030:	4620      	mov	r0, r4
 8004032:	2200      	movs	r2, #0
 8004034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004038:	f7fc fad0 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 800403c:	4620      	mov	r0, r4
 800403e:	2200      	movs	r2, #0
 8004040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004044:	f7fc faca 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8004048:	4620      	mov	r0, r4
 800404a:	2200      	movs	r2, #0
 800404c:	21ff      	movs	r1, #255	; 0xff
 800404e:	f7fc fac5 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004052:	4620      	mov	r0, r4
 8004054:	2201      	movs	r2, #1
 8004056:	210c      	movs	r1, #12
 8004058:	f7fc fac0 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 800405c:	4620      	mov	r0, r4
 800405e:	2201      	movs	r2, #1
 8004060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004064:	f7fc faba 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 8004068:	4620      	mov	r0, r4
//  send_command(0x38);
  send_command(0x3C);
  send_command(0x06);
  send_command(0x0c);
}
 800406a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800406e:	2200      	movs	r2, #0
 8004070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004074:	f7fc bab2 	b.w	80005dc <HAL_GPIO_WritePin>
 8004078:	40011c00 	.word	0x40011c00

0800407c <lcd_puts>:

void lcd_puts(char *str)
{
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4606      	mov	r6, r0
  HAL_Delay(1);
 8004080:	2001      	movs	r0, #1
 8004082:	f7fc f917 	bl	80002b4 <HAL_Delay>
  while(*str != 0)
 8004086:	7835      	ldrb	r5, [r6, #0]
 8004088:	b34d      	cbz	r5, 80040de <lcd_puts+0x62>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 800408a:	4c15      	ldr	r4, [pc, #84]	; (80040e0 <lcd_puts+0x64>)
  HAL_Delay(1);
 800408c:	2001      	movs	r0, #1
 800408e:	f7fc f911 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004092:	2201      	movs	r2, #1
 8004094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004098:	4620      	mov	r0, r4
 800409a:	f7fc fa9f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 800409e:	2200      	movs	r2, #0
 80040a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040a4:	4620      	mov	r0, r4
 80040a6:	f7fc fa99 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	21ff      	movs	r1, #255	; 0xff
 80040ae:	4620      	mov	r0, r4
 80040b0:	f7fc fa94 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 80040b4:	4629      	mov	r1, r5
 80040b6:	2201      	movs	r2, #1
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7fc fa8f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 80040be:	2201      	movs	r2, #1
 80040c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7fc fa89 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 80040ca:	2200      	movs	r2, #0
 80040cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040d0:	4620      	mov	r0, r4
 80040d2:	f7fc fa83 	bl	80005dc <HAL_GPIO_WritePin>
  while(*str != 0)
 80040d6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 80040da:	2d00      	cmp	r5, #0
 80040dc:	d1d6      	bne.n	800408c <lcd_puts+0x10>
  {
	lcd_putchar(*str);
    str++;
  }
}
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	40011c00 	.word	0x40011c00

080040e4 <lcd_puts_long>:
//
void lcd_puts_long(char *str)
{
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	4606      	mov	r6, r0
	uint16_t cntr = 0;
  HAL_Delay(1);
 80040ea:	2001      	movs	r0, #1
 80040ec:	f7fc f8e2 	bl	80002b4 <HAL_Delay>
  }
}
//
void lcd_gotoxy(unsigned char x, unsigned char y)
{
  HAL_Delay(1);
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7fc f8df 	bl	80002b4 <HAL_Delay>
  HAL_Delay(2);
 80040f6:	2002      	movs	r0, #2
 80040f8:	f7fc f8dc 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004102:	48b9      	ldr	r0, [pc, #740]	; (80043e8 <lcd_puts_long+0x304>)
 8004104:	f7fc fa6a 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800410e:	48b6      	ldr	r0, [pc, #728]	; (80043e8 <lcd_puts_long+0x304>)
 8004110:	f7fc fa64 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8004114:	2200      	movs	r2, #0
 8004116:	21ff      	movs	r1, #255	; 0xff
 8004118:	48b3      	ldr	r0, [pc, #716]	; (80043e8 <lcd_puts_long+0x304>)
 800411a:	f7fc fa5f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 800411e:	2201      	movs	r2, #1
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	48b1      	ldr	r0, [pc, #708]	; (80043e8 <lcd_puts_long+0x304>)
 8004124:	f7fc fa5a 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8004128:	2201      	movs	r2, #1
 800412a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800412e:	48ae      	ldr	r0, [pc, #696]	; (80043e8 <lcd_puts_long+0x304>)
 8004130:	f7fc fa54 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413a:	48ab      	ldr	r0, [pc, #684]	; (80043e8 <lcd_puts_long+0x304>)
 800413c:	f7fc fa4e 	bl	80005dc <HAL_GPIO_WritePin>
  while((*str != 0) && (cntr < 16)){
 8004140:	7837      	ldrb	r7, [r6, #0]
 8004142:	b38f      	cbz	r7, 80041a8 <lcd_puts_long+0xc4>
	uint16_t cntr = 0;
 8004144:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004146:	4ca8      	ldr	r4, [pc, #672]	; (80043e8 <lcd_puts_long+0x304>)
 8004148:	e001      	b.n	800414e <lcd_puts_long+0x6a>
  while((*str != 0) && (cntr < 16)){
 800414a:	2d10      	cmp	r5, #16
 800414c:	d02e      	beq.n	80041ac <lcd_puts_long+0xc8>
  HAL_Delay(1);
 800414e:	2001      	movs	r0, #1
 8004150:	f7fc f8b0 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004154:	2201      	movs	r2, #1
 8004156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800415a:	4620      	mov	r0, r4
 800415c:	f7fc fa3e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004166:	4620      	mov	r0, r4
 8004168:	f7fc fa38 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 800416c:	2200      	movs	r2, #0
 800416e:	21ff      	movs	r1, #255	; 0xff
 8004170:	4620      	mov	r0, r4
 8004172:	f7fc fa33 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004176:	4639      	mov	r1, r7
 8004178:	2201      	movs	r2, #1
 800417a:	4620      	mov	r0, r4
 800417c:	f7fc fa2e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8004180:	2201      	movs	r2, #1
 8004182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004186:	4620      	mov	r0, r4
 8004188:	f7fc fa28 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800418c:	2200      	movs	r2, #0
 800418e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004192:	4620      	mov	r0, r4
 8004194:	f7fc fa22 	bl	80005dc <HAL_GPIO_WritePin>
  while((*str != 0) && (cntr < 16)){
 8004198:	f816 7f01 	ldrb.w	r7, [r6, #1]!
	cntr++;
 800419c:	3501      	adds	r5, #1
 800419e:	b2ad      	uxth	r5, r5
  while((*str != 0) && (cntr < 16)){
 80041a0:	2f00      	cmp	r7, #0
 80041a2:	d1d2      	bne.n	800414a <lcd_puts_long+0x66>
  if(cntr >= 16){
 80041a4:	2d10      	cmp	r5, #16
 80041a6:	d001      	beq.n	80041ac <lcd_puts_long+0xc8>
}
 80041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_Delay(1);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fc f881 	bl	80002b4 <HAL_Delay>
  HAL_Delay(2);
 80041b2:	2002      	movs	r0, #2
 80041b4:	f7fc f87e 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 80041b8:	2200      	movs	r2, #0
 80041ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041be:	488a      	ldr	r0, [pc, #552]	; (80043e8 <lcd_puts_long+0x304>)
 80041c0:	f7fc fa0c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041ca:	4887      	ldr	r0, [pc, #540]	; (80043e8 <lcd_puts_long+0x304>)
 80041cc:	f7fc fa06 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	21ff      	movs	r1, #255	; 0xff
 80041d4:	4884      	ldr	r0, [pc, #528]	; (80043e8 <lcd_puts_long+0x304>)
 80041d6:	f7fc fa01 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 80041da:	2201      	movs	r2, #1
 80041dc:	21c0      	movs	r1, #192	; 0xc0
 80041de:	4882      	ldr	r0, [pc, #520]	; (80043e8 <lcd_puts_long+0x304>)
 80041e0:	f7fc f9fc 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 80041e4:	2201      	movs	r2, #1
 80041e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041ea:	487f      	ldr	r0, [pc, #508]	; (80043e8 <lcd_puts_long+0x304>)
 80041ec:	f7fc f9f6 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f6:	487c      	ldr	r0, [pc, #496]	; (80043e8 <lcd_puts_long+0x304>)
 80041f8:	f7fc f9f0 	bl	80005dc <HAL_GPIO_WritePin>
	  while((*str != 0) && (cntr < 32)){
 80041fc:	7837      	ldrb	r7, [r6, #0]
 80041fe:	2f00      	cmp	r7, #0
 8004200:	d0d2      	beq.n	80041a8 <lcd_puts_long+0xc4>
 8004202:	2510      	movs	r5, #16
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004204:	4c78      	ldr	r4, [pc, #480]	; (80043e8 <lcd_puts_long+0x304>)
 8004206:	e001      	b.n	800420c <lcd_puts_long+0x128>
	  while((*str != 0) && (cntr < 32)){
 8004208:	2d20      	cmp	r5, #32
 800420a:	d02c      	beq.n	8004266 <lcd_puts_long+0x182>
  HAL_Delay(1);
 800420c:	2001      	movs	r0, #1
 800420e:	f7fc f851 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004212:	2201      	movs	r2, #1
 8004214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004218:	4620      	mov	r0, r4
 800421a:	f7fc f9df 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004224:	4620      	mov	r0, r4
 8004226:	f7fc f9d9 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 800422a:	2200      	movs	r2, #0
 800422c:	21ff      	movs	r1, #255	; 0xff
 800422e:	4620      	mov	r0, r4
 8004230:	f7fc f9d4 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004234:	4639      	mov	r1, r7
 8004236:	2201      	movs	r2, #1
 8004238:	4620      	mov	r0, r4
 800423a:	f7fc f9cf 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 800423e:	2201      	movs	r2, #1
 8004240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004244:	4620      	mov	r0, r4
 8004246:	f7fc f9c9 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800424a:	2200      	movs	r2, #0
 800424c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004250:	4620      	mov	r0, r4
 8004252:	f7fc f9c3 	bl	80005dc <HAL_GPIO_WritePin>
	  while((*str != 0) && (cntr < 32)){
 8004256:	f816 7f01 	ldrb.w	r7, [r6, #1]!
		cntr++;
 800425a:	3501      	adds	r5, #1
 800425c:	b2ad      	uxth	r5, r5
	  while((*str != 0) && (cntr < 32)){
 800425e:	2f00      	cmp	r7, #0
 8004260:	d1d2      	bne.n	8004208 <lcd_puts_long+0x124>
  if(cntr >= 32){
 8004262:	2d20      	cmp	r5, #32
 8004264:	d1a0      	bne.n	80041a8 <lcd_puts_long+0xc4>
  HAL_Delay(1);
 8004266:	2001      	movs	r0, #1
 8004268:	f7fc f824 	bl	80002b4 <HAL_Delay>
  HAL_Delay(2);
 800426c:	2002      	movs	r0, #2
 800426e:	f7fc f821 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 8004272:	2200      	movs	r2, #0
 8004274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004278:	485b      	ldr	r0, [pc, #364]	; (80043e8 <lcd_puts_long+0x304>)
 800427a:	f7fc f9af 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 800427e:	2200      	movs	r2, #0
 8004280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004284:	4858      	ldr	r0, [pc, #352]	; (80043e8 <lcd_puts_long+0x304>)
 8004286:	f7fc f9a9 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 800428a:	2200      	movs	r2, #0
 800428c:	21ff      	movs	r1, #255	; 0xff
 800428e:	4856      	ldr	r0, [pc, #344]	; (80043e8 <lcd_puts_long+0x304>)
 8004290:	f7fc f9a4 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004294:	2201      	movs	r2, #1
 8004296:	2190      	movs	r1, #144	; 0x90
 8004298:	4853      	ldr	r0, [pc, #332]	; (80043e8 <lcd_puts_long+0x304>)
 800429a:	f7fc f99f 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042a4:	4850      	ldr	r0, [pc, #320]	; (80043e8 <lcd_puts_long+0x304>)
 80042a6:	f7fc f999 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 80042aa:	2200      	movs	r2, #0
 80042ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042b0:	484d      	ldr	r0, [pc, #308]	; (80043e8 <lcd_puts_long+0x304>)
 80042b2:	f7fc f993 	bl	80005dc <HAL_GPIO_WritePin>
	  while((*str != 0) && (cntr < 48)){
 80042b6:	f896 8000 	ldrb.w	r8, [r6]
 80042ba:	f1b8 0f00 	cmp.w	r8, #0
 80042be:	f43f af73 	beq.w	80041a8 <lcd_puts_long+0xc4>
 80042c2:	2720      	movs	r7, #32
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 80042c4:	4c48      	ldr	r4, [pc, #288]	; (80043e8 <lcd_puts_long+0x304>)
 80042c6:	e002      	b.n	80042ce <lcd_puts_long+0x1ea>
	  while((*str != 0) && (cntr < 48)){
 80042c8:	2f30      	cmp	r7, #48	; 0x30
 80042ca:	d030      	beq.n	800432e <lcd_puts_long+0x24a>
 80042cc:	462e      	mov	r6, r5
  HAL_Delay(1);
 80042ce:	2001      	movs	r0, #1
 80042d0:	f7fb fff0 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 80042d4:	2201      	movs	r2, #1
 80042d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042da:	4620      	mov	r0, r4
 80042dc:	f7fc f97e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042e6:	4620      	mov	r0, r4
 80042e8:	f7fc f978 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 80042ec:	2200      	movs	r2, #0
 80042ee:	21ff      	movs	r1, #255	; 0xff
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fc f973 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 80042f6:	4641      	mov	r1, r8
 80042f8:	2201      	movs	r2, #1
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7fc f96e 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8004300:	2201      	movs	r2, #1
 8004302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004306:	4620      	mov	r0, r4
 8004308:	f7fc f968 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800430c:	2200      	movs	r2, #0
 800430e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004312:	4620      	mov	r0, r4
 8004314:	f7fc f962 	bl	80005dc <HAL_GPIO_WritePin>
	  while((*str != 0) && (cntr < 48)){
 8004318:	f896 8001 	ldrb.w	r8, [r6, #1]
		  cntr++;
 800431c:	3701      	adds	r7, #1
 800431e:	b2bf      	uxth	r7, r7
		  str++;
 8004320:	1c75      	adds	r5, r6, #1
	  while((*str != 0) && (cntr < 48)){
 8004322:	f1b8 0f00 	cmp.w	r8, #0
 8004326:	d1cf      	bne.n	80042c8 <lcd_puts_long+0x1e4>
  if(cntr >= 48){
 8004328:	2f30      	cmp	r7, #48	; 0x30
 800432a:	f47f af3d 	bne.w	80041a8 <lcd_puts_long+0xc4>
  HAL_Delay(1);
 800432e:	2001      	movs	r0, #1
 8004330:	f7fb ffc0 	bl	80002b4 <HAL_Delay>
  HAL_Delay(2);
 8004334:	2002      	movs	r0, #2
 8004336:	f7fb ffbd 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 800433a:	2200      	movs	r2, #0
 800433c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004340:	4829      	ldr	r0, [pc, #164]	; (80043e8 <lcd_puts_long+0x304>)
 8004342:	f7fc f94b 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004346:	2200      	movs	r2, #0
 8004348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800434c:	4826      	ldr	r0, [pc, #152]	; (80043e8 <lcd_puts_long+0x304>)
 800434e:	f7fc f945 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8004352:	2200      	movs	r2, #0
 8004354:	21ff      	movs	r1, #255	; 0xff
 8004356:	4824      	ldr	r0, [pc, #144]	; (80043e8 <lcd_puts_long+0x304>)
 8004358:	f7fc f940 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 800435c:	2201      	movs	r2, #1
 800435e:	21d0      	movs	r1, #208	; 0xd0
 8004360:	4821      	ldr	r0, [pc, #132]	; (80043e8 <lcd_puts_long+0x304>)
 8004362:	f7fc f93b 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8004366:	2201      	movs	r2, #1
 8004368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800436c:	481e      	ldr	r0, [pc, #120]	; (80043e8 <lcd_puts_long+0x304>)
 800436e:	f7fc f935 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 8004372:	2200      	movs	r2, #0
 8004374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004378:	481b      	ldr	r0, [pc, #108]	; (80043e8 <lcd_puts_long+0x304>)
 800437a:	f7fc f92f 	bl	80005dc <HAL_GPIO_WritePin>
	  while((*str != 0) && (cntr < 64)){
 800437e:	782f      	ldrb	r7, [r5, #0]
 8004380:	2f00      	cmp	r7, #0
 8004382:	f43f af11 	beq.w	80041a8 <lcd_puts_long+0xc4>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004386:	4c18      	ldr	r4, [pc, #96]	; (80043e8 <lcd_puts_long+0x304>)
 8004388:	3611      	adds	r6, #17
 800438a:	e002      	b.n	8004392 <lcd_puts_long+0x2ae>
	  while((*str != 0) && (cntr < 64)){
 800438c:	42b5      	cmp	r5, r6
 800438e:	f43f af0b 	beq.w	80041a8 <lcd_puts_long+0xc4>
  HAL_Delay(1);
 8004392:	2001      	movs	r0, #1
 8004394:	f7fb ff8e 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_SET);
 8004398:	2201      	movs	r2, #1
 800439a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800439e:	4620      	mov	r0, r4
 80043a0:	f7fc f91c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7fc f916 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 80043b0:	2200      	movs	r2, #0
 80043b2:	21ff      	movs	r1, #255	; 0xff
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7fc f911 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 80043ba:	4639      	mov	r1, r7
 80043bc:	2201      	movs	r2, #1
 80043be:	4620      	mov	r0, r4
 80043c0:	f7fc f90c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 80043c4:	2201      	movs	r2, #1
 80043c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ca:	4620      	mov	r0, r4
 80043cc:	f7fc f906 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 80043d0:	2200      	movs	r2, #0
 80043d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7fc f900 	bl	80005dc <HAL_GPIO_WritePin>
	  while((*str != 0) && (cntr < 64)){
 80043dc:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	d1d3      	bne.n	800438c <lcd_puts_long+0x2a8>
}
 80043e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e8:	40011c00 	.word	0x40011c00

080043ec <lcd_gotoxy>:
{
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	460d      	mov	r5, r1
 80043f0:	4604      	mov	r4, r0
  HAL_Delay(1);
 80043f2:	2001      	movs	r0, #1
 80043f4:	f7fb ff5e 	bl	80002b4 <HAL_Delay>
 
    switch(y){
 80043f8:	2d03      	cmp	r5, #3
 80043fa:	d871      	bhi.n	80044e0 <lcd_gotoxy+0xf4>
 80043fc:	e8df f005 	tbb	[pc, r5]
 8004400:	022b4259 	.word	0x022b4259
  HAL_Delay(2);
 8004404:	2002      	movs	r0, #2
 8004406:	f7fb ff55 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 800440a:	2200      	movs	r2, #0
 800440c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004410:	4834      	ldr	r0, [pc, #208]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004412:	f7fc f8e3 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004416:	2200      	movs	r2, #0
 8004418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800441c:	4831      	ldr	r0, [pc, #196]	; (80044e4 <lcd_gotoxy+0xf8>)
 800441e:	f7fc f8dd 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8004422:	21ff      	movs	r1, #255	; 0xff
 8004424:	2200      	movs	r2, #0
 8004426:	482f      	ldr	r0, [pc, #188]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004428:	f7fc f8d8 	bl	80005dc <HAL_GPIO_WritePin>
      break;
    case 2:
      send_command( 0x90 + x );
      break;
    case 3:
      send_command( 0xD0 + x );
 800442c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004430:	b2c9      	uxtb	r1, r1
 8004432:	2201      	movs	r2, #1
 8004434:	482b      	ldr	r0, [pc, #172]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004436:	f7fc f8d1 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 800443a:	2201      	movs	r2, #1
 800443c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004440:	4828      	ldr	r0, [pc, #160]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004442:	f7fc f8cb 	bl	80005dc <HAL_GPIO_WritePin>
  }
}
 8004446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800444a:	2200      	movs	r2, #0
 800444c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004450:	4824      	ldr	r0, [pc, #144]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004452:	f7fc b8c3 	b.w	80005dc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8004456:	2002      	movs	r0, #2
 8004458:	f7fb ff2c 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 800445c:	2200      	movs	r2, #0
 800445e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004462:	4820      	ldr	r0, [pc, #128]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004464:	f7fc f8ba 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004468:	2200      	movs	r2, #0
 800446a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800446e:	481d      	ldr	r0, [pc, #116]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004470:	f7fc f8b4 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8004474:	21ff      	movs	r1, #255	; 0xff
 8004476:	2200      	movs	r2, #0
 8004478:	481a      	ldr	r0, [pc, #104]	; (80044e4 <lcd_gotoxy+0xf8>)
 800447a:	f7fc f8af 	bl	80005dc <HAL_GPIO_WritePin>
      send_command( 0x90 + x );
 800447e:	f1a4 0170 	sub.w	r1, r4, #112	; 0x70
 8004482:	e7d5      	b.n	8004430 <lcd_gotoxy+0x44>
  HAL_Delay(2);
 8004484:	2002      	movs	r0, #2
 8004486:	f7fb ff15 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 800448a:	2200      	movs	r2, #0
 800448c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004490:	4814      	ldr	r0, [pc, #80]	; (80044e4 <lcd_gotoxy+0xf8>)
 8004492:	f7fc f8a3 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004496:	2200      	movs	r2, #0
 8004498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800449c:	4811      	ldr	r0, [pc, #68]	; (80044e4 <lcd_gotoxy+0xf8>)
 800449e:	f7fc f89d 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 80044a2:	21ff      	movs	r1, #255	; 0xff
 80044a4:	2200      	movs	r2, #0
 80044a6:	480f      	ldr	r0, [pc, #60]	; (80044e4 <lcd_gotoxy+0xf8>)
 80044a8:	f7fc f898 	bl	80005dc <HAL_GPIO_WritePin>
      send_command( 0xC0 + x );
 80044ac:	f1a4 0140 	sub.w	r1, r4, #64	; 0x40
 80044b0:	e7be      	b.n	8004430 <lcd_gotoxy+0x44>
  HAL_Delay(2);
 80044b2:	2002      	movs	r0, #2
 80044b4:	f7fb fefe 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044be:	4809      	ldr	r0, [pc, #36]	; (80044e4 <lcd_gotoxy+0xf8>)
 80044c0:	f7fc f88c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044ca:	4806      	ldr	r0, [pc, #24]	; (80044e4 <lcd_gotoxy+0xf8>)
 80044cc:	f7fc f886 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 80044d0:	21ff      	movs	r1, #255	; 0xff
 80044d2:	2200      	movs	r2, #0
 80044d4:	4803      	ldr	r0, [pc, #12]	; (80044e4 <lcd_gotoxy+0xf8>)
 80044d6:	f7fc f881 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 80044da:	f084 0180 	eor.w	r1, r4, #128	; 0x80
 80044de:	e7a8      	b.n	8004432 <lcd_gotoxy+0x46>
}
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
 80044e2:	bf00      	nop
 80044e4:	40011c00 	.word	0x40011c00

080044e8 <lcd_clear>:

void lcd_clear(void)
{
 80044e8:	b510      	push	{r4, lr}
  HAL_Delay(1);
 80044ea:	2001      	movs	r0, #1
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 80044ec:	4c27      	ldr	r4, [pc, #156]	; (800458c <lcd_clear+0xa4>)
  HAL_Delay(1);
 80044ee:	f7fb fee1 	bl	80002b4 <HAL_Delay>
  HAL_Delay(2);
 80044f2:	2002      	movs	r0, #2
 80044f4:	f7fb fede 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 80044f8:	4620      	mov	r0, r4
 80044fa:	2200      	movs	r2, #0
 80044fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004500:	f7fc f86c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 8004504:	4620      	mov	r0, r4
 8004506:	2200      	movs	r2, #0
 8004508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800450c:	f7fc f866 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 8004510:	4620      	mov	r0, r4
 8004512:	2200      	movs	r2, #0
 8004514:	21ff      	movs	r1, #255	; 0xff
 8004516:	f7fc f861 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 800451a:	2201      	movs	r2, #1
 800451c:	4620      	mov	r0, r4
 800451e:	4611      	mov	r1, r2
 8004520:	f7fc f85c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 8004524:	4620      	mov	r0, r4
 8004526:	2201      	movs	r2, #1
 8004528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800452c:	f7fc f856 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 8004530:	4620      	mov	r0, r4
 8004532:	2200      	movs	r2, #0
 8004534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004538:	f7fc f850 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800453c:	2002      	movs	r0, #2
 800453e:	f7fb feb9 	bl	80002b4 <HAL_Delay>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RS_PIN),GPIO_PIN_RESET);
 8004542:	4620      	mov	r0, r4
 8004544:	2200      	movs	r2, #0
 8004546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800454a:	f7fc f847 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<RW_PIN),GPIO_PIN_RESET);
 800454e:	4620      	mov	r0, r4
 8004550:	2200      	movs	r2, #0
 8004552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004556:	f7fc f841 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(0xFF<<D0_PIN_Start),GPIO_PIN_RESET);
 800455a:	4620      	mov	r0, r4
 800455c:	2200      	movs	r2, #0
 800455e:	21ff      	movs	r1, #255	; 0xff
 8004560:	f7fc f83c 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DATA_PORT,(data<<D0_PIN_Start),GPIO_PIN_SET);
 8004564:	4620      	mov	r0, r4
 8004566:	2201      	movs	r2, #1
 8004568:	2102      	movs	r1, #2
 800456a:	f7fc f837 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_SET);
 800456e:	4620      	mov	r0, r4
 8004570:	2201      	movs	r2, #1
 8004572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004576:	f7fc f831 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 800457a:	4620      	mov	r0, r4
  send_command(0x01);
  send_command(0x02);
}
 800457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(CTRL_PORT,(1<<EN_PIN),GPIO_PIN_RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004586:	f7fc b829 	b.w	80005dc <HAL_GPIO_WritePin>
 800458a:	bf00      	nop
 800458c:	40011c00 	.word	0x40011c00

08004590 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004590:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
{
 8004594:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004596:	2301      	movs	r3, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004598:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800459a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800459c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045a0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
{
 80045a4:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80045a6:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045a8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045aa:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045ae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045b0:	e9cd 5113 	strd	r5, r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045b4:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045b6:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045b8:	9401      	str	r4, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045ba:	9406      	str	r4, [sp, #24]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045bc:	940f      	str	r4, [sp, #60]	; 0x3c
 80045be:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045c2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80045c6:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045ca:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80045ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045d2:	f7fc f807 	bl	80005e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d6:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045dc:	4629      	mov	r1, r5
 80045de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045e0:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045e4:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045e8:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80045ea:	f7fc f9f3 	bl	80009d4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045f2:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80045f4:	9506      	str	r5, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80045f6:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045f8:	f7fc fab8 	bl	8000b6c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80045fc:	b017      	add	sp, #92	; 0x5c
 80045fe:	bd30      	pop	{r4, r5, pc}

08004600 <main>:
{
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004604:	2400      	movs	r4, #0
{
 8004606:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 8004608:	f7fb fe30 	bl	800026c <HAL_Init>
  SystemClock_Config();
 800460c:	f7ff ffc0 	bl	8004590 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8004614:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004618:	4bc3      	ldr	r3, [pc, #780]	; (8004928 <main+0x328>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800461a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800461c:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : KpadRow1_Pin KpadRow2_Pin */
  GPIO_InitStruct.Pin = KpadRow1_Pin|KpadRow2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800461e:	f04f 0811 	mov.w	r8, #17
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004622:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004626:	6199      	str	r1, [r3, #24]
 8004628:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800462a:	f240 71ff 	movw	r1, #2047	; 0x7ff
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800462e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004632:	9005      	str	r0, [sp, #20]
 8004634:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004636:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004638:	48bc      	ldr	r0, [pc, #752]	; (800492c <main+0x32c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800463a:	f045 0508 	orr.w	r5, r5, #8
 800463e:	619d      	str	r5, [r3, #24]
 8004640:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004642:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004644:	f006 0608 	and.w	r6, r6, #8
 8004648:	9606      	str	r6, [sp, #24]
 800464a:	9e06      	ldr	r6, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800464c:	699f      	ldr	r7, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464e:	2602      	movs	r6, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004650:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8004654:	619f      	str	r7, [r3, #24]
 8004656:	699f      	ldr	r7, [r3, #24]
 8004658:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800465c:	9707      	str	r7, [sp, #28]
 800465e:	9f07      	ldr	r7, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004660:	699f      	ldr	r7, [r3, #24]
 8004662:	f047 0720 	orr.w	r7, r7, #32
 8004666:	619f      	str	r7, [r3, #24]
 8004668:	699f      	ldr	r7, [r3, #24]
 800466a:	f007 0720 	and.w	r7, r7, #32
 800466e:	9708      	str	r7, [sp, #32]
 8004670:	9f08      	ldr	r7, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004672:	699f      	ldr	r7, [r3, #24]
 8004674:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8004678:	619f      	str	r7, [r3, #24]
 800467a:	699f      	ldr	r7, [r3, #24]
 800467c:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8004680:	9709      	str	r7, [sp, #36]	; 0x24
 8004682:	9f09      	ldr	r7, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004684:	699f      	ldr	r7, [r3, #24]
 8004686:	f047 0710 	orr.w	r7, r7, #16
 800468a:	619f      	str	r7, [r3, #24]
 800468c:	699f      	ldr	r7, [r3, #24]
 800468e:	f007 0710 	and.w	r7, r7, #16
 8004692:	970a      	str	r7, [sp, #40]	; 0x28
 8004694:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004696:	699f      	ldr	r7, [r3, #24]
 8004698:	f047 0704 	orr.w	r7, r7, #4
 800469c:	619f      	str	r7, [r3, #24]
 800469e:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046a0:	2703      	movs	r7, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80046aa:	f7fb ff97 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_RESET);
 80046ae:	4622      	mov	r2, r4
 80046b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046b4:	489e      	ldr	r0, [pc, #632]	; (8004930 <main+0x330>)
 80046b6:	f7fb ff91 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RC522_Rst_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 80046ba:	4622      	mov	r2, r4
 80046bc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80046c0:	489c      	ldr	r0, [pc, #624]	; (8004934 <main+0x334>)
 80046c2:	f7fb ff8b 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, KpadRow1_Pin|KpadRow2_Pin, GPIO_PIN_SET);
 80046c6:	462a      	mov	r2, r5
 80046c8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80046cc:	4899      	ldr	r0, [pc, #612]	; (8004934 <main+0x334>)
 80046ce:	f7fb ff85 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, KpadRow3_Pin|KpadRow4_Pin, GPIO_PIN_SET);
 80046d2:	462a      	mov	r2, r5
 80046d4:	210c      	movs	r1, #12
 80046d6:	4898      	ldr	r0, [pc, #608]	; (8004938 <main+0x338>)
 80046d8:	f7fb ff80 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80046dc:	4622      	mov	r2, r4
 80046de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046e2:	4895      	ldr	r0, [pc, #596]	; (8004938 <main+0x338>)
 80046e4:	f7fb ff7a 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80046e8:	4622      	mov	r2, r4
 80046ea:	2140      	movs	r1, #64	; 0x40
 80046ec:	4893      	ldr	r0, [pc, #588]	; (800493c <main+0x33c>)
 80046ee:	f7fb ff75 	bl	80005dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80046f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046f6:	a913      	add	r1, sp, #76	; 0x4c
 80046f8:	488c      	ldr	r0, [pc, #560]	; (800492c <main+0x32c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046fa:	e9cd 3513 	strd	r3, r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fe:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004702:	f7fb fe49 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_RST_Pin;
 8004706:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(SIM_RST_GPIO_Port, &GPIO_InitStruct);
 800470a:	a913      	add	r1, sp, #76	; 0x4c
 800470c:	4888      	ldr	r0, [pc, #544]	; (8004930 <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = SIM_RST_Pin;
 8004714:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(SIM_RST_GPIO_Port, &GPIO_InitStruct);
 8004716:	f7fb fe3f 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RC522_Rst_Pin|RC522_CS_Pin;
 800471a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800471e:	a913      	add	r1, sp, #76	; 0x4c
 8004720:	4884      	ldr	r0, [pc, #528]	; (8004934 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004726:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = RC522_Rst_Pin|RC522_CS_Pin;
 8004728:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800472a:	f7fb fe35 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;
 800472e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004732:	a913      	add	r1, sp, #76	; 0x4c
 8004734:	487f      	ldr	r0, [pc, #508]	; (8004934 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004736:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;
 800473a:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800473c:	f7fb fe2c 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KpadRow1_Pin|KpadRow2_Pin;
 8004740:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004744:	a913      	add	r1, sp, #76	; 0x4c
 8004746:	487b      	ldr	r0, [pc, #492]	; (8004934 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004748:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800474a:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800474e:	9716      	str	r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004750:	f7fb fe22 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pins : KpadRow3_Pin KpadRow4_Pin */
  GPIO_InitStruct.Pin = KpadRow3_Pin|KpadRow4_Pin;
 8004754:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004756:	a913      	add	r1, sp, #76	; 0x4c
 8004758:	4877      	ldr	r0, [pc, #476]	; (8004938 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800475a:	e9cd 8514 	strd	r8, r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800475e:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = KpadRow3_Pin|KpadRow4_Pin;
 8004760:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004762:	f7fb fe19 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pins : KpadCol1_Pin KpadCol2_Pin KpadCol3_Pin KpadCol4_Pin */
  GPIO_InitStruct.Pin = KpadCol1_Pin|KpadCol2_Pin|KpadCol3_Pin|KpadCol4_Pin;
 8004766:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004768:	f44f 7780 	mov.w	r7, #256	; 0x100
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800476c:	a913      	add	r1, sp, #76	; 0x4c
 800476e:	4872      	ldr	r0, [pc, #456]	; (8004938 <main+0x338>)
  GPIO_InitStruct.Pin = KpadCol1_Pin|KpadCol2_Pin|KpadCol3_Pin|KpadCol4_Pin;
 8004770:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004772:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004776:	f7fb fe0f 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800477a:	a913      	add	r1, sp, #76	; 0x4c
 800477c:	486e      	ldr	r0, [pc, #440]	; (8004938 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004782:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LED1_Pin;
 8004784:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004786:	f7fb fe07 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800478a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800478c:	a913      	add	r1, sp, #76	; 0x4c
 800478e:	486b      	ldr	r0, [pc, #428]	; (800493c <main+0x33c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004790:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	e9cd 5414 	strd	r5, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LED2_Pin;
 8004796:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8004798:	f7fb fdfe 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pins : DipSw5_Pin DipSw4_Pin DipSw3_Pin */
  GPIO_InitStruct.Pin = DipSw5_Pin|DipSw4_Pin|DipSw3_Pin;
 800479c:	f44f 7360 	mov.w	r3, #896	; 0x380
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a0:	a913      	add	r1, sp, #76	; 0x4c
 80047a2:	4866      	ldr	r0, [pc, #408]	; (800493c <main+0x33c>)
  GPIO_InitStruct.Pin = DipSw5_Pin|DipSw4_Pin|DipSw3_Pin;
 80047a4:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047a6:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047aa:	f7fb fdf5 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pin : DipSw2_Pin */
  GPIO_InitStruct.Pin = DipSw2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DipSw2_GPIO_Port, &GPIO_InitStruct);
 80047ae:	a913      	add	r1, sp, #76	; 0x4c
 80047b0:	4863      	ldr	r0, [pc, #396]	; (8004940 <main+0x340>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b2:	e9cd 7413 	strd	r7, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047b6:	9515      	str	r5, [sp, #84]	; 0x54
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80047b8:	f44f 7682 	mov.w	r6, #260	; 0x104
  HAL_GPIO_Init(DipSw2_GPIO_Port, &GPIO_InitStruct);
 80047bc:	f7fb fdec 	bl	8000398 <HAL_GPIO_Init>
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80047c0:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80047c4:	2110      	movs	r1, #16
  hspi2.Init.CRCPolynomial = 10;
 80047c6:	220a      	movs	r2, #10
  hspi2.Instance = SPI2;
 80047c8:	4b5e      	ldr	r3, [pc, #376]	; (8004944 <main+0x344>)
 80047ca:	4f5f      	ldr	r7, [pc, #380]	; (8004948 <main+0x348>)
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80047cc:	4618      	mov	r0, r3
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80047ce:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047d2:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80047d6:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047da:	629c      	str	r4, [r3, #40]	; 0x28
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80047dc:	e9c3 7600 	strd	r7, r6, [r3]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80047e0:	e9c3 5106 	strd	r5, r1, [r3, #24]
  hspi2.Init.CRCPolynomial = 10;
 80047e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80047e6:	f7fc fa43 	bl	8000c70 <HAL_SPI_Init>
  while(DWT_Delay_Init());
 80047ea:	f7ff fb8b 	bl	8003f04 <DWT_Delay_Init>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1fb      	bne.n	80047ea <main+0x1ea>
 80047f2:	4605      	mov	r5, r0
  lcd_init();
 80047f4:	f7ff fbca 	bl	8003f8c <lcd_init>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80047f8:	462a      	mov	r2, r5
 80047fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047fe:	484e      	ldr	r0, [pc, #312]	; (8004938 <main+0x338>)
 8004800:	f7fb feec 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8004804:	462a      	mov	r2, r5
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	484c      	ldr	r0, [pc, #304]	; (800493c <main+0x33c>)
 800480a:	f7fb fee7 	bl	80005dc <HAL_GPIO_WritePin>
 800480e:	f04f 3642 	mov.w	r6, #1111638594	; 0x42424242
  lcd_clear();
 8004812:	f7ff fe69 	bl	80044e8 <lcd_clear>
 8004816:	f04f 3443 	mov.w	r4, #1128481603	; 0x43434343
 800481a:	f04f 3144 	mov.w	r1, #1145324612	; 0x44444444
 800481e:	f04f 3241 	mov.w	r2, #1094795585	; 0x41414141
 8004822:	4b4a      	ldr	r3, [pc, #296]	; (800494c <main+0x34c>)
  lcd_puts_long(tmp_str);
 8004824:	4618      	mov	r0, r3
 8004826:	e9c3 6605 	strd	r6, r6, [r3, #20]
 800482a:	61de      	str	r6, [r3, #28]
 800482c:	611e      	str	r6, [r3, #16]
 800482e:	e9c3 4409 	strd	r4, r4, [r3, #36]	; 0x24
 8004832:	62dc      	str	r4, [r3, #44]	; 0x2c
 8004834:	621c      	str	r4, [r3, #32]
 8004836:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
 800483a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800483c:	6319      	str	r1, [r3, #48]	; 0x30
 800483e:	e9c3 2200 	strd	r2, r2, [r3]
 8004842:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8004846:	f7ff fc4d 	bl	80040e4 <lcd_puts_long>
  DWT_Delay_ms(2000);
 800484a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800484e:	f7ff fb79 	bl	8003f44 <DWT_Delay_ms>
  lcd_clear();
 8004852:	f7ff fe49 	bl	80044e8 <lcd_clear>
  DWT_Delay_ms(1000);
 8004856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800485a:	f7ff fb73 	bl	8003f44 <DWT_Delay_ms>
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 800485e:	2201      	movs	r2, #1
 8004860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004864:	4833      	ldr	r0, [pc, #204]	; (8004934 <main+0x334>)
 8004866:	f7fb feb9 	bl	80005dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800486a:	2064      	movs	r0, #100	; 0x64
 800486c:	f7fb fd22 	bl	80002b4 <HAL_Delay>
  MFRC522_Init();
 8004870:	f7fd fa24 	bl	8001cbc <MFRC522_Init>
  DWT_Delay_ms(1000);
 8004874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004878:	f7ff fb64 	bl	8003f44 <DWT_Delay_ms>
  status = Read_MFRC522(VersionReg);
 800487c:	2037      	movs	r0, #55	; 0x37
 800487e:	f7fd f9ed 	bl	8001c5c <Read_MFRC522>
 8004882:	4606      	mov	r6, r0
  sprintf(str1,"Running RC522");
 8004884:	4b32      	ldr	r3, [pc, #200]	; (8004950 <main+0x350>)
 8004886:	4c33      	ldr	r4, [pc, #204]	; (8004954 <main+0x354>)
 8004888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800488a:	c407      	stmia	r4!, {r0, r1, r2}
  sprintf(str2,"ver:%x", status);
 800488c:	4632      	mov	r2, r6
  sprintf(str1,"Running RC522");
 800488e:	8023      	strh	r3, [r4, #0]
  sprintf(str2,"ver:%x", status);
 8004890:	4931      	ldr	r1, [pc, #196]	; (8004958 <main+0x358>)
 8004892:	4832      	ldr	r0, [pc, #200]	; (800495c <main+0x35c>)
 8004894:	f000 fb44 	bl	8004f20 <siprintf>
  lcd_clear();
 8004898:	f7ff fe26 	bl	80044e8 <lcd_clear>
  lcd_gotoxy(0,0);
 800489c:	4629      	mov	r1, r5
 800489e:	4628      	mov	r0, r5
 80048a0:	f7ff fda4 	bl	80043ec <lcd_gotoxy>
  lcd_puts(str1);
 80048a4:	f1a4 000c 	sub.w	r0, r4, #12
 80048a8:	f7ff fbe8 	bl	800407c <lcd_puts>
  lcd_gotoxy(0,1);
 80048ac:	4628      	mov	r0, r5
 80048ae:	2101      	movs	r1, #1
 80048b0:	f7ff fd9c 	bl	80043ec <lcd_gotoxy>
  lcd_puts(str2);
 80048b4:	4829      	ldr	r0, [pc, #164]	; (800495c <main+0x35c>)
 80048b6:	f7ff fbe1 	bl	800407c <lcd_puts>
  DWT_Delay_ms(1000);
 80048ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048be:	f7ff fb41 	bl	8003f44 <DWT_Delay_ms>
 80048c2:	4b27      	ldr	r3, [pc, #156]	; (8004960 <main+0x360>)
	  LED1_GPIO_Port -> BSRR = LED1_Pin;
 80048c4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80048c8:	9303      	str	r3, [sp, #12]
 80048ca:	f505 3590 	add.w	r5, r5, #73728	; 0x12000
		  sprintf(str1,"Card:%x,%x,%x", cardstr[0], cardstr[1], cardstr[2]);
 80048ce:	f1a4 0b0c 	sub.w	fp, r4, #12
	  LED1_GPIO_Port -> BSRR = LED1_Pin;
 80048d2:	f44f 7380 	mov.w	r3, #256	; 0x100
	  DWT_Delay_ms(4);
 80048d6:	2004      	movs	r0, #4
	  LED1_GPIO_Port -> BSRR = LED1_Pin;
 80048d8:	612b      	str	r3, [r5, #16]
	  DWT_Delay_ms(4);
 80048da:	f7ff fb33 	bl	8003f44 <DWT_Delay_ms>
	  LED1_GPIO_Port -> BRR = LED1_Pin;
 80048de:	f44f 7380 	mov.w	r3, #256	; 0x100
		  cardstr[i] = 0;
 80048e2:	2600      	movs	r6, #0
	  LED1_GPIO_Port -> BRR = LED1_Pin;
 80048e4:	616b      	str	r3, [r5, #20]
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 80048e6:	a90e      	add	r1, sp, #56	; 0x38
 80048e8:	2026      	movs	r0, #38	; 0x26
		  cardstr[i] = 0;
 80048ea:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 80048ee:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
	  status = MFRC522_Request(PICC_REQIDL, cardstr);
 80048f2:	f7fd fb15 	bl	8001f20 <MFRC522_Request>
	  if(status == MI_OK) {
 80048f6:	2800      	cmp	r0, #0
 80048f8:	f040 8085 	bne.w	8004a06 <main+0x406>
		  LED2_GPIO_Port -> BSRR = LED2_Pin;
 80048fc:	2340      	movs	r3, #64	; 0x40
 80048fe:	4a0f      	ldr	r2, [pc, #60]	; (800493c <main+0x33c>)
		  sprintf(str1,"Card:%x,%x,%x", cardstr[0], cardstr[1], cardstr[2]);
 8004900:	4658      	mov	r0, fp
		  LED2_GPIO_Port -> BSRR = LED2_Pin;
 8004902:	6113      	str	r3, [r2, #16]
		  sprintf(str1,"Card:%x,%x,%x", cardstr[0], cardstr[1], cardstr[2]);
 8004904:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8004908:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800490c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8004910:	9100      	str	r1, [sp, #0]
 8004912:	4914      	ldr	r1, [pc, #80]	; (8004964 <main+0x364>)
 8004914:	f000 fb04 	bl	8004f20 <siprintf>
		  DWT_Delay_ms(1);
 8004918:	2001      	movs	r0, #1
 800491a:	f7ff fb13 	bl	8003f44 <DWT_Delay_ms>
		  status = MFRC522_Anticoll(cardstr);
 800491e:	a80e      	add	r0, sp, #56	; 0x38
 8004920:	f7fd fdb2 	bl	8002488 <MFRC522_Anticoll>
 8004924:	e020      	b.n	8004968 <main+0x368>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40011c00 	.word	0x40011c00
 8004930:	40011800 	.word	0x40011800
 8004934:	40011400 	.word	0x40011400
 8004938:	40012000 	.word	0x40012000
 800493c:	40011000 	.word	0x40011000
 8004940:	40010800 	.word	0x40010800
 8004944:	20000130 	.word	0x20000130
 8004948:	40003800 	.word	0x40003800
 800494c:	200000dc 	.word	0x200000dc
 8004950:	0800576c 	.word	0x0800576c
 8004954:	2000008c 	.word	0x2000008c
 8004958:	0800577c 	.word	0x0800577c
 800495c:	200000a0 	.word	0x200000a0
 8004960:	200000b4 	.word	0x200000b4
 8004964:	08005784 	.word	0x08005784
		  if(status == MI_OK) {
 8004968:	4604      	mov	r4, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	f000 808a 	beq.w	8004a84 <main+0x484>
						  sprintf(str3, "Auth. Error");
 8004970:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		  DWT_Delay_ms(1);
 8004974:	2001      	movs	r0, #1
 8004976:	f7ff fae5 	bl	8003f44 <DWT_Delay_ms>
		  MFRC522_Halt();
 800497a:	f7ff fa63 	bl	8003e44 <MFRC522_Halt>
		  LED2_GPIO_Port -> BRR = LED2_Pin;
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	4acf      	ldr	r2, [pc, #828]	; (8004cc0 <main+0x6c0>)
		  sprintf(str3, "                ");
 8004982:	4fd0      	ldr	r7, [pc, #832]	; (8004cc4 <main+0x6c4>)
		  LED2_GPIO_Port -> BRR = LED2_Pin;
 8004984:	6153      	str	r3, [r2, #20]
		  lcd_clear();
 8004986:	f7ff fdaf 	bl	80044e8 <lcd_clear>
		  lcd_gotoxy(0,0);
 800498a:	2100      	movs	r1, #0
 800498c:	4608      	mov	r0, r1
 800498e:	f7ff fd2d 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str1);
 8004992:	4658      	mov	r0, fp
 8004994:	f7ff fb72 	bl	800407c <lcd_puts>
		  lcd_gotoxy(0,1);
 8004998:	2101      	movs	r1, #1
 800499a:	2000      	movs	r0, #0
 800499c:	f7ff fd26 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str2);
 80049a0:	48c9      	ldr	r0, [pc, #804]	; (8004cc8 <main+0x6c8>)
 80049a2:	f7ff fb6b 	bl	800407c <lcd_puts>
		  lcd_gotoxy(0,2);
 80049a6:	2102      	movs	r1, #2
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7ff fd1f 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str3);
 80049ae:	48c5      	ldr	r0, [pc, #788]	; (8004cc4 <main+0x6c4>)
 80049b0:	f7ff fb64 	bl	800407c <lcd_puts>
		  lcd_gotoxy(0,3);
 80049b4:	2103      	movs	r1, #3
 80049b6:	2000      	movs	r0, #0
 80049b8:	f7ff fd18 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str4);
 80049bc:	48c3      	ldr	r0, [pc, #780]	; (8004ccc <main+0x6cc>)
 80049be:	f7ff fb5d 	bl	800407c <lcd_puts>
		  DWT_Delay_ms(delay_val);
 80049c2:	4620      	mov	r0, r4
		  sprintf(str1, "                ");
 80049c4:	4cc2      	ldr	r4, [pc, #776]	; (8004cd0 <main+0x6d0>)
		  DWT_Delay_ms(delay_val);
 80049c6:	f7ff fabd 	bl	8003f44 <DWT_Delay_ms>
		  sprintf(str1, "                ");
 80049ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049cc:	4626      	mov	r6, r4
 80049ce:	f856 8910 	ldr.w	r8, [r6], #-16
 80049d2:	f8df e304 	ldr.w	lr, [pc, #772]	; 8004cd8 <main+0x6d8>
		  sprintf(str3, "                ");
 80049d6:	46b1      	mov	r9, r6
		  sprintf(str2, "                ");
 80049d8:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8004cc8 <main+0x6c8>
		  sprintf(str1, "                ");
 80049dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
		  sprintf(str2, "                ");
 80049e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80049e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		  sprintf(str3, "                ");
 80049e6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80049ea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
		  sprintf(str4, "                ");
 80049ec:	4eb7      	ldr	r6, [pc, #732]	; (8004ccc <main+0x6cc>)
 80049ee:	3c10      	subs	r4, #16
		  sprintf(str1, "                ");
 80049f0:	f88e 8000 	strb.w	r8, [lr]
		  sprintf(str2, "                ");
 80049f4:	f88c 8000 	strb.w	r8, [ip]
		  sprintf(str3, "                ");
 80049f8:	f887 8000 	strb.w	r8, [r7]
		  sprintf(str4, "                ");
 80049fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004a00:	f886 8000 	strb.w	r8, [r6]
 8004a04:	e765      	b.n	80048d2 <main+0x2d2>
		  sprintf(str1, "Waiting for Card");
 8004a06:	4cb3      	ldr	r4, [pc, #716]	; (8004cd4 <main+0x6d4>)
 8004a08:	4fb3      	ldr	r7, [pc, #716]	; (8004cd8 <main+0x6d8>)
 8004a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a0c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8004a0e:	6823      	ldr	r3, [r4, #0]
		  lcd_gotoxy(0,0);
 8004a10:	4631      	mov	r1, r6
		  sprintf(str1, "Waiting for Card");
 8004a12:	703b      	strb	r3, [r7, #0]
		  lcd_gotoxy(0,0);
 8004a14:	4630      	mov	r0, r6
		  sprintf(str2, "                ");
 8004a16:	4cae      	ldr	r4, [pc, #696]	; (8004cd0 <main+0x6d0>)
		  lcd_gotoxy(0,0);
 8004a18:	f7ff fce8 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str1);
 8004a1c:	f1a7 0010 	sub.w	r0, r7, #16
 8004a20:	f7ff fb2c 	bl	800407c <lcd_puts>
		  sprintf(str2, "                ");
 8004a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a26:	4627      	mov	r7, r4
 8004a28:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8004cc8 <main+0x6c8>
 8004a2c:	f857 9910 	ldr.w	r9, [r7], #-16
 8004a30:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
		  sprintf(str3, "                ");
 8004a34:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8004cc4 <main+0x6c4>
		  lcd_gotoxy(0,1);
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4630      	mov	r0, r6
		  sprintf(str2, "                ");
 8004a3c:	f88a 9000 	strb.w	r9, [sl]
		  lcd_gotoxy(0,1);
 8004a40:	f7ff fcd4 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str2);
 8004a44:	f1aa 0010 	sub.w	r0, sl, #16
 8004a48:	f7ff fb18 	bl	800407c <lcd_puts>
		  sprintf(str3, "                ");
 8004a4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004a4e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
		  sprintf(str4, "                ");
 8004a52:	4f9e      	ldr	r7, [pc, #632]	; (8004ccc <main+0x6cc>)
		  lcd_gotoxy(0,2);
 8004a54:	2102      	movs	r1, #2
 8004a56:	4630      	mov	r0, r6
		  sprintf(str3, "                ");
 8004a58:	f888 9000 	strb.w	r9, [r8]
		  lcd_gotoxy(0,2);
 8004a5c:	f7ff fcc6 	bl	80043ec <lcd_gotoxy>
		  sprintf(str4, "                ");
 8004a60:	3c10      	subs	r4, #16
		  lcd_puts(str3);
 8004a62:	f1a8 0010 	sub.w	r0, r8, #16
 8004a66:	f7ff fb09 	bl	800407c <lcd_puts>
		  sprintf(str4, "                ");
 8004a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a6c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
		  lcd_gotoxy(0,3);
 8004a6e:	4630      	mov	r0, r6
 8004a70:	2103      	movs	r1, #3
		  sprintf(str4, "                ");
 8004a72:	f887 9000 	strb.w	r9, [r7]
		  lcd_gotoxy(0,3);
 8004a76:	f7ff fcb9 	bl	80043ec <lcd_gotoxy>
		  lcd_puts(str4);
 8004a7a:	f1a7 0010 	sub.w	r0, r7, #16
 8004a7e:	f7ff fafd 	bl	800407c <lcd_puts>
 8004a82:	e726      	b.n	80048d2 <main+0x2d2>
			  sprintf(str2,"UID:%x %x %x %x", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
 8004a84:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8004a88:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
 8004a8c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8004a90:	e9cd 1000 	strd	r1, r0, [sp]
 8004a94:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8004a98:	4990      	ldr	r1, [pc, #576]	; (8004cdc <main+0x6dc>)
 8004a9a:	488b      	ldr	r0, [pc, #556]	; (8004cc8 <main+0x6c8>)
 8004a9c:	f000 fa40 	bl	8004f20 <siprintf>
			  DWT_Delay_ms(1);
 8004aa0:	2001      	movs	r0, #1
			  UID[0] = cardstr[0];
 8004aa2:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
			  UID[1] = cardstr[1];
 8004aa6:	f89d 7039 	ldrb.w	r7, [sp, #57]	; 0x39
			  UID[2] = cardstr[2];
 8004aaa:	f89d 603a 	ldrb.w	r6, [sp, #58]	; 0x3a
			  UID[3] = cardstr[3];
 8004aae:	f89d 803b 	ldrb.w	r8, [sp, #59]	; 0x3b
			  DWT_Delay_ms(1);
 8004ab2:	f7ff fa47 	bl	8003f44 <DWT_Delay_ms>
			  status = MFRC522_SelectTag(cardstr);
 8004ab6:	a80e      	add	r0, sp, #56	; 0x38
 8004ab8:	f7fe fdc2 	bl	8003640 <MFRC522_SelectTag>
			  if (status > 0){
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f43f af57 	beq.w	8004970 <main+0x370>
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ac2:	f087 036c 	eor.w	r3, r7, #108	; 0x6c
 8004ac6:	f089 00b2 	eor.w	r0, r9, #178	; 0xb2
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004aca:	f089 0e55 	eor.w	lr, r9, #85	; 0x55
 8004ace:	f087 01e5 	eor.w	r1, r7, #229	; 0xe5
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ad2:	f089 0a1f 	eor.w	sl, r9, #31
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ad6:	4418      	add	r0, r3
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ad8:	f087 0309 	eor.w	r3, r7, #9
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004adc:	f087 0245 	eor.w	r2, r7, #69	; 0x45
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ae0:	4471      	add	r1, lr
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ae2:	f089 0c12 	eor.w	ip, r9, #18
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004ae6:	f089 0e99 	eor.w	lr, r9, #153	; 0x99
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004aea:	449a      	add	sl, r3
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004aec:	f089 092c 	eor.w	r9, r9, #44	; 0x2c
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004af0:	f087 03a2 	eor.w	r3, r7, #162	; 0xa2
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004af4:	f087 0788 	eor.w	r7, r7, #136	; 0x88
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004af8:	4494      	add	ip, r2
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004afa:	449e      	add	lr, r3
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004afc:	f086 02f2 	eor.w	r2, r6, #242	; 0xf2
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b00:	444f      	add	r7, r9
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b02:	f086 03da 	eor.w	r3, r6, #218	; 0xda
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b06:	f086 0939 	eor.w	r9, r6, #57	; 0x39
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b0a:	4462      	add	r2, ip
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b0c:	4448      	add	r0, r9
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b0e:	f088 0ca8 	eor.w	ip, r8, #168	; 0xa8
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b12:	f086 09ca 	eor.w	r9, r6, #202	; 0xca
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b16:	440b      	add	r3, r1
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b18:	f086 0150 	eor.w	r1, r6, #80	; 0x50
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b1c:	f086 067f 	eor.w	r6, r6, #127	; 0x7f
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b20:	44ca      	add	sl, r9
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b22:	4437      	add	r7, r6
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b24:	f088 0918 	eor.w	r9, r8, #24
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b28:	4494      	add	ip, r2
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b2a:	4471      	add	r1, lr
 8004b2c:	f088 02ec 	eor.w	r2, r8, #236	; 0xec
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b30:	f088 0e83 	eor.w	lr, r8, #131	; 0x83
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b34:	f088 0675 	eor.w	r6, r8, #117	; 0x75
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b38:	f088 083d 	eor.w	r8, r8, #61	; 0x3d
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b3c:	4411      	add	r1, r2
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b3e:	4470      	add	r0, lr
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b40:	eb07 0208 	add.w	r2, r7, r8
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b44:	444b      	add	r3, r9
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b46:	4456      	add	r6, sl
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b48:	fa5f f980 	uxtb.w	r9, r0
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b4c:	fa5f fa8c 	uxtb.w	sl, ip
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b50:	fa5f f883 	uxtb.w	r8, r3
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b54:	b2f7      	uxtb	r7, r6
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b56:	b2d3      	uxtb	r3, r2
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b58:	b2ce      	uxtb	r6, r1
				  DWT_Delay_ms(1);
 8004b5a:	2001      	movs	r0, #1
				  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
				  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b62:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
				  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b66:	f88d 9031 	strb.w	r9, [sp, #49]	; 0x31
				  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b6a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
				  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b6e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
				  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004b72:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
				  DWT_Delay_ms(1);
 8004b76:	f7ff f9e5 	bl	8003f44 <DWT_Delay_ms>
				  status = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 8004b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8004b7c:	aa0c      	add	r2, sp, #48	; 0x30
 8004b7e:	2103      	movs	r1, #3
 8004b80:	2060      	movs	r0, #96	; 0x60
 8004b82:	f7fe fb5b 	bl	800323c <MFRC522_Auth>
				  if (status == MI_OK){
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d05a      	beq.n	8004c40 <main+0x640>
					  DWT_Delay_ms(1);
 8004b8a:	2001      	movs	r0, #1
					  for (int i = 0; i < 16; i++) {cardstr[i] = 0;}
 8004b8c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8004b90:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
					  DWT_Delay_ms(1);
 8004b94:	f7ff f9d6 	bl	8003f44 <DWT_Delay_ms>
					  status = MFRC522_Request(PICC_REQIDL, cardstr);
 8004b98:	a90e      	add	r1, sp, #56	; 0x38
 8004b9a:	2026      	movs	r0, #38	; 0x26
 8004b9c:	f7fd f9c0 	bl	8001f20 <MFRC522_Request>
					  DWT_Delay_ms(1);
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7ff f9cf 	bl	8003f44 <DWT_Delay_ms>
					  status = MFRC522_Anticoll(cardstr);
 8004ba6:	a80e      	add	r0, sp, #56	; 0x38
 8004ba8:	f7fd fc6e 	bl	8002488 <MFRC522_Anticoll>
					  DWT_Delay_ms(1);
 8004bac:	2001      	movs	r0, #1
 8004bae:	f7ff f9c9 	bl	8003f44 <DWT_Delay_ms>
					  status = MFRC522_SelectTag(cardstr);
 8004bb2:	a80e      	add	r0, sp, #56	; 0x38
 8004bb4:	f7fe fd44 	bl	8003640 <MFRC522_SelectTag>
					  SectorKey[0] = 0xFF;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295
					  DWT_Delay_ms(1);
 8004bbc:	2001      	movs	r0, #1
					  SectorKey[0] = 0xFF;
 8004bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8004bc0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
					  DWT_Delay_ms(1);
 8004bc4:	f7ff f9be 	bl	8003f44 <DWT_Delay_ms>
					  status = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 8004bc8:	ab0e      	add	r3, sp, #56	; 0x38
 8004bca:	aa0c      	add	r2, sp, #48	; 0x30
 8004bcc:	2103      	movs	r1, #3
 8004bce:	2060      	movs	r0, #96	; 0x60
					  SectorKey[0] = 0xFF;
 8004bd0:	f64f 74ff 	movw	r4, #65535	; 0xffff
					  status = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 8004bd4:	f7fe fb32 	bl	800323c <MFRC522_Auth>
					  if (status == MI_OK){
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d160      	bne.n	8004c9e <main+0x69e>
						  if (HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin) == 0){
 8004bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004be0:	483f      	ldr	r0, [pc, #252]	; (8004ce0 <main+0x6e0>)
 8004be2:	f7fb fcf5 	bl	80005d0 <HAL_GPIO_ReadPin>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d162      	bne.n	8004cb0 <main+0x6b0>
							  card_data[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004bea:	4603      	mov	r3, r0
							  card_data[8] = 0x80; //Access_bits[8]
 8004bec:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
							  card_data[7] = 0x07; //Access_bits[7]
 8004bf0:	f04f 0c07 	mov.w	ip, #7
							  card_data[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004bf4:	f36a 0307 	bfi	r3, sl, #0, #8
 8004bf8:	f369 230f 	bfi	r3, r9, #8, #8
 8004bfc:	f368 4317 	bfi	r3, r8, #16, #8
 8004c00:	f367 631f 	bfi	r3, r7, #24, #8
							  card_data[8] = 0x80; //Access_bits[8]
 8004c04:	4a37      	ldr	r2, [pc, #220]	; (8004ce4 <main+0x6e4>)
							  card_data[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8004c06:	9313      	str	r3, [sp, #76]	; 0x4c
							  card_data[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004c08:	9b02      	ldr	r3, [sp, #8]
							  DWT_Delay_ms(1);
 8004c0a:	2001      	movs	r0, #1
							  card_data[8] = 0x80; //Access_bits[8]
 8004c0c:	e9cd 2115 	strd	r2, r1, [sp, #84]	; 0x54
							  card_data[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8004c10:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
							  card_data[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8004c14:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
							  card_data[6] = 0xFF; //Access_bits[6]
 8004c18:	f88d 4052 	strb.w	r4, [sp, #82]	; 0x52
							  card_data[7] = 0x07; //Access_bits[7]
 8004c1c:	f88d c053 	strb.w	ip, [sp, #83]	; 0x53
							  DWT_Delay_ms(1);
 8004c20:	f7ff f990 	bl	8003f44 <DWT_Delay_ms>
							  status = MFRC522_Write(3, card_data);
 8004c24:	a913      	add	r1, sp, #76	; 0x4c
 8004c26:	2003      	movs	r0, #3
 8004c28:	f7fd fef6 	bl	8002a18 <MFRC522_Write>
							  if(status == MI_OK) {
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d063      	beq.n	8004cf8 <main+0x6f8>
						  sprintf(str3, "Auth. Error");
 8004c30:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
				  DWT_Delay_ms(1);
 8004c34:	2001      	movs	r0, #1
 8004c36:	f7ff f985 	bl	8003f44 <DWT_Delay_ms>
				  MFRC522_StopCrypto1();
 8004c3a:	f7ff f915 	bl	8003e68 <MFRC522_StopCrypto1>
 8004c3e:	e699      	b.n	8004974 <main+0x374>
					  sprintf(str3, "Auth. OK");
 8004c40:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <main+0x6c4>)
 8004c42:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <main+0x6e8>)
 8004c44:	9303      	str	r3, [sp, #12]
 8004c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c48:	c303      	stmia	r3!, {r0, r1}
					  if (HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin) == 0){
 8004c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c4e:	4824      	ldr	r0, [pc, #144]	; (8004ce0 <main+0x6e0>)
					  sprintf(str3, "Auth. OK");
 8004c50:	701a      	strb	r2, [r3, #0]
					  if (HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin) == 0){
 8004c52:	f7fb fcbd 	bl	80005d0 <HAL_GPIO_ReadPin>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d1ea      	bne.n	8004c30 <main+0x630>
						  card_data[0] = 0xFF;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	f06f 4178 	mvn.w	r1, #4160749568	; 0xf8000000
 8004c62:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8004c66:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <main+0x6e4>)
						  DWT_Delay_ms(1);
 8004c6a:	2001      	movs	r0, #1
						  card_data[0] = 0xFF;
 8004c6c:	9114      	str	r1, [sp, #80]	; 0x50
 8004c6e:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
						  DWT_Delay_ms(1);
 8004c72:	f7ff f967 	bl	8003f44 <DWT_Delay_ms>
						  status = MFRC522_Write(3, card_data);
 8004c76:	a913      	add	r1, sp, #76	; 0x4c
 8004c78:	2003      	movs	r0, #3
 8004c7a:	f7fd fecd 	bl	8002a18 <MFRC522_Write>
						  if(status == MI_OK) {
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1d6      	bne.n	8004c30 <main+0x630>
							  sprintf(str3, "                ");
 8004c82:	9c03      	ldr	r4, [sp, #12]
 8004c84:	4e12      	ldr	r6, [pc, #72]	; (8004cd0 <main+0x6d0>)
							  sprintf(str4, "Card Cleared!");
 8004c86:	4f11      	ldr	r7, [pc, #68]	; (8004ccc <main+0x6cc>)
							  sprintf(str3, "                ");
 8004c88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
							  sprintf(str4, "Card Cleared!");
 8004c8c:	4b17      	ldr	r3, [pc, #92]	; (8004cec <main+0x6ec>)
 8004c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c90:	c707      	stmia	r7!, {r0, r1, r2}
							  sprintf(str3, "                ");
 8004c92:	6832      	ldr	r2, [r6, #0]
							  sprintf(str4, "Card Cleared!");
 8004c94:	803b      	strh	r3, [r7, #0]
							  sprintf(str3, "                ");
 8004c96:	7022      	strb	r2, [r4, #0]
							  delay_val = 2000;
 8004c98:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8004c9c:	e7ca      	b.n	8004c34 <main+0x634>
						  sprintf(str3, "Auth. Error");
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <main+0x6f0>)
 8004ca0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004ca4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004cae:	e7c1      	b.n	8004c34 <main+0x634>
							  sprintf(str4, "New Card!");
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <main+0x6cc>)
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <main+0x6f4>)
 8004cb4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cba:	c303      	stmia	r3!, {r0, r1}
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	e7b9      	b.n	8004c34 <main+0x634>
 8004cc0:	40011000 	.word	0x40011000
 8004cc4:	200000b4 	.word	0x200000b4
 8004cc8:	200000a0 	.word	0x200000a0
 8004ccc:	200000c8 	.word	0x200000c8
 8004cd0:	080057e4 	.word	0x080057e4
 8004cd4:	080057f8 	.word	0x080057f8
 8004cd8:	2000008c 	.word	0x2000008c
 8004cdc:	08005794 	.word	0x08005794
 8004ce0:	40011400 	.word	0x40011400
 8004ce4:	88888880 	.word	0x88888880
 8004ce8:	080057a4 	.word	0x080057a4
 8004cec:	080057b0 	.word	0x080057b0
 8004cf0:	080057d8 	.word	0x080057d8
 8004cf4:	080057cc 	.word	0x080057cc
								  sprintf(str3, "Card Set!");
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <main+0x70c>)
								  delay_val = 2000;
 8004cfa:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
								  sprintf(str3, "Card Set!");
 8004cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d02:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <main+0x710>)
 8004d04:	c303      	stmia	r3!, {r0, r1}
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e794      	b.n	8004c34 <main+0x634>
 8004d0a:	bf00      	nop
 8004d0c:	080057c0 	.word	0x080057c0
 8004d10:	200000b4 	.word	0x200000b4

08004d14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_MspInit+0x38>)
{
 8004d16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d18:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8004d1a:	490d      	ldr	r1, [pc, #52]	; (8004d50 <HAL_MspInit+0x3c>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	619a      	str	r2, [r3, #24]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	f002 0201 	and.w	r2, r2, #1
 8004d28:	9200      	str	r2, [sp, #0]
 8004d2a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d32:	61da      	str	r2, [r3, #28]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8004d3e:	684b      	ldr	r3, [r1, #4]
 8004d40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004d44:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d46:	b002      	add	sp, #8
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40010000 	.word	0x40010000

08004d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d54:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d56:	2400      	movs	r4, #0
  if(hspi->Instance==SPI2)
 8004d58:	6802      	ldr	r2, [r0, #0]
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_SPI_MspInit+0x70>)
{
 8004d5c:	b086      	sub	sp, #24
  if(hspi->Instance==SPI2)
 8004d5e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d60:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004d64:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI2)
 8004d68:	d001      	beq.n	8004d6e <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d6a:	b006      	add	sp, #24
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004d6e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d72:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d74:	2503      	movs	r5, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d76:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8004d7a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7c:	4812      	ldr	r0, [pc, #72]	; (8004dc8 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d82:	61da      	str	r2, [r3, #28]
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004d8a:	9200      	str	r2, [sp, #0]
 8004d8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	f042 0208 	orr.w	r2, r2, #8
 8004d94:	619a      	str	r2, [r3, #24]
 8004d96:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004d98:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004da6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da8:	f7fb faf6 	bl	8000398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db0:	a902      	add	r1, sp, #8
 8004db2:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004db8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dba:	f7fb faed 	bl	8000398 <HAL_GPIO_Init>
}
 8004dbe:	b006      	add	sp, #24
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40003800 	.word	0x40003800
 8004dc8:	40010c00 	.word	0x40010c00

08004dcc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop

08004dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd0:	e7fe      	b.n	8004dd0 <HardFault_Handler>
 8004dd2:	bf00      	nop

08004dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dd4:	e7fe      	b.n	8004dd4 <MemManage_Handler>
 8004dd6:	bf00      	nop

08004dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dd8:	e7fe      	b.n	8004dd8 <BusFault_Handler>
 8004dda:	bf00      	nop

08004ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ddc:	e7fe      	b.n	8004ddc <UsageFault_Handler>
 8004dde:	bf00      	nop

08004de0 <SVC_Handler>:
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop

08004de4 <DebugMon_Handler>:
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <PendSV_Handler>:
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop

08004dec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dec:	f7fb ba50 	b.w	8000290 <HAL_IncTick>

08004df0 <USART1_IRQHandler>:
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004df4:	4a0c      	ldr	r2, [pc, #48]	; (8004e28 <_sbrk+0x34>)
{
 8004df6:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8004df8:	6813      	ldr	r3, [r2, #0]
 8004dfa:	b133      	cbz	r3, 8004e0a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004dfc:	4669      	mov	r1, sp
 8004dfe:	4418      	add	r0, r3
 8004e00:	4288      	cmp	r0, r1
 8004e02:	d809      	bhi.n	8004e18 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8004e04:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8004e0a:	4908      	ldr	r1, [pc, #32]	; (8004e2c <_sbrk+0x38>)
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004e10:	4669      	mov	r1, sp
 8004e12:	4418      	add	r0, r3
 8004e14:	4288      	cmp	r0, r1
 8004e16:	d9f5      	bls.n	8004e04 <_sbrk+0x10>
		errno = ENOMEM;
 8004e18:	f000 f858 	bl	8004ecc <__errno>
 8004e1c:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8004e22:	6002      	str	r2, [r0, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd08      	pop	{r3, pc}
 8004e28:	20000120 	.word	0x20000120
 8004e2c:	20000190 	.word	0x20000190

08004e30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e30:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004e32:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e36:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8004e3e:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e40:	480e      	ldr	r0, [pc, #56]	; (8004e7c <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8004e42:	f041 0101 	orr.w	r1, r1, #1
 8004e46:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e58:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e60:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004e68:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8004e6a:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e6c:	6084      	str	r4, [r0, #8]
#endif 
}
 8004e6e:	bc30      	pop	{r4, r5}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	f8ff0000 	.word	0xf8ff0000
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004e82:	e003      	b.n	8004e8c <LoopCopyDataInit>

08004e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004e8a:	3104      	adds	r1, #4

08004e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004e8c:	480a      	ldr	r0, [pc, #40]	; (8004eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004e94:	d3f6      	bcc.n	8004e84 <CopyDataInit>
  ldr r2, =_sbss
 8004e96:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004e98:	e002      	b.n	8004ea0 <LoopFillZerobss>

08004e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004e9c:	f842 3b04 	str.w	r3, [r2], #4

08004ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004ea0:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004ea4:	d3f9      	bcc.n	8004e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ea6:	f7ff ffc3 	bl	8004e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eaa:	f000 f815 	bl	8004ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004eae:	f7ff fba7 	bl	8004600 <main>
  bx lr
 8004eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8004eb4:	08005858 	.word	0x08005858
  ldr r0, =_sdata
 8004eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ebc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8004ec0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8004ec4:	2000018c 	.word	0x2000018c

08004ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ec8:	e7fe      	b.n	8004ec8 <ADC1_2_IRQHandler>
	...

08004ecc <__errno>:
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <__errno+0x8>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	2000000c 	.word	0x2000000c

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	2500      	movs	r5, #0
 8004edc:	4e0c      	ldr	r6, [pc, #48]	; (8004f10 <__libc_init_array+0x38>)
 8004ede:	4c0d      	ldr	r4, [pc, #52]	; (8004f14 <__libc_init_array+0x3c>)
 8004ee0:	1ba4      	subs	r4, r4, r6
 8004ee2:	10a4      	asrs	r4, r4, #2
 8004ee4:	42a5      	cmp	r5, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	f000 fc2c 	bl	8005744 <_init>
 8004eec:	2500      	movs	r5, #0
 8004eee:	4e0a      	ldr	r6, [pc, #40]	; (8004f18 <__libc_init_array+0x40>)
 8004ef0:	4c0a      	ldr	r4, [pc, #40]	; (8004f1c <__libc_init_array+0x44>)
 8004ef2:	1ba4      	subs	r4, r4, r6
 8004ef4:	10a4      	asrs	r4, r4, #2
 8004ef6:	42a5      	cmp	r5, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f00:	4798      	blx	r3
 8004f02:	3501      	adds	r5, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f0a:	4798      	blx	r3
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	08005850 	.word	0x08005850
 8004f14:	08005850 	.word	0x08005850
 8004f18:	08005850 	.word	0x08005850
 8004f1c:	08005854 	.word	0x08005854

08004f20 <siprintf>:
 8004f20:	b40e      	push	{r1, r2, r3}
 8004f22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f26:	b500      	push	{lr}
 8004f28:	b09c      	sub	sp, #112	; 0x70
 8004f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	9006      	str	r0, [sp, #24]
 8004f30:	9107      	str	r1, [sp, #28]
 8004f32:	9104      	str	r1, [sp, #16]
 8004f34:	4808      	ldr	r0, [pc, #32]	; (8004f58 <siprintf+0x38>)
 8004f36:	4909      	ldr	r1, [pc, #36]	; (8004f5c <siprintf+0x3c>)
 8004f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3c:	9105      	str	r1, [sp, #20]
 8004f3e:	6800      	ldr	r0, [r0, #0]
 8004f40:	a902      	add	r1, sp, #8
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	f000 f866 	bl	8005014 <_svfiprintf_r>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	9b02      	ldr	r3, [sp, #8]
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	b01c      	add	sp, #112	; 0x70
 8004f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f54:	b003      	add	sp, #12
 8004f56:	4770      	bx	lr
 8004f58:	2000000c 	.word	0x2000000c
 8004f5c:	ffff0208 	.word	0xffff0208

08004f60 <__ssputs_r>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	688e      	ldr	r6, [r1, #8]
 8004f66:	4682      	mov	sl, r0
 8004f68:	429e      	cmp	r6, r3
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	4690      	mov	r8, r2
 8004f6e:	4699      	mov	r9, r3
 8004f70:	d837      	bhi.n	8004fe2 <__ssputs_r+0x82>
 8004f72:	898a      	ldrh	r2, [r1, #12]
 8004f74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f78:	d031      	beq.n	8004fde <__ssputs_r+0x7e>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	6909      	ldr	r1, [r1, #16]
 8004f80:	1a6f      	subs	r7, r5, r1
 8004f82:	6965      	ldr	r5, [r4, #20]
 8004f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f88:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f8c:	f109 0301 	add.w	r3, r9, #1
 8004f90:	443b      	add	r3, r7
 8004f92:	429d      	cmp	r5, r3
 8004f94:	bf38      	it	cc
 8004f96:	461d      	movcc	r5, r3
 8004f98:	0553      	lsls	r3, r2, #21
 8004f9a:	d530      	bpl.n	8004ffe <__ssputs_r+0x9e>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	f000 fb37 	bl	8005610 <_malloc_r>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	b950      	cbnz	r0, 8004fbc <__ssputs_r+0x5c>
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	f8ca 3000 	str.w	r3, [sl]
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	463a      	mov	r2, r7
 8004fbe:	6921      	ldr	r1, [r4, #16]
 8004fc0:	f000 fab6 	bl	8005530 <memcpy>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	6126      	str	r6, [r4, #16]
 8004fd2:	443e      	add	r6, r7
 8004fd4:	6026      	str	r6, [r4, #0]
 8004fd6:	464e      	mov	r6, r9
 8004fd8:	6165      	str	r5, [r4, #20]
 8004fda:	1bed      	subs	r5, r5, r7
 8004fdc:	60a5      	str	r5, [r4, #8]
 8004fde:	454e      	cmp	r6, r9
 8004fe0:	d900      	bls.n	8004fe4 <__ssputs_r+0x84>
 8004fe2:	464e      	mov	r6, r9
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	f000 faac 	bl	8005546 <memmove>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	1b9b      	subs	r3, r3, r6
 8004ff4:	60a3      	str	r3, [r4, #8]
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	441e      	add	r6, r3
 8004ffa:	6026      	str	r6, [r4, #0]
 8004ffc:	e7dc      	b.n	8004fb8 <__ssputs_r+0x58>
 8004ffe:	462a      	mov	r2, r5
 8005000:	f000 fb60 	bl	80056c4 <_realloc_r>
 8005004:	4606      	mov	r6, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	d1e2      	bne.n	8004fd0 <__ssputs_r+0x70>
 800500a:	6921      	ldr	r1, [r4, #16]
 800500c:	4650      	mov	r0, sl
 800500e:	f000 fab3 	bl	8005578 <_free_r>
 8005012:	e7c8      	b.n	8004fa6 <__ssputs_r+0x46>

08005014 <_svfiprintf_r>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	461d      	mov	r5, r3
 800501a:	898b      	ldrh	r3, [r1, #12]
 800501c:	b09d      	sub	sp, #116	; 0x74
 800501e:	061f      	lsls	r7, r3, #24
 8005020:	4680      	mov	r8, r0
 8005022:	460c      	mov	r4, r1
 8005024:	4616      	mov	r6, r2
 8005026:	d50f      	bpl.n	8005048 <_svfiprintf_r+0x34>
 8005028:	690b      	ldr	r3, [r1, #16]
 800502a:	b96b      	cbnz	r3, 8005048 <_svfiprintf_r+0x34>
 800502c:	2140      	movs	r1, #64	; 0x40
 800502e:	f000 faef 	bl	8005610 <_malloc_r>
 8005032:	6020      	str	r0, [r4, #0]
 8005034:	6120      	str	r0, [r4, #16]
 8005036:	b928      	cbnz	r0, 8005044 <_svfiprintf_r+0x30>
 8005038:	230c      	movs	r3, #12
 800503a:	f8c8 3000 	str.w	r3, [r8]
 800503e:	f04f 30ff 	mov.w	r0, #4294967295
 8005042:	e0c8      	b.n	80051d6 <_svfiprintf_r+0x1c2>
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	6163      	str	r3, [r4, #20]
 8005048:	2300      	movs	r3, #0
 800504a:	9309      	str	r3, [sp, #36]	; 0x24
 800504c:	2320      	movs	r3, #32
 800504e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005052:	2330      	movs	r3, #48	; 0x30
 8005054:	f04f 0b01 	mov.w	fp, #1
 8005058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800505c:	9503      	str	r5, [sp, #12]
 800505e:	4637      	mov	r7, r6
 8005060:	463d      	mov	r5, r7
 8005062:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005066:	b10b      	cbz	r3, 800506c <_svfiprintf_r+0x58>
 8005068:	2b25      	cmp	r3, #37	; 0x25
 800506a:	d13e      	bne.n	80050ea <_svfiprintf_r+0xd6>
 800506c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005070:	d00b      	beq.n	800508a <_svfiprintf_r+0x76>
 8005072:	4653      	mov	r3, sl
 8005074:	4632      	mov	r2, r6
 8005076:	4621      	mov	r1, r4
 8005078:	4640      	mov	r0, r8
 800507a:	f7ff ff71 	bl	8004f60 <__ssputs_r>
 800507e:	3001      	adds	r0, #1
 8005080:	f000 80a4 	beq.w	80051cc <_svfiprintf_r+0x1b8>
 8005084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005086:	4453      	add	r3, sl
 8005088:	9309      	str	r3, [sp, #36]	; 0x24
 800508a:	783b      	ldrb	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 809d 	beq.w	80051cc <_svfiprintf_r+0x1b8>
 8005092:	2300      	movs	r3, #0
 8005094:	f04f 32ff 	mov.w	r2, #4294967295
 8005098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	9307      	str	r3, [sp, #28]
 80050a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a4:	931a      	str	r3, [sp, #104]	; 0x68
 80050a6:	462f      	mov	r7, r5
 80050a8:	2205      	movs	r2, #5
 80050aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80050ae:	4850      	ldr	r0, [pc, #320]	; (80051f0 <_svfiprintf_r+0x1dc>)
 80050b0:	f000 fa30 	bl	8005514 <memchr>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	b9d0      	cbnz	r0, 80050ee <_svfiprintf_r+0xda>
 80050b8:	06d9      	lsls	r1, r3, #27
 80050ba:	bf44      	itt	mi
 80050bc:	2220      	movmi	r2, #32
 80050be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050c2:	071a      	lsls	r2, r3, #28
 80050c4:	bf44      	itt	mi
 80050c6:	222b      	movmi	r2, #43	; 0x2b
 80050c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050cc:	782a      	ldrb	r2, [r5, #0]
 80050ce:	2a2a      	cmp	r2, #42	; 0x2a
 80050d0:	d015      	beq.n	80050fe <_svfiprintf_r+0xea>
 80050d2:	462f      	mov	r7, r5
 80050d4:	2000      	movs	r0, #0
 80050d6:	250a      	movs	r5, #10
 80050d8:	9a07      	ldr	r2, [sp, #28]
 80050da:	4639      	mov	r1, r7
 80050dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e0:	3b30      	subs	r3, #48	; 0x30
 80050e2:	2b09      	cmp	r3, #9
 80050e4:	d94d      	bls.n	8005182 <_svfiprintf_r+0x16e>
 80050e6:	b1b8      	cbz	r0, 8005118 <_svfiprintf_r+0x104>
 80050e8:	e00f      	b.n	800510a <_svfiprintf_r+0xf6>
 80050ea:	462f      	mov	r7, r5
 80050ec:	e7b8      	b.n	8005060 <_svfiprintf_r+0x4c>
 80050ee:	4a40      	ldr	r2, [pc, #256]	; (80051f0 <_svfiprintf_r+0x1dc>)
 80050f0:	463d      	mov	r5, r7
 80050f2:	1a80      	subs	r0, r0, r2
 80050f4:	fa0b f000 	lsl.w	r0, fp, r0
 80050f8:	4318      	orrs	r0, r3
 80050fa:	9004      	str	r0, [sp, #16]
 80050fc:	e7d3      	b.n	80050a6 <_svfiprintf_r+0x92>
 80050fe:	9a03      	ldr	r2, [sp, #12]
 8005100:	1d11      	adds	r1, r2, #4
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	9103      	str	r1, [sp, #12]
 8005106:	2a00      	cmp	r2, #0
 8005108:	db01      	blt.n	800510e <_svfiprintf_r+0xfa>
 800510a:	9207      	str	r2, [sp, #28]
 800510c:	e004      	b.n	8005118 <_svfiprintf_r+0x104>
 800510e:	4252      	negs	r2, r2
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	9207      	str	r2, [sp, #28]
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	783b      	ldrb	r3, [r7, #0]
 800511a:	2b2e      	cmp	r3, #46	; 0x2e
 800511c:	d10c      	bne.n	8005138 <_svfiprintf_r+0x124>
 800511e:	787b      	ldrb	r3, [r7, #1]
 8005120:	2b2a      	cmp	r3, #42	; 0x2a
 8005122:	d133      	bne.n	800518c <_svfiprintf_r+0x178>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	3702      	adds	r7, #2
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	9203      	str	r2, [sp, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfb8      	it	lt
 8005132:	f04f 33ff 	movlt.w	r3, #4294967295
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	4d2e      	ldr	r5, [pc, #184]	; (80051f4 <_svfiprintf_r+0x1e0>)
 800513a:	2203      	movs	r2, #3
 800513c:	7839      	ldrb	r1, [r7, #0]
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f9e8 	bl	8005514 <memchr>
 8005144:	b138      	cbz	r0, 8005156 <_svfiprintf_r+0x142>
 8005146:	2340      	movs	r3, #64	; 0x40
 8005148:	1b40      	subs	r0, r0, r5
 800514a:	fa03 f000 	lsl.w	r0, r3, r0
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	3701      	adds	r7, #1
 8005152:	4303      	orrs	r3, r0
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	7839      	ldrb	r1, [r7, #0]
 8005158:	2206      	movs	r2, #6
 800515a:	4827      	ldr	r0, [pc, #156]	; (80051f8 <_svfiprintf_r+0x1e4>)
 800515c:	1c7e      	adds	r6, r7, #1
 800515e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005162:	f000 f9d7 	bl	8005514 <memchr>
 8005166:	2800      	cmp	r0, #0
 8005168:	d038      	beq.n	80051dc <_svfiprintf_r+0x1c8>
 800516a:	4b24      	ldr	r3, [pc, #144]	; (80051fc <_svfiprintf_r+0x1e8>)
 800516c:	bb13      	cbnz	r3, 80051b4 <_svfiprintf_r+0x1a0>
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	f023 0307 	bic.w	r3, r3, #7
 8005176:	3308      	adds	r3, #8
 8005178:	9303      	str	r3, [sp, #12]
 800517a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517c:	444b      	add	r3, r9
 800517e:	9309      	str	r3, [sp, #36]	; 0x24
 8005180:	e76d      	b.n	800505e <_svfiprintf_r+0x4a>
 8005182:	fb05 3202 	mla	r2, r5, r2, r3
 8005186:	2001      	movs	r0, #1
 8005188:	460f      	mov	r7, r1
 800518a:	e7a6      	b.n	80050da <_svfiprintf_r+0xc6>
 800518c:	2300      	movs	r3, #0
 800518e:	250a      	movs	r5, #10
 8005190:	4619      	mov	r1, r3
 8005192:	3701      	adds	r7, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4638      	mov	r0, r7
 8005198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800519c:	3a30      	subs	r2, #48	; 0x30
 800519e:	2a09      	cmp	r2, #9
 80051a0:	d903      	bls.n	80051aa <_svfiprintf_r+0x196>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0c8      	beq.n	8005138 <_svfiprintf_r+0x124>
 80051a6:	9105      	str	r1, [sp, #20]
 80051a8:	e7c6      	b.n	8005138 <_svfiprintf_r+0x124>
 80051aa:	fb05 2101 	mla	r1, r5, r1, r2
 80051ae:	2301      	movs	r3, #1
 80051b0:	4607      	mov	r7, r0
 80051b2:	e7f0      	b.n	8005196 <_svfiprintf_r+0x182>
 80051b4:	ab03      	add	r3, sp, #12
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	4622      	mov	r2, r4
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <_svfiprintf_r+0x1ec>)
 80051bc:	a904      	add	r1, sp, #16
 80051be:	4640      	mov	r0, r8
 80051c0:	f3af 8000 	nop.w
 80051c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051c8:	4681      	mov	r9, r0
 80051ca:	d1d6      	bne.n	800517a <_svfiprintf_r+0x166>
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	065b      	lsls	r3, r3, #25
 80051d0:	f53f af35 	bmi.w	800503e <_svfiprintf_r+0x2a>
 80051d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d6:	b01d      	add	sp, #116	; 0x74
 80051d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4622      	mov	r2, r4
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <_svfiprintf_r+0x1ec>)
 80051e4:	a904      	add	r1, sp, #16
 80051e6:	4640      	mov	r0, r8
 80051e8:	f000 f882 	bl	80052f0 <_printf_i>
 80051ec:	e7ea      	b.n	80051c4 <_svfiprintf_r+0x1b0>
 80051ee:	bf00      	nop
 80051f0:	0800581c 	.word	0x0800581c
 80051f4:	08005822 	.word	0x08005822
 80051f8:	08005826 	.word	0x08005826
 80051fc:	00000000 	.word	0x00000000
 8005200:	08004f61 	.word	0x08004f61

08005204 <_printf_common>:
 8005204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	4691      	mov	r9, r2
 800520a:	461f      	mov	r7, r3
 800520c:	688a      	ldr	r2, [r1, #8]
 800520e:	690b      	ldr	r3, [r1, #16]
 8005210:	4606      	mov	r6, r0
 8005212:	4293      	cmp	r3, r2
 8005214:	bfb8      	it	lt
 8005216:	4613      	movlt	r3, r2
 8005218:	f8c9 3000 	str.w	r3, [r9]
 800521c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005220:	460c      	mov	r4, r1
 8005222:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005226:	b112      	cbz	r2, 800522e <_printf_common+0x2a>
 8005228:	3301      	adds	r3, #1
 800522a:	f8c9 3000 	str.w	r3, [r9]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	0699      	lsls	r1, r3, #26
 8005232:	bf42      	ittt	mi
 8005234:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005238:	3302      	addmi	r3, #2
 800523a:	f8c9 3000 	strmi.w	r3, [r9]
 800523e:	6825      	ldr	r5, [r4, #0]
 8005240:	f015 0506 	ands.w	r5, r5, #6
 8005244:	d107      	bne.n	8005256 <_printf_common+0x52>
 8005246:	f104 0a19 	add.w	sl, r4, #25
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	f8d9 2000 	ldr.w	r2, [r9]
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	42ab      	cmp	r3, r5
 8005254:	dc29      	bgt.n	80052aa <_printf_common+0xa6>
 8005256:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	3300      	adds	r3, #0
 800525e:	bf18      	it	ne
 8005260:	2301      	movne	r3, #1
 8005262:	0692      	lsls	r2, r2, #26
 8005264:	d42e      	bmi.n	80052c4 <_printf_common+0xc0>
 8005266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526a:	4639      	mov	r1, r7
 800526c:	4630      	mov	r0, r6
 800526e:	47c0      	blx	r8
 8005270:	3001      	adds	r0, #1
 8005272:	d021      	beq.n	80052b8 <_printf_common+0xb4>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	68e5      	ldr	r5, [r4, #12]
 8005278:	f003 0306 	and.w	r3, r3, #6
 800527c:	2b04      	cmp	r3, #4
 800527e:	bf18      	it	ne
 8005280:	2500      	movne	r5, #0
 8005282:	f8d9 2000 	ldr.w	r2, [r9]
 8005286:	f04f 0900 	mov.w	r9, #0
 800528a:	bf08      	it	eq
 800528c:	1aad      	subeq	r5, r5, r2
 800528e:	68a3      	ldr	r3, [r4, #8]
 8005290:	6922      	ldr	r2, [r4, #16]
 8005292:	bf08      	it	eq
 8005294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005298:	4293      	cmp	r3, r2
 800529a:	bfc4      	itt	gt
 800529c:	1a9b      	subgt	r3, r3, r2
 800529e:	18ed      	addgt	r5, r5, r3
 80052a0:	341a      	adds	r4, #26
 80052a2:	454d      	cmp	r5, r9
 80052a4:	d11a      	bne.n	80052dc <_printf_common+0xd8>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e008      	b.n	80052bc <_printf_common+0xb8>
 80052aa:	2301      	movs	r3, #1
 80052ac:	4652      	mov	r2, sl
 80052ae:	4639      	mov	r1, r7
 80052b0:	4630      	mov	r0, r6
 80052b2:	47c0      	blx	r8
 80052b4:	3001      	adds	r0, #1
 80052b6:	d103      	bne.n	80052c0 <_printf_common+0xbc>
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c0:	3501      	adds	r5, #1
 80052c2:	e7c2      	b.n	800524a <_printf_common+0x46>
 80052c4:	2030      	movs	r0, #48	; 0x30
 80052c6:	18e1      	adds	r1, r4, r3
 80052c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d2:	4422      	add	r2, r4
 80052d4:	3302      	adds	r3, #2
 80052d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052da:	e7c4      	b.n	8005266 <_printf_common+0x62>
 80052dc:	2301      	movs	r3, #1
 80052de:	4622      	mov	r2, r4
 80052e0:	4639      	mov	r1, r7
 80052e2:	4630      	mov	r0, r6
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d0e6      	beq.n	80052b8 <_printf_common+0xb4>
 80052ea:	f109 0901 	add.w	r9, r9, #1
 80052ee:	e7d8      	b.n	80052a2 <_printf_common+0x9e>

080052f0 <_printf_i>:
 80052f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052f8:	460c      	mov	r4, r1
 80052fa:	7e09      	ldrb	r1, [r1, #24]
 80052fc:	b085      	sub	sp, #20
 80052fe:	296e      	cmp	r1, #110	; 0x6e
 8005300:	4617      	mov	r7, r2
 8005302:	4606      	mov	r6, r0
 8005304:	4698      	mov	r8, r3
 8005306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005308:	f000 80b3 	beq.w	8005472 <_printf_i+0x182>
 800530c:	d822      	bhi.n	8005354 <_printf_i+0x64>
 800530e:	2963      	cmp	r1, #99	; 0x63
 8005310:	d036      	beq.n	8005380 <_printf_i+0x90>
 8005312:	d80a      	bhi.n	800532a <_printf_i+0x3a>
 8005314:	2900      	cmp	r1, #0
 8005316:	f000 80b9 	beq.w	800548c <_printf_i+0x19c>
 800531a:	2958      	cmp	r1, #88	; 0x58
 800531c:	f000 8083 	beq.w	8005426 <_printf_i+0x136>
 8005320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005324:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005328:	e032      	b.n	8005390 <_printf_i+0xa0>
 800532a:	2964      	cmp	r1, #100	; 0x64
 800532c:	d001      	beq.n	8005332 <_printf_i+0x42>
 800532e:	2969      	cmp	r1, #105	; 0x69
 8005330:	d1f6      	bne.n	8005320 <_printf_i+0x30>
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	0605      	lsls	r5, r0, #24
 8005338:	f103 0104 	add.w	r1, r3, #4
 800533c:	d52a      	bpl.n	8005394 <_printf_i+0xa4>
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6011      	str	r1, [r2, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	da03      	bge.n	800534e <_printf_i+0x5e>
 8005346:	222d      	movs	r2, #45	; 0x2d
 8005348:	425b      	negs	r3, r3
 800534a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800534e:	486f      	ldr	r0, [pc, #444]	; (800550c <_printf_i+0x21c>)
 8005350:	220a      	movs	r2, #10
 8005352:	e039      	b.n	80053c8 <_printf_i+0xd8>
 8005354:	2973      	cmp	r1, #115	; 0x73
 8005356:	f000 809d 	beq.w	8005494 <_printf_i+0x1a4>
 800535a:	d808      	bhi.n	800536e <_printf_i+0x7e>
 800535c:	296f      	cmp	r1, #111	; 0x6f
 800535e:	d020      	beq.n	80053a2 <_printf_i+0xb2>
 8005360:	2970      	cmp	r1, #112	; 0x70
 8005362:	d1dd      	bne.n	8005320 <_printf_i+0x30>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	f043 0320 	orr.w	r3, r3, #32
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	e003      	b.n	8005376 <_printf_i+0x86>
 800536e:	2975      	cmp	r1, #117	; 0x75
 8005370:	d017      	beq.n	80053a2 <_printf_i+0xb2>
 8005372:	2978      	cmp	r1, #120	; 0x78
 8005374:	d1d4      	bne.n	8005320 <_printf_i+0x30>
 8005376:	2378      	movs	r3, #120	; 0x78
 8005378:	4865      	ldr	r0, [pc, #404]	; (8005510 <_printf_i+0x220>)
 800537a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800537e:	e055      	b.n	800542c <_printf_i+0x13c>
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005386:	1d19      	adds	r1, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6011      	str	r1, [r2, #0]
 800538c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005390:	2301      	movs	r3, #1
 8005392:	e08c      	b.n	80054ae <_printf_i+0x1be>
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800539a:	6011      	str	r1, [r2, #0]
 800539c:	bf18      	it	ne
 800539e:	b21b      	sxthne	r3, r3
 80053a0:	e7cf      	b.n	8005342 <_printf_i+0x52>
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	1d18      	adds	r0, r3, #4
 80053a8:	6010      	str	r0, [r2, #0]
 80053aa:	0628      	lsls	r0, r5, #24
 80053ac:	d501      	bpl.n	80053b2 <_printf_i+0xc2>
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	e002      	b.n	80053b8 <_printf_i+0xc8>
 80053b2:	0668      	lsls	r0, r5, #25
 80053b4:	d5fb      	bpl.n	80053ae <_printf_i+0xbe>
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	296f      	cmp	r1, #111	; 0x6f
 80053ba:	bf14      	ite	ne
 80053bc:	220a      	movne	r2, #10
 80053be:	2208      	moveq	r2, #8
 80053c0:	4852      	ldr	r0, [pc, #328]	; (800550c <_printf_i+0x21c>)
 80053c2:	2100      	movs	r1, #0
 80053c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c8:	6865      	ldr	r5, [r4, #4]
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	60a5      	str	r5, [r4, #8]
 80053ce:	f2c0 8095 	blt.w	80054fc <_printf_i+0x20c>
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	f021 0104 	bic.w	r1, r1, #4
 80053d8:	6021      	str	r1, [r4, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d13d      	bne.n	800545a <_printf_i+0x16a>
 80053de:	2d00      	cmp	r5, #0
 80053e0:	f040 808e 	bne.w	8005500 <_printf_i+0x210>
 80053e4:	4665      	mov	r5, ip
 80053e6:	2a08      	cmp	r2, #8
 80053e8:	d10b      	bne.n	8005402 <_printf_i+0x112>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	07db      	lsls	r3, r3, #31
 80053ee:	d508      	bpl.n	8005402 <_printf_i+0x112>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bfde      	ittt	le
 80053f8:	2330      	movle	r3, #48	; 0x30
 80053fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005402:	ebac 0305 	sub.w	r3, ip, r5
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	f8cd 8000 	str.w	r8, [sp]
 800540c:	463b      	mov	r3, r7
 800540e:	aa03      	add	r2, sp, #12
 8005410:	4621      	mov	r1, r4
 8005412:	4630      	mov	r0, r6
 8005414:	f7ff fef6 	bl	8005204 <_printf_common>
 8005418:	3001      	adds	r0, #1
 800541a:	d14d      	bne.n	80054b8 <_printf_i+0x1c8>
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	b005      	add	sp, #20
 8005422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005426:	4839      	ldr	r0, [pc, #228]	; (800550c <_printf_i+0x21c>)
 8005428:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800542c:	6813      	ldr	r3, [r2, #0]
 800542e:	6821      	ldr	r1, [r4, #0]
 8005430:	1d1d      	adds	r5, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6015      	str	r5, [r2, #0]
 8005436:	060a      	lsls	r2, r1, #24
 8005438:	d50b      	bpl.n	8005452 <_printf_i+0x162>
 800543a:	07ca      	lsls	r2, r1, #31
 800543c:	bf44      	itt	mi
 800543e:	f041 0120 	orrmi.w	r1, r1, #32
 8005442:	6021      	strmi	r1, [r4, #0]
 8005444:	b91b      	cbnz	r3, 800544e <_printf_i+0x15e>
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	f022 0220 	bic.w	r2, r2, #32
 800544c:	6022      	str	r2, [r4, #0]
 800544e:	2210      	movs	r2, #16
 8005450:	e7b7      	b.n	80053c2 <_printf_i+0xd2>
 8005452:	064d      	lsls	r5, r1, #25
 8005454:	bf48      	it	mi
 8005456:	b29b      	uxthmi	r3, r3
 8005458:	e7ef      	b.n	800543a <_printf_i+0x14a>
 800545a:	4665      	mov	r5, ip
 800545c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005460:	fb02 3311 	mls	r3, r2, r1, r3
 8005464:	5cc3      	ldrb	r3, [r0, r3]
 8005466:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800546a:	460b      	mov	r3, r1
 800546c:	2900      	cmp	r1, #0
 800546e:	d1f5      	bne.n	800545c <_printf_i+0x16c>
 8005470:	e7b9      	b.n	80053e6 <_printf_i+0xf6>
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	6825      	ldr	r5, [r4, #0]
 8005476:	1d18      	adds	r0, r3, #4
 8005478:	6961      	ldr	r1, [r4, #20]
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	0628      	lsls	r0, r5, #24
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	d501      	bpl.n	8005486 <_printf_i+0x196>
 8005482:	6019      	str	r1, [r3, #0]
 8005484:	e002      	b.n	800548c <_printf_i+0x19c>
 8005486:	066a      	lsls	r2, r5, #25
 8005488:	d5fb      	bpl.n	8005482 <_printf_i+0x192>
 800548a:	8019      	strh	r1, [r3, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	4665      	mov	r5, ip
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	e7b9      	b.n	8005408 <_printf_i+0x118>
 8005494:	6813      	ldr	r3, [r2, #0]
 8005496:	1d19      	adds	r1, r3, #4
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	681d      	ldr	r5, [r3, #0]
 800549c:	6862      	ldr	r2, [r4, #4]
 800549e:	2100      	movs	r1, #0
 80054a0:	4628      	mov	r0, r5
 80054a2:	f000 f837 	bl	8005514 <memchr>
 80054a6:	b108      	cbz	r0, 80054ac <_printf_i+0x1bc>
 80054a8:	1b40      	subs	r0, r0, r5
 80054aa:	6060      	str	r0, [r4, #4]
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	2300      	movs	r3, #0
 80054b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b6:	e7a7      	b.n	8005408 <_printf_i+0x118>
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	462a      	mov	r2, r5
 80054bc:	4639      	mov	r1, r7
 80054be:	4630      	mov	r0, r6
 80054c0:	47c0      	blx	r8
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0aa      	beq.n	800541c <_printf_i+0x12c>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	079b      	lsls	r3, r3, #30
 80054ca:	d413      	bmi.n	80054f4 <_printf_i+0x204>
 80054cc:	68e0      	ldr	r0, [r4, #12]
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	4298      	cmp	r0, r3
 80054d2:	bfb8      	it	lt
 80054d4:	4618      	movlt	r0, r3
 80054d6:	e7a3      	b.n	8005420 <_printf_i+0x130>
 80054d8:	2301      	movs	r3, #1
 80054da:	464a      	mov	r2, r9
 80054dc:	4639      	mov	r1, r7
 80054de:	4630      	mov	r0, r6
 80054e0:	47c0      	blx	r8
 80054e2:	3001      	adds	r0, #1
 80054e4:	d09a      	beq.n	800541c <_printf_i+0x12c>
 80054e6:	3501      	adds	r5, #1
 80054e8:	68e3      	ldr	r3, [r4, #12]
 80054ea:	9a03      	ldr	r2, [sp, #12]
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	42ab      	cmp	r3, r5
 80054f0:	dcf2      	bgt.n	80054d8 <_printf_i+0x1e8>
 80054f2:	e7eb      	b.n	80054cc <_printf_i+0x1dc>
 80054f4:	2500      	movs	r5, #0
 80054f6:	f104 0919 	add.w	r9, r4, #25
 80054fa:	e7f5      	b.n	80054e8 <_printf_i+0x1f8>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ac      	bne.n	800545a <_printf_i+0x16a>
 8005500:	7803      	ldrb	r3, [r0, #0]
 8005502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550a:	e76c      	b.n	80053e6 <_printf_i+0xf6>
 800550c:	0800582d 	.word	0x0800582d
 8005510:	0800583e 	.word	0x0800583e

08005514 <memchr>:
 8005514:	b510      	push	{r4, lr}
 8005516:	b2c9      	uxtb	r1, r1
 8005518:	4402      	add	r2, r0
 800551a:	4290      	cmp	r0, r2
 800551c:	4603      	mov	r3, r0
 800551e:	d101      	bne.n	8005524 <memchr+0x10>
 8005520:	2300      	movs	r3, #0
 8005522:	e003      	b.n	800552c <memchr+0x18>
 8005524:	781c      	ldrb	r4, [r3, #0]
 8005526:	3001      	adds	r0, #1
 8005528:	428c      	cmp	r4, r1
 800552a:	d1f6      	bne.n	800551a <memchr+0x6>
 800552c:	4618      	mov	r0, r3
 800552e:	bd10      	pop	{r4, pc}

08005530 <memcpy>:
 8005530:	b510      	push	{r4, lr}
 8005532:	1e43      	subs	r3, r0, #1
 8005534:	440a      	add	r2, r1
 8005536:	4291      	cmp	r1, r2
 8005538:	d100      	bne.n	800553c <memcpy+0xc>
 800553a:	bd10      	pop	{r4, pc}
 800553c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005544:	e7f7      	b.n	8005536 <memcpy+0x6>

08005546 <memmove>:
 8005546:	4288      	cmp	r0, r1
 8005548:	b510      	push	{r4, lr}
 800554a:	eb01 0302 	add.w	r3, r1, r2
 800554e:	d807      	bhi.n	8005560 <memmove+0x1a>
 8005550:	1e42      	subs	r2, r0, #1
 8005552:	4299      	cmp	r1, r3
 8005554:	d00a      	beq.n	800556c <memmove+0x26>
 8005556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800555a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800555e:	e7f8      	b.n	8005552 <memmove+0xc>
 8005560:	4283      	cmp	r3, r0
 8005562:	d9f5      	bls.n	8005550 <memmove+0xa>
 8005564:	1881      	adds	r1, r0, r2
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	42d3      	cmn	r3, r2
 800556a:	d100      	bne.n	800556e <memmove+0x28>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005572:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005576:	e7f7      	b.n	8005568 <memmove+0x22>

08005578 <_free_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4605      	mov	r5, r0
 800557c:	2900      	cmp	r1, #0
 800557e:	d043      	beq.n	8005608 <_free_r+0x90>
 8005580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005584:	1f0c      	subs	r4, r1, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfb8      	it	lt
 800558a:	18e4      	addlt	r4, r4, r3
 800558c:	f000 f8d0 	bl	8005730 <__malloc_lock>
 8005590:	4a1e      	ldr	r2, [pc, #120]	; (800560c <_free_r+0x94>)
 8005592:	6813      	ldr	r3, [r2, #0]
 8005594:	4610      	mov	r0, r2
 8005596:	b933      	cbnz	r3, 80055a6 <_free_r+0x2e>
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	6014      	str	r4, [r2, #0]
 800559c:	4628      	mov	r0, r5
 800559e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a2:	f000 b8c6 	b.w	8005732 <__malloc_unlock>
 80055a6:	42a3      	cmp	r3, r4
 80055a8:	d90b      	bls.n	80055c2 <_free_r+0x4a>
 80055aa:	6821      	ldr	r1, [r4, #0]
 80055ac:	1862      	adds	r2, r4, r1
 80055ae:	4293      	cmp	r3, r2
 80055b0:	bf01      	itttt	eq
 80055b2:	681a      	ldreq	r2, [r3, #0]
 80055b4:	685b      	ldreq	r3, [r3, #4]
 80055b6:	1852      	addeq	r2, r2, r1
 80055b8:	6022      	streq	r2, [r4, #0]
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	6004      	str	r4, [r0, #0]
 80055be:	e7ed      	b.n	800559c <_free_r+0x24>
 80055c0:	4613      	mov	r3, r2
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	b10a      	cbz	r2, 80055ca <_free_r+0x52>
 80055c6:	42a2      	cmp	r2, r4
 80055c8:	d9fa      	bls.n	80055c0 <_free_r+0x48>
 80055ca:	6819      	ldr	r1, [r3, #0]
 80055cc:	1858      	adds	r0, r3, r1
 80055ce:	42a0      	cmp	r0, r4
 80055d0:	d10b      	bne.n	80055ea <_free_r+0x72>
 80055d2:	6820      	ldr	r0, [r4, #0]
 80055d4:	4401      	add	r1, r0
 80055d6:	1858      	adds	r0, r3, r1
 80055d8:	4282      	cmp	r2, r0
 80055da:	6019      	str	r1, [r3, #0]
 80055dc:	d1de      	bne.n	800559c <_free_r+0x24>
 80055de:	6810      	ldr	r0, [r2, #0]
 80055e0:	6852      	ldr	r2, [r2, #4]
 80055e2:	4401      	add	r1, r0
 80055e4:	6019      	str	r1, [r3, #0]
 80055e6:	605a      	str	r2, [r3, #4]
 80055e8:	e7d8      	b.n	800559c <_free_r+0x24>
 80055ea:	d902      	bls.n	80055f2 <_free_r+0x7a>
 80055ec:	230c      	movs	r3, #12
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	e7d4      	b.n	800559c <_free_r+0x24>
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	1821      	adds	r1, r4, r0
 80055f6:	428a      	cmp	r2, r1
 80055f8:	bf01      	itttt	eq
 80055fa:	6811      	ldreq	r1, [r2, #0]
 80055fc:	6852      	ldreq	r2, [r2, #4]
 80055fe:	1809      	addeq	r1, r1, r0
 8005600:	6021      	streq	r1, [r4, #0]
 8005602:	6062      	str	r2, [r4, #4]
 8005604:	605c      	str	r4, [r3, #4]
 8005606:	e7c9      	b.n	800559c <_free_r+0x24>
 8005608:	bd38      	pop	{r3, r4, r5, pc}
 800560a:	bf00      	nop
 800560c:	20000124 	.word	0x20000124

08005610 <_malloc_r>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	1ccd      	adds	r5, r1, #3
 8005614:	f025 0503 	bic.w	r5, r5, #3
 8005618:	3508      	adds	r5, #8
 800561a:	2d0c      	cmp	r5, #12
 800561c:	bf38      	it	cc
 800561e:	250c      	movcc	r5, #12
 8005620:	2d00      	cmp	r5, #0
 8005622:	4606      	mov	r6, r0
 8005624:	db01      	blt.n	800562a <_malloc_r+0x1a>
 8005626:	42a9      	cmp	r1, r5
 8005628:	d903      	bls.n	8005632 <_malloc_r+0x22>
 800562a:	230c      	movs	r3, #12
 800562c:	6033      	str	r3, [r6, #0]
 800562e:	2000      	movs	r0, #0
 8005630:	bd70      	pop	{r4, r5, r6, pc}
 8005632:	f000 f87d 	bl	8005730 <__malloc_lock>
 8005636:	4a21      	ldr	r2, [pc, #132]	; (80056bc <_malloc_r+0xac>)
 8005638:	6814      	ldr	r4, [r2, #0]
 800563a:	4621      	mov	r1, r4
 800563c:	b991      	cbnz	r1, 8005664 <_malloc_r+0x54>
 800563e:	4c20      	ldr	r4, [pc, #128]	; (80056c0 <_malloc_r+0xb0>)
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	b91b      	cbnz	r3, 800564c <_malloc_r+0x3c>
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f863 	bl	8005710 <_sbrk_r>
 800564a:	6020      	str	r0, [r4, #0]
 800564c:	4629      	mov	r1, r5
 800564e:	4630      	mov	r0, r6
 8005650:	f000 f85e 	bl	8005710 <_sbrk_r>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d124      	bne.n	80056a2 <_malloc_r+0x92>
 8005658:	230c      	movs	r3, #12
 800565a:	4630      	mov	r0, r6
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	f000 f868 	bl	8005732 <__malloc_unlock>
 8005662:	e7e4      	b.n	800562e <_malloc_r+0x1e>
 8005664:	680b      	ldr	r3, [r1, #0]
 8005666:	1b5b      	subs	r3, r3, r5
 8005668:	d418      	bmi.n	800569c <_malloc_r+0x8c>
 800566a:	2b0b      	cmp	r3, #11
 800566c:	d90f      	bls.n	800568e <_malloc_r+0x7e>
 800566e:	600b      	str	r3, [r1, #0]
 8005670:	18cc      	adds	r4, r1, r3
 8005672:	50cd      	str	r5, [r1, r3]
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f85c 	bl	8005732 <__malloc_unlock>
 800567a:	f104 000b 	add.w	r0, r4, #11
 800567e:	1d23      	adds	r3, r4, #4
 8005680:	f020 0007 	bic.w	r0, r0, #7
 8005684:	1ac3      	subs	r3, r0, r3
 8005686:	d0d3      	beq.n	8005630 <_malloc_r+0x20>
 8005688:	425a      	negs	r2, r3
 800568a:	50e2      	str	r2, [r4, r3]
 800568c:	e7d0      	b.n	8005630 <_malloc_r+0x20>
 800568e:	684b      	ldr	r3, [r1, #4]
 8005690:	428c      	cmp	r4, r1
 8005692:	bf16      	itet	ne
 8005694:	6063      	strne	r3, [r4, #4]
 8005696:	6013      	streq	r3, [r2, #0]
 8005698:	460c      	movne	r4, r1
 800569a:	e7eb      	b.n	8005674 <_malloc_r+0x64>
 800569c:	460c      	mov	r4, r1
 800569e:	6849      	ldr	r1, [r1, #4]
 80056a0:	e7cc      	b.n	800563c <_malloc_r+0x2c>
 80056a2:	1cc4      	adds	r4, r0, #3
 80056a4:	f024 0403 	bic.w	r4, r4, #3
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d005      	beq.n	80056b8 <_malloc_r+0xa8>
 80056ac:	1a21      	subs	r1, r4, r0
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 f82e 	bl	8005710 <_sbrk_r>
 80056b4:	3001      	adds	r0, #1
 80056b6:	d0cf      	beq.n	8005658 <_malloc_r+0x48>
 80056b8:	6025      	str	r5, [r4, #0]
 80056ba:	e7db      	b.n	8005674 <_malloc_r+0x64>
 80056bc:	20000124 	.word	0x20000124
 80056c0:	20000128 	.word	0x20000128

080056c4 <_realloc_r>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	4607      	mov	r7, r0
 80056c8:	4614      	mov	r4, r2
 80056ca:	460e      	mov	r6, r1
 80056cc:	b921      	cbnz	r1, 80056d8 <_realloc_r+0x14>
 80056ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056d2:	4611      	mov	r1, r2
 80056d4:	f7ff bf9c 	b.w	8005610 <_malloc_r>
 80056d8:	b922      	cbnz	r2, 80056e4 <_realloc_r+0x20>
 80056da:	f7ff ff4d 	bl	8005578 <_free_r>
 80056de:	4625      	mov	r5, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e4:	f000 f826 	bl	8005734 <_malloc_usable_size_r>
 80056e8:	42a0      	cmp	r0, r4
 80056ea:	d20f      	bcs.n	800570c <_realloc_r+0x48>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4638      	mov	r0, r7
 80056f0:	f7ff ff8e 	bl	8005610 <_malloc_r>
 80056f4:	4605      	mov	r5, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d0f2      	beq.n	80056e0 <_realloc_r+0x1c>
 80056fa:	4631      	mov	r1, r6
 80056fc:	4622      	mov	r2, r4
 80056fe:	f7ff ff17 	bl	8005530 <memcpy>
 8005702:	4631      	mov	r1, r6
 8005704:	4638      	mov	r0, r7
 8005706:	f7ff ff37 	bl	8005578 <_free_r>
 800570a:	e7e9      	b.n	80056e0 <_realloc_r+0x1c>
 800570c:	4635      	mov	r5, r6
 800570e:	e7e7      	b.n	80056e0 <_realloc_r+0x1c>

08005710 <_sbrk_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	2300      	movs	r3, #0
 8005714:	4c05      	ldr	r4, [pc, #20]	; (800572c <_sbrk_r+0x1c>)
 8005716:	4605      	mov	r5, r0
 8005718:	4608      	mov	r0, r1
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	f7ff fb6a 	bl	8004df4 <_sbrk>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_sbrk_r+0x1a>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	b103      	cbz	r3, 800572a <_sbrk_r+0x1a>
 8005728:	602b      	str	r3, [r5, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	20000188 	.word	0x20000188

08005730 <__malloc_lock>:
 8005730:	4770      	bx	lr

08005732 <__malloc_unlock>:
 8005732:	4770      	bx	lr

08005734 <_malloc_usable_size_r>:
 8005734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005738:	1f18      	subs	r0, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	bfbc      	itt	lt
 800573e:	580b      	ldrlt	r3, [r1, r0]
 8005740:	18c0      	addlt	r0, r0, r3
 8005742:	4770      	bx	lr

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
